        -:    0:Source:/usr/include/c++/6/exception
        -:    0:Graph:main.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:// Exception Handling support header for -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 1995-2016 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of GCC.
        -:    6://
        -:    7:// GCC is free software; you can redistribute it and/or modify
        -:    8:// it under the terms of the GNU General Public License as published by
        -:    9:// the Free Software Foundation; either version 3, or (at your option)
        -:   10:// any later version.
        -:   11://
        -:   12:// GCC is distributed in the hope that it will be useful,
        -:   13:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   14:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   15:// GNU General Public License for more details.
        -:   16://
        -:   17:// Under Section 7 of GPL version 3, you are granted additional
        -:   18:// permissions described in the GCC Runtime Library Exception, version
        -:   19:// 3.1, as published by the Free Software Foundation.
        -:   20:
        -:   21:// You should have received a copy of the GNU General Public License and
        -:   22:// a copy of the GCC Runtime Library Exception along with this program;
        -:   23:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   24:// <http://www.gnu.org/licenses/>.
        -:   25:
        -:   26:/** @file exception
        -:   27: *  This is a Standard C++ Library header.
        -:   28: */
        -:   29:
        -:   30:#ifndef __EXCEPTION__
        -:   31:#define __EXCEPTION__
        -:   32:
        -:   33:#pragma GCC system_header
        -:   34:
        -:   35:#pragma GCC visibility push(default)
        -:   36:
        -:   37:#include <bits/c++config.h>
        -:   38:#if !(defined(__ARM_EABI__) && !defined(__ARM_PCS_VFP))
        -:   39:#include <bits/atomic_lockfree_defines.h>
        -:   40:#endif
        -:   41:
        -:   42:extern "C++" {
        -:   43:
        -:   44:namespace std
        -:   45:{
        -:   46:  /**
        -:   47:   * @defgroup exceptions Exceptions
        -:   48:   * @ingroup diagnostics
        -:   49:   *
        -:   50:   * Classes and functions for reporting errors via exception classes.
        -:   51:   * @{
        -:   52:   */
        -:   53:
        -:   54:  /**
        -:   55:   *  @brief Base class for all library exceptions.
        -:   56:   *
        -:   57:   *  This is the base class for all exceptions thrown by the standard
        -:   58:   *  library, and by certain language expressions.  You are free to derive
        -:   59:   *  your own %exception classes, or use a different hierarchy, or to
        -:   60:   *  throw non-class data (e.g., fundamental types).
        -:   61:   */
        -:   62:  class exception
        -:   63:  {
        -:   64:  public:
    #####:   65:    exception() _GLIBCXX_USE_NOEXCEPT { }
        -:   66:    virtual ~exception() _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_USE_NOEXCEPT;
        -:   67:
        -:   68:    /** Returns a C-style character string describing the general cause
        -:   69:     *  of the current error.  */
        -:   70:    virtual const char*
        -:   71:    what() const _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_USE_NOEXCEPT;
        -:   72:  };
        -:   73:
        -:   74:  /** If an %exception is thrown which is not listed in a function's
        -:   75:   *  %exception specification, one of these may be thrown.  */
        -:   76:  class bad_exception : public exception
        -:   77:  {
        -:   78:  public:
        -:   79:    bad_exception() _GLIBCXX_USE_NOEXCEPT { }
        -:   80:
        -:   81:    // This declaration is not useless:
        -:   82:    // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
        -:   83:    virtual ~bad_exception() _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_USE_NOEXCEPT;
        -:   84:
        -:   85:    // See comment in eh_exception.cc.
        -:   86:    virtual const char*
        -:   87:    what() const _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_USE_NOEXCEPT;
        -:   88:  };
        -:   89:
        -:   90:  /// If you write a replacement %terminate handler, it must be of this type.
        -:   91:  typedef void (*terminate_handler) ();
        -:   92:
        -:   93:  /// If you write a replacement %unexpected handler, it must be of this type.
        -:   94:  typedef void (*unexpected_handler) ();
        -:   95:
        -:   96:  /// Takes a new handler function as an argument, returns the old function.
        -:   97:  terminate_handler set_terminate(terminate_handler) _GLIBCXX_USE_NOEXCEPT;
        -:   98:
        -:   99:#if __cplusplus >= 201103L
        -:  100:  /// Return the current terminate handler.
        -:  101:  terminate_handler get_terminate() noexcept;
        -:  102:#endif
        -:  103:
        -:  104:  /** The runtime will call this function if %exception handling must be
        -:  105:   *  abandoned for any reason.  It can also be called by the user.  */
        -:  106:  void terminate() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__noreturn__));
        -:  107:
        -:  108:  /// Takes a new handler function as an argument, returns the old function.
        -:  109:  unexpected_handler set_unexpected(unexpected_handler) _GLIBCXX_USE_NOEXCEPT;
        -:  110:
        -:  111:#if __cplusplus >= 201103L
        -:  112:  /// Return the current unexpected handler.
        -:  113:  unexpected_handler get_unexpected() noexcept;
        -:  114:#endif
        -:  115:
        -:  116:  /** The runtime will call this function if an %exception is thrown which
        -:  117:   *  violates the function's %exception specification.  */
        -:  118:  void unexpected() __attribute__ ((__noreturn__));
        -:  119:
        -:  120:  /** [18.6.4]/1:  'Returns true after completing evaluation of a
        -:  121:   *  throw-expression until either completing initialization of the
        -:  122:   *  exception-declaration in the matching handler or entering @c unexpected()
        -:  123:   *  due to the throw; or after entering @c terminate() for any reason
        -:  124:   *  other than an explicit call to @c terminate().  [Note: This includes
        -:  125:   *  stack unwinding [15.2].  end note]'
        -:  126:   *
        -:  127:   *  2: 'When @c uncaught_exception() is true, throwing an
        -:  128:   *  %exception can result in a call of @c terminate()
        -:  129:   *  (15.5.1).'
        -:  130:   */
        -:  131:  bool uncaught_exception() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
        -:  132:
        -:  133:#if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++98
        -:  134:#define __cpp_lib_uncaught_exceptions 201411
        -:  135:  /// The number of uncaught exceptions.
        -:  136:  int uncaught_exceptions() _GLIBCXX_USE_NOEXCEPT __attribute__ ((__pure__));
        -:  137:#endif
        -:  138:
        -:  139:  // @} group exceptions
        -:  140:} // namespace std
        -:  141:
        -:  142:namespace __gnu_cxx
        -:  143:{
        -:  144:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:  145:
        -:  146:  /**
        -:  147:   *  @brief A replacement for the standard terminate_handler which
        -:  148:   *  prints more information about the terminating exception (if any)
        -:  149:   *  on stderr.
        -:  150:   *
        -:  151:   *  @ingroup exceptions
        -:  152:   *
        -:  153:   *  Call
        -:  154:   *   @code
        -:  155:   *     std::set_terminate(__gnu_cxx::__verbose_terminate_handler)
        -:  156:   *   @endcode
        -:  157:   *  to use.  For more info, see
        -:  158:   *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt02ch06s02.html
        -:  159:   *
        -:  160:   *  In 3.4 and later, this is on by default.
        -:  161:   */
        -:  162:  void __verbose_terminate_handler();
        -:  163:
        -:  164:_GLIBCXX_END_NAMESPACE_VERSION
        -:  165:} // namespace
        -:  166:
        -:  167:} // extern "C++"
        -:  168:
        -:  169:#pragma GCC visibility pop
        -:  170:
        -:  171:#if (__cplusplus >= 201103L) && ((ATOMIC_INT_LOCK_FREE > 1) || (defined(__ARM_EABI__) && !defined(__ARM_PCS_VFP)))
        -:  172:#include <bits/exception_ptr.h>
        -:  173:#include <bits/nested_exception.h>
        -:  174:#endif
        -:  175:
        -:  176:#endif
