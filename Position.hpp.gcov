        -:    0:Source:src/Position.hpp
        -:    0:Graph:main.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2: * Copyright 2017 © Centre Interdisciplinaire de développement en Cartographie des Océans (CIDCO), Tous droits réservés
        -:    3: */
        -:    4:
        -:    5:/* 
        -:    6: * File:   Position.hpp
        -:    7: * Author: glm,jordan,emilegagne
        -:    8: *
        -:    9: * Created on September 13, 2018, 3:29 PM
        -:   10: */
        -:   11:
        -:   12:#ifndef POSITION_HPP
        -:   13:#define POSITION_HPP
        -:   14:
        -:   15:#include <iostream>
        -:   16:#include "utils/Constants.hpp"
        -:   17:#include <cmath>
        -:   18:
        -:   19:/*!
        -:   20: * \brief Position class
        -:   21: */
        -:   22:class Position {
        -:   23:public:
        -:   24:
        -:   25:    /**
        -:   26:     * Create a position
        -:   27:     * 
        -:   28:     * @param microEpoch time value calculated since January 1970 (micro-second)
        -:   29:     * @param latitude the latitude of the position
        -:   30:     * @param longitude the longitude of the position
        -:   31:     * @param ellipsoidalHeight the ellipsoidal height of the position
        -:   32:     */
    #####:   33:    Position(uint64_t microEpoch,double latitude, double longitude, double ellipsoidalHeight) :
        -:   34:    	timestamp(microEpoch),
        -:   35:	latitude(latitude),
        -:   36:    	longitude(longitude),
        -:   37:    	ellipsoidalHeight(ellipsoidalHeight),
    #####:   38:    	slat(sin(latitude * D2R)),
    #####:   39:    	clat(cos(latitude * D2R)),
    #####:   40:    	slon(sin(longitude * D2R)),
    #####:   41:    	clon(cos(longitude * D2R)) 
    #####:   42:     {}
        -:   43:
        -:   44:    /**Destroy the position*/
    #####:   45:    ~Position() {
    #####:   46:    }
        -:   47:
        -:   48:    /**Return the timestamp of the position*/
        -:   49:    uint64_t getTimestamp()		{ return timestamp; }
        -:   50:    
        -:   51:    /**
        -:   52:     * Change the timestamp of the position
        -:   53:     * 
        -:   54:     * @param e the new timestamp value
        -:   55:     */
        -:   56:    void     setTimestamp(uint64_t e)	{ timestamp = e;}
        -:   57:
        -:   58:    /**Return the latitude of the position*/
    #####:   59:    double   getLatitude()		{ return latitude; }
        -:   60:    
        -:   61:    /**
        -:   62:     * Change the latitude of the position
        -:   63:     * 
        -:   64:     * @param l the new latitude
        -:   65:     */
    #####:   66:    void     setLatitude(double l)	{ latitude = l; slat=sin(latitude * D2R); clat=cos(latitude * D2R);}
        -:   67:
        -:   68:    /**Return the longitude of the position*/
    #####:   69:    double   getLongitude()		{ return longitude; }
        -:   70:    
        -:   71:    /**
        -:   72:     * Change the longitude of the position
        -:   73:     * 
        -:   74:     * @param l the new longitude
        -:   75:     */
    #####:   76:    void     setLongitude(double l)     { longitude = l; slon=sin(longitude * D2R);clon=cos(longitude * D2R);}
        -:   77:
        -:   78:    /**Return the ellipsoidal heigh of the position*/
    #####:   79:    double   getEllipsoidalHeight()     	{ return ellipsoidalHeight; }
        -:   80:    
        -:   81:    /**
        -:   82:     * Change the ellipsoidal heigh of the position
        -:   83:     * 
        -:   84:     * @param h the new ellipsoidal height
        -:   85:     */
    #####:   86:    void     setEllipsoidalHeight(double h) 	{ ellipsoidalHeight = h;}
        -:   87:
        -:   88:    /**Return the sine value of the latitude*/
    #####:   89:    double   getSlat()		{ return slat; }
        -:   90:    
        -:   91:    /**Return the sine value of the longitude*/
    #####:   92:    double   getSlon()		{ return slon; }
        -:   93:    
        -:   94:    /**Return the cosine value of the latitude*/
    #####:   95:    double   getClat()		{ return clat; }
        -:   96:    
        -:   97:    /**Return the cosine value of the longitude*/
    #####:   98:    double   getClon()		{ return clon; }
        -:   99:
        -:  100:private:
        -:  101:    
        -:  102:    /**Timestamp value of the position (micro-second)*/
        -:  103:    uint64_t timestamp;
        -:  104:
        -:  105:    // WGS84 position
        -:  106:    
        -:  107:    /**The latitude of the position*/
        -:  108:    double latitude;
        -:  109:    
        -:  110:    /**The longitude of the position*/
        -:  111:    double longitude;
        -:  112:    
        -:  113:    /**The ellipsoidal height of the position*/
        -:  114:    double ellipsoidalHeight;
        -:  115:
        -:  116:    /*Trigonometry is stored to prevent redundant recalculations*/
        -:  117:    
        -:  118:    /**Sine value of the latitude*/
        -:  119:    double slat;
        -:  120:    
        -:  121:    /**Cosine value of the latitude*/
        -:  122:    double clat;
        -:  123:    
        -:  124:    /**Sine value of the longitude*/
        -:  125:    double slon;
        -:  126:    
        -:  127:    /**Cosine value of the longitude*/
        -:  128:    double clon;
        -:  129:
        -:  130:    /**
        -:  131:     * Return a text value who contain the informations of the position
        -:  132:     * 
        -:  133:     * @param os the text value who most contain the informations of the position
        -:  134:     * @param obj the position that we need to get the informations
        -:  135:     */
    #####:  136:    friend std::ostream& operator<<(std::ostream& os, const Position& obj) {
    #####:  137:        return os << "Latitude: " << obj.latitude << std::endl << "Longitude: " << obj.longitude << std::endl << "Ellipsoidal Height: " << obj.ellipsoidalHeight << std::endl;
        -:  138:    }
        -:  139:};
        -:  140:
        -:  141:#endif /* POSITION_HPP */
        -:  142:
