        -:    0:Source:src/datagrams/s7k/S7kTypes.hpp
        -:    0:Graph:main.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2: * Copyright 2018 © Centre Interdisciplinaire de développement en Cartographie des Océans (CIDCO), Tous droits réservés
        -:    3: */
        -:    4:
        -:    5:/* 
        -:    6: * File:   S7kTypes.hpp
        -:    7: * Author: glm,jordan
        -:    8: *
        -:    9: * Created on November 1, 2018, 11:59 AM
        -:   10: */
        -:   11:
        -:   12:#ifndef S7KTYPES_HPP
        -:   13:#define S7KTYPES_HPP
        -:   14:
        -:   15:#include <stdint.h>
        -:   16:#include <iostream>
        -:   17:#include <iomanip>
        -:   18:
        -:   19:#define SYNC_PATTERN 0x0000FFFF
        -:   20:
        -:   21:#pragma pack(1)
        -:   22:typedef struct {
        -:   23:    uint16_t Year;
        -:   24:    uint16_t Day;
        -:   25:    float Seconds;
        -:   26:    uint8_t Hours;
        -:   27:    uint8_t Minutes;
        -:   28:} S7kTime;
        -:   29:#pragma pack()
        -:   30:
    #####:   31:std::ostream& operator<<(std::ostream& os, const S7kTime& time) {
        -:   32:    return os << std::setprecision(15)
    #####:   33:            << "Year: " << time.Year << std::endl
    #####:   34:            << "Day: " << time.Day << std::endl
    #####:   35:            << "Seconds: " << time.Seconds << std::endl
    #####:   36:            << "Hours: " << time.Hours << std::endl
    #####:   37:            << "Minutes: " << time.Minutes; // no std::endl since it is contained in another record
        -:   38:}
        -:   39:
        -:   40:#pragma pack(1)
        -:   41:typedef struct { // pp 13-14
        -:   42:    uint16_t ProtocolVersion;
        -:   43:    uint16_t Offset;
        -:   44:    uint32_t SyncPattern;
        -:   45:    uint32_t Size;
        -:   46:    uint32_t OptionalDataOffset;
        -:   47:    uint32_t OptionalDataIdentifier;
        -:   48:    S7kTime Timestamp;
        -:   49:    uint16_t RecordVersion;
        -:   50:    uint32_t RecordTypeIdentifier;
        -:   51:    uint32_t DeviceIdentifier;
        -:   52:    uint16_t Reserved;
        -:   53:    uint16_t SystemEnumerator;
        -:   54:    uint32_t Reserved2;
        -:   55:    uint16_t Flags;
        -:   56:    uint16_t Reserved3;
        -:   57:    uint32_t Reserved4;
        -:   58:    uint32_t TotalRecordsInFragmentedDataRecordSet; // if appropriate flag is set
        -:   59:    uint32_t FragmentNumber; // if appropriate flag is set
        -:   60:    // does not include variable sized data records
        -:   61:    // does not include u32 checksum after data section
        -:   62:} S7kDataRecordFrame;
        -:   63:#pragma pack()
        -:   64:
    #####:   65:std::ostream& operator<<(std::ostream& os, const S7kDataRecordFrame& drf) {
    #####:   66:    return os << "ProtocolVersion: " << drf.ProtocolVersion << std::endl
    #####:   67:            << "Offset: " << drf.Offset << std::endl
    #####:   68:            << "SyncPattern: " << drf.SyncPattern << std::endl
    #####:   69:            << "Size: " << drf.Size << std::endl
    #####:   70:            << "OptionalDataOffset: " << drf.OptionalDataOffset << std::endl
    #####:   71:            << "OptionalDataIdentifier: " << drf.OptionalDataIdentifier << std::endl
    #####:   72:            << "Timestamp: " << drf.Timestamp << std::endl
    #####:   73:            << "RecordVersion: " << drf.RecordVersion << std::endl
    #####:   74:            << "RecordTypeIdentifier: " << drf.RecordTypeIdentifier << std::endl
    #####:   75:            << "DeviceIdentifier: " << drf.DeviceIdentifier << std::endl
    #####:   76:            << "Reserved: " << drf.Reserved << std::endl
    #####:   77:            << "SystemEnumerator: " << drf.SystemEnumerator << std::endl
    #####:   78:            << "Reserved2: " << drf.Reserved2 << std::endl
    #####:   79:            << "Flags: " << drf.Flags << std::endl
    #####:   80:            << "Reserved3: " << drf.Reserved3 << std::endl
    #####:   81:            << "Reserved4: " << drf.Reserved4 << std::endl
    #####:   82:            << "TotalRecordsInFragmentedDataRecordSet: " << drf.TotalRecordsInFragmentedDataRecordSet << std::endl
    #####:   83:            << "FragmentNumber: " << drf.FragmentNumber << std::endl;
        -:   84:}
        -:   85:
        -:   86:#pragma pack(1)
        -:   87:typedef struct { // pp 102-103
        -:   88:    uint64_t FileIdentifier[2];
        -:   89:    uint16_t VersionNumber;
        -:   90:    uint16_t Reserved;
        -:   91:    uint64_t SessionIdentifier[2];
        -:   92:    uint32_t RecordDataSize;
        -:   93:    uint32_t NumberOfDevices;
        -:   94:    char RecordingName[64];
        -:   95:    char RecordingProgramVersionNumber[16];
        -:   96:    char UserDefinedName[64];
        -:   97:    char Notes[128];
        -:   98:    // does not include variable sized data records
        -:   99:    // does not include variable sized optional records
        -:  100:} S7kFileHeader;
        -:  101:#pragma pack()
        -:  102:
    #####:  103:std::ostream& operator<<(std::ostream& os, const S7kFileHeader& fh) {
    #####:  104:    return os << "FileIdentifier: " << fh.FileIdentifier << std::endl
    #####:  105:            << "VersionNumber: " << fh.VersionNumber << std::endl
    #####:  106:            << "Reserved: " << fh.Reserved << std::endl
    #####:  107:            << "SessionIdentifier: " << fh.SessionIdentifier << std::endl
    #####:  108:            << "RecordDataSize: " << fh.RecordDataSize << std::endl
    #####:  109:            << "NumberOfDevices: " << fh.NumberOfDevices << std::endl
    #####:  110:            << "RecordingName: " << fh.RecordingName << std::endl
    #####:  111:            << "RecordingProgramVersionNumber: " << fh.RecordingProgramVersionNumber << std::endl
    #####:  112:            << "UserDefinedName: " << fh.UserDefinedName << std::endl
    #####:  113:            << "Notes: " << fh.Notes << std::endl;
        -:  114:}
        -:  115:
        -:  116:#pragma pack(1)
        -:  117:typedef struct { // p. 103
        -:  118:    uint32_t DeviceIdentifier;
        -:  119:    uint16_t SystemEnumerator;
        -:  120:    // See NumberOfDevices in S7kFileHeader to determine array size
        -:  121:} S7kFileHeaderRecordDatum;
        -:  122:#pragma pack()
        -:  123:
    #####:  124:std::ostream& operator<<(std::ostream& os, const S7kFileHeaderRecordDatum& fhrd) {
    #####:  125:    return os << "DeviceIdentifier: " << fhrd.DeviceIdentifier << std::endl
    #####:  126:            << "SystemEnumerator: " << fhrd.SystemEnumerator << std::endl;
        -:  127:}
        -:  128:
        -:  129:#pragma pack(1)
        -:  130:typedef struct { // p. 103
        -:  131:    uint32_t Size;
        -:  132:    uint64_t Offset;
        -:  133:} S7kFileHeaderOptionalData;
        -:  134:#pragma pack()
        -:  135:
    #####:  136:std::ostream& operator<<(std::ostream& os, const S7kFileHeaderOptionalData& fhod) {
    #####:  137:    return os << "Size: " << fhod.Size << std::endl
    #####:  138:            << "Offset: " << fhod.Offset << std::endl;
        -:  139:}
        -:  140:
        -:  141:#pragma pack(1)
        -:  142:typedef struct { // pp 25-26
        -:  143:    uint32_t DatumIdentifier;
        -:  144:    float Latency;
        -:  145:    double LatitudeOrNorthing;
        -:  146:    double LongitudeOrEasting;
        -:  147:    double Height;
        -:  148:    uint8_t PositionTypeFlag; // 0 = geographical ; 1 = grid
        -:  149:    uint8_t UTMZone;
        -:  150:    uint8_t QualityFlag;
        -:  151:    uint8_t PositioningMethod; // see p.26
        -:  152:    uint8_t NumberOfSatellites;
        -:  153:} S7kPosition;
        -:  154:#pragma pack()
        -:  155:
    #####:  156:std::ostream& operator<<(std::ostream& os, const S7kPosition& pos) {
    #####:  157:    return os << "DatumIdentifier: " << pos.DatumIdentifier << std::endl
    #####:  158:            << "Latency: " << pos.Latency << std::endl
    #####:  159:            << "LatitudeOrNorthing: " << pos.LatitudeOrNorthing << std::endl
    #####:  160:            << "LongitudeOrEasting: " << pos.LongitudeOrEasting << std::endl
    #####:  161:            << "Height: " << pos.Height << std::endl
    #####:  162:            << "PositionTypeFlag: " << pos.PositionTypeFlag << std::endl
    #####:  163:            << "UTMZone: " << pos.UTMZone << std::endl
    #####:  164:            << "QualityFlag: " << pos.QualityFlag << std::endl
    #####:  165:            << "PositioningMethod: " << pos.PositioningMethod << std::endl
    #####:  166:            << "Latency: " << pos.Latency << std::endl;
        -:  167:}
        -:  168:
        -:  169:#pragma pack(1)
        -:  170:typedef struct { // p. 30
        -:  171:    uint8_t DepthDescriptor;
        -:  172:    uint8_t CorrectionFlag;
        -:  173:    uint16_t Reserved;
        -:  174:    float Depth; // in meters positive towards greater depth
        -:  175:} S7kDepth;
        -:  176:#pragma pack()
        -:  177:
    #####:  178:std::ostream& operator<<(std::ostream& os, const S7kDepth& depth) {
    #####:  179:    return os << "DepthDescriptor: " << depth.DepthDescriptor << std::endl
    #####:  180:            << "CorrectionFlag: " << depth.CorrectionFlag << std::endl
    #####:  181:            << "Reserved: " << depth.Reserved << std::endl
    #####:  182:            << "Depth: " << depth.Depth << std::endl;
        -:  183:}
        -:  184:
        -:  185:#pragma pack(1)
        -:  186:typedef struct { // pp 35-36
        -:  187:    uint8_t VerticalReference;
        -:  188:    double Latitude; // radians -west
        -:  189:    double Longitude; // radians
        -:  190:    float HorizontalPositionAccuracy; // meters
        -:  191:    float VesselHeight; // vessel reference point above vertical reference in meters
        -:  192:    float HeightAccuracy; // meters
        -:  193:    float SpeedOverGround; // m/s
        -:  194:    float CourseOverGround; // radians
        -:  195:    float Heading; // radians
        -:  196:} S7kNavigation;
        -:  197:#pragma pack()
        -:  198:
    #####:  199:std::ostream& operator<<(std::ostream& os, const S7kNavigation& nav) {
    #####:  200:    return os << "VerticalReference: " << nav.VerticalReference << std::endl
    #####:  201:            << "Latitude: " << nav.Latitude << std::endl
    #####:  202:            << "Longitude: " << nav.Longitude << std::endl
    #####:  203:            << "HorizontalPositionAccuracy: " << nav.HorizontalPositionAccuracy << std::endl
    #####:  204:            << "VesselHeight: " << nav.VesselHeight << std::endl
    #####:  205:            << "HeightAccuracy: " << nav.HeightAccuracy << std::endl
    #####:  206:            << "SpeedOverGround: " << nav.SpeedOverGround << std::endl
    #####:  207:            << "CourseOverGround: " << nav.CourseOverGround << std::endl
    #####:  208:            << "Heading: " << nav.Heading << std::endl;
        -:  209:}
        -:  210:
        -:  211:#pragma pack(1)
        -:  212:typedef struct { // pp 35-36
        -:  213:    uint8_t NumberOfAttitudeDataSets;
        -:  214:} S7kAttitudeRTH;
        -:  215:#pragma pack()
        -:  216:
        -:  217:#pragma pack(1)
        -:  218:typedef struct { // pp 35-36
        -:  219:    uint16_t timeDifferenceFromRecordTimeStamp; // in milliseconds
        -:  220:    float    roll;
        -:  221:    float    pitch;
        -:  222:    float    heave;
        -:  223:    float    heading;
        -:  224:} S7kAttitudeRD;
        -:  225:#pragma pack()
        -:  226:
        -:  227:#pragma pack(1)
        -:  228:typedef struct { // pp 75-76
        -:  229:    uint64_t sonarId;
        -:  230:    uint32_t pingNumber;
        -:  231:    uint16_t multiPingSequence;
        -:  232:    uint32_t numberOfDetectionPoints;
        -:  233:    uint32_t dataFieldSize;
        -:  234:    uint8_t  detectionAlgorithm;
        -:  235:    uint32_t flags;
        -:  236:    float    samplingRate;
        -:  237:    float    transmissionAngle;
        -:  238:    uint32_t reserved[16];
        -:  239:} S7kRawDetectionDataRTH;
        -:  240:#pragma pack()
        -:  241:
        -:  242:#pragma pack(1)
        -:  243:typedef struct { // pp 76-77
        -:  244:    uint16_t beamDescriptor;
        -:  245:    float    detectionPoint;
        -:  246:    float    receptionAngle;
        -:  247:    uint32_t flags;
        -:  248:    uint32_t quality;
        -:  249:    float    uncertainty;
        -:  250:    float    signalStrength;
        -:  251:} S7kRawDetectionDataRD;
        -:  252:#pragma pack()
        -:  253:
        -:  254:#pragma pack(1)
        -:  255:typedef struct { //pp 40-41
        -:  256:    uint64_t sonarId;
        -:  257:    uint32_t sequentialNumber;
        -:  258:    uint16_t multiPingSequence;
        -:  259:    float    frequency;
        -:  260:    float    sampleRate;
        -:  261:    float    receiverBandwidth;
        -:  262:    float    txPulseWidth;
        -:  263:    uint32_t txPulseTypeIndentifier;
        -:  264:    uint32_t txPulseEnvelopeIndentifier;
        -:  265:    float    txPulseEnvelopeParameter;
        -:  266:    uint16_t txPulseMode;
        -:  267:    uint16_t txPulseReserved;
        -:  268:    float    maxPingRate;
        -:  269:    float    pingPeriod;
        -:  270:    float    rangeSelection;
        -:  271:    float    powerSelection;
        -:  272:    float    gainSelection;
        -:  273:    uint32_t controlFlags;
        -:  274:    uint32_t projectorIdentifier;
        -:  275:    float    projectorBeamSteeringAngleVertical;
        -:  276:    float    projectorBeamSteeringAngleHorizontal;
        -:  277:    float    projectorBeam3dbBeamWidthVertical;
        -:  278:    float    projectorBeam3dbBeamWidthHorizontal;
        -:  279:    float    projectorBeamFocalPoint;
        -:  280:    uint32_t projectorBeamWeightingWindowType;
        -:  281:    float    projectorBeamWeightingWindowParameter;
        -:  282:    uint32_t transmitFlags;
        -:  283:    uint32_t hydrophoneIdentifier;
        -:  284:    uint32_t receiveBeamWeightingWindow;
        -:  285:    float    receiveBeamWeightingParameter;
        -:  286:    uint32_t receiveFlags;
        -:  287:    float    receiveBeamWidth;
        -:  288:    float    bottomDetectionFilterMinRange;
        -:  289:    float    bottomDetectionFilterMaxRange;
        -:  290:    float    bottomDetectionFilterMinDepth;
        -:  291:    float    bottomDetectionFilterMaxDepth;
        -:  292:    float    absorption;
        -:  293:    float    soundVelocity;
        -:  294:    float    spreading;
        -:  295:    uint16_t reserved;
        -:  296:} S7kSonarSettings;
        -:  297:#pragma pack()
        -:  298:
        -:  299:#pragma pack(1)
        -:  300:typedef struct{
        -:  301:    float  soundVelocity;
        -:  302:    float  temperature;
        -:  303:    float  pressure;
        -:  304:} S7kSoundVelocity;
        -:  305:#pragma pack()
        -:  306:
        -:  307:#pragma pack(1)
        -:  308:typedef struct{
        -:  309:    float    frequency;
        -:  310:    uint8_t  soundVelocitySource;	/* 0=Not computed, 1=CTD,2=User computed*/
        -:  311:    uint8_t  soundVelocityAlgorithm; 	/* 0=Not computed,1=Chen Millero, 2=Del Grosso*/
        -:  312:    uint8_t  conductivityFlag; 		/* 0=Conductivity,1=salinity*/
        -:  313:    uint8_t  pressureFlag; 		/* 0=pressure, 1=Depth*/
        -:  314:    uint8_t  positionFlag; 		/* 0= invalid position fields, 1=valid position fields*/
        -:  315:    uint8_t  sampleContentValidity;  	/* Bits set if measurement is valid. Bit 0: Conductivity, Bit 1: Water temperature, Bit 2: Pressure/Depth, Bit 3: Sound Velocity, Bit 4: Absorption */
        -:  316:    uint16_t reserved;
        -:  317:    double   latitude; 			/* WGS84, in radians */
        -:  318:    double   longitude;			/* WGS84, in radians */
        -:  319:    float    sampleRate;
        -:  320:    uint32_t nbSamples;
        -:  321:} S7kCtdRTH;
        -:  322:#pragma pack()
        -:  323:
        -:  324:#pragma pack(1)
        -:  325:typedef struct{
        -:  326:    float conductivitySalinity;  /* in S/m or ppt */
        -:  327:    float waterTemperature;      /* in Celsius */
        -:  328:    float pressureDepth;         /* in Pascal or meters */
        -:  329:    float soundVelocity;         /* in meters/seconds */
        -:  330:    float absorption;            /* in dB/kilometer */
        -:  331:} S7kCtdRD;
        -:  332:#pragma pack()
        -:  333:
        -:  334:
        -:  335:#endif /* S7KTYPES_HPP */
        -:  336:
