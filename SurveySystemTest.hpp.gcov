        -:    0:Source:test/SurveySystemTest.hpp
        -:    0:Graph:main.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2: * Copyright 2017 © Centre Interdisciplinaire de développement en Cartographie des Océans (CIDCO), Tous droits réservés
        -:    3: */
        -:    4:
        -:    5:/*
        -:    6: * File:   SurveySystemTest.cpp
        -:    7: * Author: glm,jordan
        -:    8: *
        -:    9: */
        -:   10:
        -:   11:#include <Eigen/Dense>
        -:   12:#include <Eigen/src/Core/Matrix.h>
        -:   13:#include "catch.hpp"
        -:   14:#include "../src/SurveySystem.hpp"
        -:   15:#include "../src/utils/Exception.hpp"
        -:   16:#include <cmath>
        -:   17:
        -:   18:
    #####:   19:TEST_CASE("Reading metadata from original MSPAC") {
    #####:   20:    SurveySystem params;
        -:   21:
    #####:   22:    REQUIRE(params.readFile("test/data/metadata/TestMetaData.txt"));
        -:   23:    /*
        -:   24:                MultibeamModel R2Sonic2022
        -:   25:                AntPositionOffsetX 1.31
        -:   26:                AntPositionOffsetY 1.45
        -:   27:                AntPositionOffsetZ 4.32
        -:   28:                MBEOffsetX 0.765
        -:   29:                MBEOffsetY 0.685
        -:   30:                MBEOffsetZ 1.359
        -:   31:                MBEDraft 0.70
        -:   32:                MBEOffset2X 0.364
        -:   33:                MBEOffset2Y 0.687
        -:   34:                MBEOffset2Z 1.093
        -:   35:                PitchRollAccuracy 0.050
        -:   36:                HeadingAccuracy 0.050
        -:   37:                HeaveAccuracy 0.050
        -:   38:                PositionAccuracy 0.010
        -:   39:                PitchAlignment 1.64
        -:   40:                RollAlignment 0.62
        -:   41:                HeadingAlignment 1.88
        -:   42:     */
        -:   43:    
        -:   44:    
        -:   45:    //Test draft
        -:   46:    /*
        -:   47:                MBEDraft 0.70
        -:   48:     */
    #####:   49:    double draft = 0.7;
    #####:   50:    double draftPrecision = 0.000000001;
    #####:   51:    REQUIRE(std::abs(params.getDraft() - draft) < draftPrecision);
        -:   52:
        -:   53:    //Test model name
        -:   54:    /*
        -:   55:                MultibeamModel R2Sonic2022
        -:   56:     */
    #####:   57:    std::string testModelName = "R2Sonic2022";
    #####:   58:    REQUIRE(params.getMBES_model().compare(testModelName) == 0);
        -:   59:    
        -:   60:
        -:   61:    //Test antenna position
        -:   62:    /*
        -:   63:                AntPositionOffsetX 1.31
        -:   64:                AntPositionOffsetY 1.45
        -:   65:                AntPositionOffsetZ 4.32
        -:   66:     */
    #####:   67:    double antennaPrecision = 0.000000001;
    #####:   68:    Eigen::Vector3d testAntennatPosition(1.31, 1.45, -4.32);
    #####:   69:    Eigen::Vector3d testAntenna = params.getAntennaPosition().array() - testAntennatPosition.array();
    #####:   70:    REQUIRE(testAntenna.cwiseAbs().maxCoeff() < antennaPrecision);
        -:   71:    
        -:   72:    
        -:   73:    //Test echosounder transmitter position
        -:   74:    /*
        -:   75:                MBEOffsetX 0.765
        -:   76:                MBEOffsetY 0.685
        -:   77:                MBEOffsetZ 1.359
        -:   78:     */
    #####:   79:    double transmitterPrecision = 0.000000001;
    #####:   80:    Eigen::Vector3d testTransmitterPosition(0.765, 0.685, -1.359);
    #####:   81:    Eigen::Vector3d testTransmitter = params.getEchosounderTransmitterPosition().array() - testTransmitterPosition.array();
    #####:   82:    REQUIRE(testTransmitter.cwiseAbs().maxCoeff() < transmitterPrecision);
        -:   83:
        -:   84:    //Test echosounder transmitter position
        -:   85:    /*
        -:   86:                MBEOffset2X 0.364
        -:   87:                MBEOffset2Y 0.687
        -:   88:                MBEOffset2Z 1.093
        -:   89:     */
    #####:   90:    double receiverPrecision = 0.000000001;
    #####:   91:    Eigen::Vector3d testReceiverPosition;
    #####:   92:    testReceiverPosition << 0.364, 0.687, -1.093;
    #####:   93:    Eigen::Vector3d testReceiver = params.getEchosounderReceivererPosition().array() - testReceiverPosition.array();
    #####:   94:    REQUIRE(testReceiver.cwiseAbs().maxCoeff() < receiverPrecision);
        -:   95:
        -:   96:    //Test echosounder transmitter position
        -:   97:    /*
        -:   98:                PitchRollAccuracy 0.050
        -:   99:                HeadingAccuracy 0.050
        -:  100:     */
    #####:  101:    double attitudeAccuracyPrecision = 0.000000001;
    #####:  102:    double testPitchRollAccuracy = 0.050*D2R;
    #####:  103:    Attitude* acc = params.getAttitudeAccuracy();
    #####:  104:    REQUIRE(abs(acc->getRoll()*D2R-testPitchRollAccuracy) < attitudeAccuracyPrecision);
    #####:  105:    REQUIRE(abs(acc->getPitch()*D2R-testPitchRollAccuracy) < attitudeAccuracyPrecision);
    #####:  106:}
        -:  107:
    #####:  108:TEST_CASE("Reading non-existing file") {
    #####:  109:    SurveySystem params;
        -:  110:
    #####:  111:    REQUIRE(!params.readFile("/non/existant/file"));
    #####:  112:}
        -:  113:
        -:  114://TODO: test case with a few invalid values
