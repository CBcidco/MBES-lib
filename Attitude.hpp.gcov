        -:    0:Source:src/Attitude.hpp
        -:    0:Graph:main.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2: * Copyright 2017-2019 © Centre Interdisciplinaire de développement en Cartographie des Océans (CIDCO), Tous droits réservés
        -:    3: */
        -:    4:
        -:    5:/*
        -:    6: * File:   Attitude.hpp
        -:    7: * Author: EmileGagne, glm,jordan
        -:    8: *
        -:    9: * Created on September 13, 2018, 3:28 PM
        -:   10: */
        -:   11:
        -:   12:#ifndef ATTITUDE_HPP
        -:   13:#define ATTITUDE_HPP
        -:   14:
        -:   15:#include <iostream>
        -:   16:#include "utils/Constants.hpp"
        -:   17:#include <cmath>
        -:   18:
        -:   19:/*!
        -:   20: *  \brief Attitude class.
        -:   21: */
        -:   22:class Attitude {
        -:   23:public:
        -:   24:    
        -:   25:    /**
        -:   26:     * Create an attitude
        -:   27:     */
        -:   28:
        -:   29:    Attitude(){};
        -:   30:    
        -:   31:    /**
        -:   32:     * Create an attitude
        -:   33:     * 
        -:   34:     * @param microEpoch  number of micro-seconds since January 1st 1970
        -:   35:     * @param rollDegrees the roll angle of the boat in degrees w.r.t the navigation frame
        -:   36:     * @param pitchDegrees the angle value of the pitch movement of the boat (degrees)
        -:   37:     * @param headingDegrees the angle value of the yaw movement of the boat (degrees)
        -:   38:     */
        -:   39:
    #####:   40:    Attitude(uint64_t microEpoch,double rollDegrees,double pitchDegrees,double headingDegrees) :
        -:   41:	    timestamp(microEpoch),
        -:   42:	    roll(rollDegrees),
        -:   43:	    pitch(pitchDegrees),
        -:   44:	    heading(headingDegrees),
    #####:   45:	    sr(sin(roll*D2R)),
    #####:   46:	    cr(cos(roll*D2R)),
    #####:   47:	    sp(sin(pitch*D2R)),
    #####:   48:	    cp(cos(pitch*D2R)),
    #####:   49:	    sh(sin(heading*D2R)),
    #####:   50:	    ch(cos(heading*D2R))
    #####:   51:    {};
        -:   52:    
        -:   53:    /**
        -:   54:     * Destroy the attitude 
        -:   55:     */
        -:   56:    
    #####:   57:    ~Attitude() {
    #####:   58:    };
        -:   59:
        -:   60:    /**Return the roll angle*/
    #####:   61:    double getRoll()        { return roll;}
        -:   62:    
        -:   63:    /**Return the radian of the roll angle*/
        -:   64:    double getRollRadians() { return roll * D2R;}
        -:   65:    
        -:   66:    /**Return the sine value of the roll angle*/
    #####:   67:    double getSr()     { return sr;}
        -:   68:    
        -:   69:    /**Return the cosine value of the roll angle*/
    #####:   70:    double getCr()     { return cr;}
        -:   71:
        -:   72:    /**Return the pitch angle*/
    #####:   73:    double getPitch()        { return pitch;}
        -:   74:    
        -:   75:    /**Return the radian the pitch angle*/
        -:   76:    double getPitchRadians() { return pitch * D2R;}
        -:   77:
        -:   78:    /**Return the sine value of the pitch angle*/
    #####:   79:    double getSp()     { return sp;}
        -:   80:    
        -:   81:    /**Return the cosine value of the pitch angle*/
    #####:   82:    double getCp()     { return cp;}
        -:   83:
        -:   84:    /**Return the heading angle*/
        -:   85:    double getHeading()        { return heading;}
        -:   86:    
        -:   87:    /**Return the radian of the heading angle*/
        -:   88:    double getHeadingRadians() { return heading * D2R;}
        -:   89:    
        -:   90:    /**Return the sine value of the heading angle*/
    #####:   91:    double getSh()     { return sh;}
        -:   92:    
        -:   93:    /**Return the cosine value of the heading angle*/
    #####:   94:    double getCh()     { return ch;}
        -:   95:
        -:   96:    /**
        -:   97:     * Change the roll angle and his values sine and cosine
        -:   98:     * 
        -:   99:     * @param roll the new roll angle
        -:  100:     */
        -:  101:    void setRoll(double roll){
        -:  102:	this->roll = roll;
        -:  103:	sr=sin(roll*D2R);
        -:  104:        cr=cos(roll*D2R);
        -:  105:    }
        -:  106:
        -:  107:    /**
        -:  108:     * Change the pitch angle and his values sine and cosine
        -:  109:     * 
        -:  110:     * @param pitch the new pitch angle
        -:  111:     */
        -:  112:    void setPitch(double pitch){
        -:  113:	this->pitch=pitch; 
        -:  114:        sp=sin(pitch*D2R);
        -:  115:        cp=cos(pitch*D2R);
        -:  116:    }
        -:  117:
        -:  118:    /**
        -:  119:     * Change the heading angle and his values sine and cosine
        -:  120:     * 
        -:  121:     * @param heading the new heading angle
        -:  122:     */
        -:  123:    void setHeading(double heading){
        -:  124:	this->heading=heading;
        -:  125:        sh=sin(heading*D2R);
        -:  126:        ch=cos(heading*D2R);
        -:  127:    }
        -:  128:
        -:  129:    /**Return the time stamp of the attitude*/
        -:  130:    uint64_t getTimestamp(){ return timestamp;}
        -:  131:
        -:  132:    /**
        -:  133:     * Change the value timestamp
        -:  134:     *
        -:  135:     * @param microEpoch the new timestamp
        -:  136:     */
        -:  137:    void setTimestamp(uint64_t microEpoch){
        -:  138:	this->timestamp = microEpoch;
        -:  139:    }
        -:  140:
        -:  141:    /**
        -:  142:     * Return a text value with the informations of the attitude
        -:  143:     * 
        -:  144:     * @param os text value who most contain the information
        -:  145:     * @param obj the attitude that we need to get the information
        -:  146:     */
        -:  147:    friend std::ostream& operator<<(std::ostream& os, const Attitude& obj) {
        -:  148:        return os << "Roll: " << obj.roll << std::endl << "Pitch: " << obj.pitch << std::endl << "Heading: " << obj.heading << std::endl;
        -:  149:    };
        -:  150:
        -:  151:private:
        -:  152:    
        -:  153:    /**Number of micro-second calculated since January 1970 (micro-second)*/
        -:  154:    uint64_t  timestamp;
        -:  155:
        -:  156:    /**The angle value of the roll movement of the boat (degrees)*/
        -:  157:    double    roll;    //in degrees
        -:  158:    
        -:  159:    /**The angle value of the pitch movement of the boat (degrees)*/
        -:  160:    double    pitch;   //in degrees
        -:  161:    
        -:  162:    /**The angle value of the yaw movement of the boat (degrees)*/
        -:  163:    double    heading; //in degrees
        -:  164:
        -:  165:    /*Trigonometry is stored to prevent redundant recalculations*/
        -:  166:    
        -:  167:    /**Sine value of the roll angle*/
        -:  168:    double sr;
        -:  169:    
        -:  170:    /**Cosine value of the roll angle*/
        -:  171:    double cr;
        -:  172:
        -:  173:    /**Sine value of the pitch angle*/
        -:  174:    double sp;
        -:  175:    
        -:  176:    /**Cosine value of the pitch angle*/
        -:  177:    double cp;
        -:  178:
        -:  179:    /**Sine value of the heading angle*/
        -:  180:    double sh;
        -:  181:    
        -:  182:    /**Cosine value of the heading angle*/
        -:  183:    double ch;
        -:  184:};
        -:  185:
        -:  186:#endif /* ATTITUDE_HPP */
        -:  187:
