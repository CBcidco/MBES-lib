        -:    0:Source:test/SoundVelocityProfileTest.hpp
        -:    0:Graph:main.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2: * Copyright 2017 © Centre Interdisciplinaire de développement en Cartographie des Océans (CIDCO), Tous droits réservés
        -:    3: */
        -:    4:
        -:    5:/*
        -:    6: * File:   SoundVelocityProfileTest.cpp
        -:    7: * Author: jordan
        -:    8: *
        -:    9: */
        -:   10:
        -:   11:#include <Eigen/Dense>
        -:   12:#include <Eigen/src/Core/Matrix.h>
        -:   13:#include <iostream>
        -:   14:#include <iomanip>
        -:   15:#include "catch.hpp"
        -:   16:#include "../src/svp/SoundVelocityProfile.hpp"
        -:   17:#include "../src/utils/Exception.hpp"
        -:   18:
        -:   19:/**Test the writing and the reading of a SVP file*/
    #####:   20:TEST_CASE("Writing to SVP file"){
        -:   21:	//TODO: test prototype
    #####:   22:    SoundVelocityProfile svpW = SoundVelocityProfile();
    #####:   23:    svpW.setTimestamp(0);
    #####:   24:    svpW.setLatitude(-1);
    #####:   25:    svpW.setLongitude(-1);
    #####:   26:    svpW.add(0,0);
    #####:   27:    std::string file = "test.txt";
    #####:   28:    svpW.write(file);
    #####:   29:    SoundVelocityProfile svpR = SoundVelocityProfile();
    #####:   30:    svpR.add(1,1);
    #####:   31:    bool valide (svpR.read(file));
    #####:   32:    REQUIRE(valide);
    #####:   33:    REQUIRE(svpW.getTimestamp() == svpR.getTimestamp());
    #####:   34:    REQUIRE(svpW.getLatitude() == svpR.getLatitude());
    #####:   35:    REQUIRE(svpW.getLongitude() == svpR.getLongitude());
    #####:   36:    REQUIRE(svpW.getDepths() == svpR.getDepths());
    #####:   37:    REQUIRE(svpW.getSpeeds() == svpR.getSpeeds());
    #####:   38:}
        -:   39:
        -:   40:/**Test the conversion of microEpoch into text with the format yyyy-ddd hh:mm:ss*/
    #####:   41:TEST_CASE("Test the julianTime method")
        -:   42:{
    #####:   43:  SoundVelocityProfile svp = SoundVelocityProfile();
    #####:   44:  svp.setTimestamp(0);
    #####:   45:  std::string cont = svp.julianTime(svp.getTimestamp());
    #####:   46:  REQUIRE(cont.compare("1970-1 0:0:0")==0);
    #####:   47:}
        -:   48:
        -:   49:/**Test the conversion of the latitude into text with the format direction dd:mm:ss*/
    #####:   50:TEST_CASE("Test the latFormat method")
        -:   51:{
    #####:   52:  SoundVelocityProfile svp = SoundVelocityProfile();
    #####:   53:  svp.setLatitude(0);
    #####:   54:  std::string cont = svp.latFormat(svp.getLatitude());
    #####:   55:  REQUIRE(cont.compare("North 0:0:0")==0);
    #####:   56:}
        -:   57:
        -:   58:/**Test the conversion of the longitude into text with the format direction dd:mm:ss*/
    #####:   59:TEST_CASE("Test the longFormat method")
        -:   60:{
    #####:   61:  SoundVelocityProfile svp = SoundVelocityProfile();
    #####:   62:  svp.setLongitude(0);
    #####:   63:  std::string cont = svp.longFormat(svp.getLongitude());
    #####:   64:  REQUIRE(cont.compare("East 0:0:0")==0);
    #####:   65:}
        -:   66:
        -:   67:/**Test the reading of the sound velocity profile timestamp, latitude and longitude*/
    #####:   68:TEST_CASE("Read the sound velocity profile time, latitude, longitude")
        -:   69:{
    #####:   70:    SoundVelocityProfile svp = SoundVelocityProfile();
    #####:   71:    std::string text = "Section 1970-1 0:0:0 South 1:0:0 West 1:0:0";
    #####:   72:    uint64_t time = 0;
    #####:   73:    double lat = 0;
    #####:   74:    double lon = 0;
    #####:   75:    bool valide = svp.readTimeLatLong(text,time,lat,lon);
    #####:   76:    REQUIRE(valide);
    #####:   77:    REQUIRE(time==0);
    #####:   78:    REQUIRE(lat==-1);
    #####:   79:    REQUIRE(lon==-1);
    #####:   80:}
        -:   81:
        -:   82:/**Test if the SoundVelocityProfile class can get the depths and the speeds*/
    #####:   83:TEST_CASE("Get speeds/depths"){
    #####:   84:    SoundVelocityProfile svp = SoundVelocityProfile();
    #####:   85:    svp.add(4,5);
    #####:   86:    REQUIRE(svp.getDepths()(0) == 4);
    #####:   87:    REQUIRE(svp.getSpeeds()(0) == 5);
    #####:   88:}
        -:   89:
        -:   90:/**Test if the svp file 1st line is wrong*/
    #####:   91:TEST_CASE("Read the 1st line who is not valid")
        -:   92:{
    #####:   93:    SoundVelocityProfile svp = SoundVelocityProfile();
    #####:   94:    std::string file = "erreur1.txt";
    #####:   95:    bool valide = svp.read(file);
    #####:   96:    REQUIRE(valide==false);
    #####:   97:}
        -:   98:
        -:   99:/**Test if the svp file 2nd line is wrong*/
    #####:  100:TEST_CASE("Read the 2nd line who is not valid")
        -:  101:{
    #####:  102:    SoundVelocityProfile svp = SoundVelocityProfile();
    #####:  103:    std::string file = "erreur2.txt";
    #####:  104:    bool valide = svp.read(file);
    #####:  105:    REQUIRE(valide==false);
    #####:  106:}
        -:  107:
        -:  108:/**Test if the svp file 3rd line is wrong*/
    #####:  109:TEST_CASE("Use readTimeLatLong with a wrong row")
        -:  110:{
    #####:  111:    SoundVelocityProfile svp = SoundVelocityProfile();
    #####:  112:    std::string text = "Sectin 1970-1 0:0:0 South 1:0:0 West 1:0:0";
    #####:  113:    uint64_t time = 0;
    #####:  114:    double lat = 0;
    #####:  115:    double lon = 0;
    #####:  116:    bool valide1 = svp.readTimeLatLong(text,time,lat,lon);
    #####:  117:    text = "Section 1970-1 00:0 South 1:0:0 West 1:0:0";
    #####:  118:    bool valide2 = svp.readTimeLatLong(text,time,lat,lon);
    #####:  119:    text = "Section 1970-1 0:0:0 Suth 1:0:0 West 1:0:0";
    #####:  120:    bool valide3 = svp.readTimeLatLong(text,time,lat,lon);
    #####:  121:    text = "Section 1970-1 0:0:0 South 1:00 West 1:0:0";
    #####:  122:    bool valide4 = svp.readTimeLatLong(text,time,lat,lon);
    #####:  123:    text = "Section 1970-1 0:0:0 South 1:0:0 Wst 1:0:0";
    #####:  124:    bool valide5 = svp.readTimeLatLong(text,time,lat,lon);
    #####:  125:    REQUIRE(valide1==false);
    #####:  126:    REQUIRE(valide2==false);
    #####:  127:    REQUIRE(valide3==false);
    #####:  128:    REQUIRE(valide4==false);
    #####:  129:    REQUIRE(valide5==false);
    #####:  130:}
        -:  131:
        -:  132:/**Test if deph and speed line is wrong*/
    #####:  133:TEST_CASE("Read a svp file with wrong deph and speed line")
        -:  134:{
    #####:  135:    SoundVelocityProfile svp = SoundVelocityProfile();
    #####:  136:    std::string file = "erreur3.txt";
    #####:  137:    bool valide = svp.read(file);
    #####:  138:    REQUIRE(valide==false);
    #####:  139:}
        -:  140:
        -:  141:/**Test if the file doesn't exist*/
    #####:  142:TEST_CASE("Read a file who doesn't exist")
        -:  143:{
    #####:  144:    SoundVelocityProfile svp = SoundVelocityProfile();
    #####:  145:    std::string file = "hsadhahdsdushdsd";
    #####:  146:    bool valide = svp.read(file);
    #####:  147:    REQUIRE(valide==false);
    #####:  148:}
        -:  149:
        -:  150:/**Test if the file have invalid character*/
    #####:  151:TEST_CASE("Read a svp file with invalid character")
        -:  152:{
    #####:  153:    SoundVelocityProfile svp = SoundVelocityProfile();
    #####:  154:    std::string file = "erreur4.txt";
    #####:  155:    bool valide = svp.read(file);
    #####:  156:    REQUIRE(valide==false);
    #####:  157:}
