        -:    0:Source:test/catch.hpp
        -:    0:Graph:main.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2: *  Catch v2.2.1
        -:    3: *  Generated: 2018-03-11 12:01:31.654719
        -:    4: *  ----------------------------------------------------------
        -:    5: *  This file has been merged from multiple headers. Please don't edit it directly
        -:    6: *  Copyright (c) 2018 Two Blue Cubes Ltd. All rights reserved.
        -:    7: *
        -:    8: *  Distributed under the Boost Software License, Version 1.0. (See accompanying
        -:    9: *  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
        -:   10: */
        -:   11:#pragma once
        -:   12:#ifndef TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED
        -:   13:#define TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED
        -:   14:// start catch.hpp
        -:   15:
        -:   16:
        -:   17:#define CATCH_VERSION_MAJOR 2
        -:   18:#define CATCH_VERSION_MINOR 2
        -:   19:#define CATCH_VERSION_PATCH 1
        -:   20:
        -:   21:#ifdef __clang__
        -:   22:#    pragma clang system_header
        -:   23:#elif defined __GNUC__
        -:   24:#    pragma GCC system_header
        -:   25:#endif
        -:   26:
        -:   27:// start catch_suppress_warnings.h
        -:   28:
        -:   29:#ifdef __clang__
        -:   30:#   ifdef __ICC // icpc defines the __clang__ macro
        -:   31:#       pragma warning(push)
        -:   32:#       pragma warning(disable: 161 1682)
        -:   33:#   else // __ICC
        -:   34:#       pragma clang diagnostic ignored "-Wunused-variable"
        -:   35:#       pragma clang diagnostic push
        -:   36:#       pragma clang diagnostic ignored "-Wpadded"
        -:   37:#       pragma clang diagnostic ignored "-Wswitch-enum"
        -:   38:#       pragma clang diagnostic ignored "-Wcovered-switch-default"
        -:   39:#    endif
        -:   40:#elif defined __GNUC__
        -:   41:#    pragma GCC diagnostic ignored "-Wunused-variable"
        -:   42:#    pragma GCC diagnostic ignored "-Wparentheses"
        -:   43:#    pragma GCC diagnostic push
        -:   44:#    pragma GCC diagnostic ignored "-Wpadded"
        -:   45:#endif
        -:   46:// end catch_suppress_warnings.h
        -:   47:#if defined(CATCH_CONFIG_MAIN) || defined(CATCH_CONFIG_RUNNER)
        -:   48:#  define CATCH_IMPL
        -:   49:#  define CATCH_CONFIG_ALL_PARTS
        -:   50:#endif
        -:   51:
        -:   52:// In the impl file, we want to have access to all parts of the headers
        -:   53:// Can also be used to sanely support PCHs
        -:   54:#if defined(CATCH_CONFIG_ALL_PARTS)
        -:   55:#  define CATCH_CONFIG_EXTERNAL_INTERFACES
        -:   56:#  if defined(CATCH_CONFIG_DISABLE_MATCHERS)
        -:   57:#    undef CATCH_CONFIG_DISABLE_MATCHERS
        -:   58:#  endif
        -:   59:#  define CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER
        -:   60:#endif
        -:   61:
        -:   62:#if !defined(CATCH_CONFIG_IMPL_ONLY)
        -:   63:// start catch_platform.h
        -:   64:
        -:   65:#ifdef __APPLE__
        -:   66:# include <TargetConditionals.h>
        -:   67:# if TARGET_OS_OSX == 1
        -:   68:#  define CATCH_PLATFORM_MAC
        -:   69:# elif TARGET_OS_IPHONE == 1
        -:   70:#  define CATCH_PLATFORM_IPHONE
        -:   71:# endif
        -:   72:
        -:   73:#elif defined(linux) || defined(__linux) || defined(__linux__)
        -:   74:#  define CATCH_PLATFORM_LINUX
        -:   75:
        -:   76:#elif defined(WIN32) || defined(__WIN32__) || defined(_WIN32) || defined(_MSC_VER)
        -:   77:#  define CATCH_PLATFORM_WINDOWS
        -:   78:#endif
        -:   79:
        -:   80:// end catch_platform.h
        -:   81:
        -:   82:#ifdef CATCH_IMPL
        -:   83:#  ifndef CLARA_CONFIG_MAIN
        -:   84:#    define CLARA_CONFIG_MAIN_NOT_DEFINED
        -:   85:#    define CLARA_CONFIG_MAIN
        -:   86:#  endif
        -:   87:#endif
        -:   88:
        -:   89:// start catch_user_interfaces.h
        -:   90:
        -:   91:namespace Catch {
        -:   92:    unsigned int rngSeed();
        -:   93:}
        -:   94:
        -:   95:// end catch_user_interfaces.h
        -:   96:// start catch_tag_alias_autoregistrar.h
        -:   97:
        -:   98:// start catch_common.h
        -:   99:
        -:  100:// start catch_compiler_capabilities.h
        -:  101:
        -:  102:// Detect a number of compiler features - by compiler
        -:  103:// The following features are defined:
        -:  104://
        -:  105:// CATCH_CONFIG_COUNTER : is the __COUNTER__ macro supported?
        -:  106:// CATCH_CONFIG_WINDOWS_SEH : is Windows SEH supported?
        -:  107:// CATCH_CONFIG_POSIX_SIGNALS : are POSIX signals supported?
        -:  108:// ****************
        -:  109:// Note to maintainers: if new toggles are added please document them
        -:  110:// in configuration.md, too
        -:  111:// ****************
        -:  112:
        -:  113:// In general each macro has a _NO_<feature name> form
        -:  114:// (e.g. CATCH_CONFIG_NO_POSIX_SIGNALS) which disables the feature.
        -:  115:// Many features, at point of detection, define an _INTERNAL_ macro, so they
        -:  116:// can be combined, en-mass, with the _NO_ forms later.
        -:  117:
        -:  118:#ifdef __cplusplus
        -:  119:
        -:  120:#  if __cplusplus >= 201402L
        -:  121:#    define CATCH_CPP14_OR_GREATER
        -:  122:#  endif
        -:  123:
        -:  124:#  if __cplusplus >= 201703L
        -:  125:#    define CATCH_CPP17_OR_GREATER
        -:  126:#  endif
        -:  127:
        -:  128:#endif
        -:  129:
        -:  130:#if defined(CATCH_CPP17_OR_GREATER)
        -:  131:#  define CATCH_INTERNAL_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS
        -:  132:#endif
        -:  133:
        -:  134:#ifdef __clang__
        -:  135:
        -:  136:#       define CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
        -:  137:            _Pragma( "clang diagnostic push" ) \
        -:  138:            _Pragma( "clang diagnostic ignored \"-Wexit-time-destructors\"" ) \
        -:  139:            _Pragma( "clang diagnostic ignored \"-Wglobal-constructors\"")
        -:  140:#       define CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS \
        -:  141:            _Pragma( "clang diagnostic pop" )
        -:  142:
        -:  143:#       define CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS \
        -:  144:            _Pragma( "clang diagnostic push" ) \
        -:  145:            _Pragma( "clang diagnostic ignored \"-Wparentheses\"" )
        -:  146:#       define CATCH_INTERNAL_UNSUPPRESS_PARENTHESES_WARNINGS \
        -:  147:            _Pragma( "clang diagnostic pop" )
        -:  148:
        -:  149:#endif // __clang__
        -:  150:
        -:  151:////////////////////////////////////////////////////////////////////////////////
        -:  152:// Assume that non-Windows platforms support posix signals by default
        -:  153:#if !defined(CATCH_PLATFORM_WINDOWS)
        -:  154:    #define CATCH_INTERNAL_CONFIG_POSIX_SIGNALS
        -:  155:#endif
        -:  156:
        -:  157:////////////////////////////////////////////////////////////////////////////////
        -:  158:// We know some environments not to support full POSIX signals
        -:  159:#if defined(__CYGWIN__) || defined(__QNX__) || defined(__EMSCRIPTEN__) || defined(__DJGPP__)
        -:  160:    #define CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS
        -:  161:#endif
        -:  162:
        -:  163:#ifdef __OS400__
        -:  164:#       define CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS
        -:  165:#       define CATCH_CONFIG_COLOUR_NONE
        -:  166:#endif
        -:  167:
        -:  168:////////////////////////////////////////////////////////////////////////////////
        -:  169:// Cygwin
        -:  170:#ifdef __CYGWIN__
        -:  171:
        -:  172:// Required for some versions of Cygwin to declare gettimeofday
        -:  173:// see: http://stackoverflow.com/questions/36901803/gettimeofday-not-declared-in-this-scope-cygwin
        -:  174:#   define _BSD_SOURCE
        -:  175:
        -:  176:#endif // __CYGWIN__
        -:  177:
        -:  178:////////////////////////////////////////////////////////////////////////////////
        -:  179:// Visual C++
        -:  180:#ifdef _MSC_VER
        -:  181:
        -:  182:#  if _MSC_VER >= 1900 // Visual Studio 2015 or newer
        -:  183:#    define CATCH_INTERNAL_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS
        -:  184:#  endif
        -:  185:
        -:  186:// Universal Windows platform does not support SEH
        -:  187:// Or console colours (or console at all...)
        -:  188:#  if defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_APP)
        -:  189:#    define CATCH_CONFIG_COLOUR_NONE
        -:  190:#  else
        -:  191:#    define CATCH_INTERNAL_CONFIG_WINDOWS_SEH
        -:  192:#  endif
        -:  193:
        -:  194:#endif // _MSC_VER
        -:  195:
        -:  196:////////////////////////////////////////////////////////////////////////////////
        -:  197:
        -:  198:// DJGPP
        -:  199:#ifdef __DJGPP__
        -:  200:#  define CATCH_INTERNAL_CONFIG_NO_WCHAR
        -:  201:#endif // __DJGPP__
        -:  202:
        -:  203:////////////////////////////////////////////////////////////////////////////////
        -:  204:
        -:  205:// Use of __COUNTER__ is suppressed during code analysis in
        -:  206:// CLion/AppCode 2017.2.x and former, because __COUNTER__ is not properly
        -:  207:// handled by it.
        -:  208:// Otherwise all supported compilers support COUNTER macro,
        -:  209:// but user still might want to turn it off
        -:  210:#if ( !defined(__JETBRAINS_IDE__) || __JETBRAINS_IDE__ >= 20170300L )
        -:  211:    #define CATCH_INTERNAL_CONFIG_COUNTER
        -:  212:#endif
        -:  213:
        -:  214:#if defined(CATCH_INTERNAL_CONFIG_COUNTER) && !defined(CATCH_CONFIG_NO_COUNTER) && !defined(CATCH_CONFIG_COUNTER)
        -:  215:#   define CATCH_CONFIG_COUNTER
        -:  216:#endif
        -:  217:#if defined(CATCH_INTERNAL_CONFIG_WINDOWS_SEH) && !defined(CATCH_CONFIG_NO_WINDOWS_SEH) && !defined(CATCH_CONFIG_WINDOWS_SEH)
        -:  218:#   define CATCH_CONFIG_WINDOWS_SEH
        -:  219:#endif
        -:  220:// This is set by default, because we assume that unix compilers are posix-signal-compatible by default.
        -:  221:#if defined(CATCH_INTERNAL_CONFIG_POSIX_SIGNALS) && !defined(CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS) && !defined(CATCH_CONFIG_NO_POSIX_SIGNALS) && !defined(CATCH_CONFIG_POSIX_SIGNALS)
        -:  222:#   define CATCH_CONFIG_POSIX_SIGNALS
        -:  223:#endif
        -:  224:// This is set by default, because we assume that compilers with no wchar_t support are just rare exceptions.
        -:  225:#if !defined(CATCH_INTERNAL_CONFIG_NO_WCHAR) && !defined(CATCH_CONFIG_NO_WCHAR) && !defined(CATCH_CONFIG_WCHAR)
        -:  226:#   define CATCH_CONFIG_WCHAR
        -:  227:#endif
        -:  228:
        -:  229:#if defined(CATCH_INTERNAL_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS) && !defined(CATCH_CONFIG_NO_CPP17_UNCAUGHT_EXCEPTIONS) && !defined(CATCH_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS)
        -:  230:#  define CATCH_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS
        -:  231:#endif
        -:  232:
        -:  233:#if !defined(CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS)
        -:  234:#   define CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS
        -:  235:#   define CATCH_INTERNAL_UNSUPPRESS_PARENTHESES_WARNINGS
        -:  236:#endif
        -:  237:#if !defined(CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS)
        -:  238:#   define CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS
        -:  239:#   define CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS
        -:  240:#endif
        -:  241:
        -:  242:// end catch_compiler_capabilities.h
        -:  243:#define INTERNAL_CATCH_UNIQUE_NAME_LINE2( name, line ) name##line
        -:  244:#define INTERNAL_CATCH_UNIQUE_NAME_LINE( name, line ) INTERNAL_CATCH_UNIQUE_NAME_LINE2( name, line )
        -:  245:#ifdef CATCH_CONFIG_COUNTER
        -:  246:#  define INTERNAL_CATCH_UNIQUE_NAME( name ) INTERNAL_CATCH_UNIQUE_NAME_LINE( name, __COUNTER__ )
        -:  247:#else
        -:  248:#  define INTERNAL_CATCH_UNIQUE_NAME( name ) INTERNAL_CATCH_UNIQUE_NAME_LINE( name, __LINE__ )
        -:  249:#endif
        -:  250:
        -:  251:#include <iosfwd>
        -:  252:#include <string>
        -:  253:#include <cstdint>
        -:  254:
        -:  255:namespace Catch {
        -:  256:
        -:  257:    struct CaseSensitive { enum Choice {
        -:  258:        Yes,
        -:  259:        No
        -:  260:    }; };
        -:  261:
    #####:  262:    class NonCopyable {
        -:  263:        NonCopyable( NonCopyable const& )              = delete;
        -:  264:        NonCopyable( NonCopyable && )                  = delete;
        -:  265:        NonCopyable& operator = ( NonCopyable const& ) = delete;
        -:  266:        NonCopyable& operator = ( NonCopyable && )     = delete;
        -:  267:
        -:  268:    protected:
        -:  269:        NonCopyable();
        -:  270:        virtual ~NonCopyable();
        -:  271:    };
        -:  272:
        -:  273:    struct SourceLineInfo {
        -:  274:
        -:  275:        SourceLineInfo() = delete;
    #####:  276:        SourceLineInfo( char const* _file, std::size_t _line ) noexcept
    #####:  277:        :   file( _file ),
    #####:  278:            line( _line )
    #####:  279:        {}
        -:  280:
        -:  281:        SourceLineInfo( SourceLineInfo const& other )        = default;
        -:  282:        SourceLineInfo( SourceLineInfo && )                  = default;
        -:  283:        SourceLineInfo& operator = ( SourceLineInfo const& ) = default;
        -:  284:        SourceLineInfo& operator = ( SourceLineInfo && )     = default;
        -:  285:
        -:  286:        bool empty() const noexcept;
        -:  287:        bool operator == ( SourceLineInfo const& other ) const noexcept;
        -:  288:        bool operator < ( SourceLineInfo const& other ) const noexcept;
        -:  289:
        -:  290:        char const* file;
        -:  291:        std::size_t line;
        -:  292:    };
        -:  293:
        -:  294:    std::ostream& operator << ( std::ostream& os, SourceLineInfo const& info );
        -:  295:
        -:  296:    // Use this in variadic streaming macros to allow
        -:  297:    //    >> +StreamEndStop
        -:  298:    // as well as
        -:  299:    //    >> stuff +StreamEndStop
        -:  300:    struct StreamEndStop {
        -:  301:        std::string operator+() const;
        -:  302:    };
        -:  303:    template<typename T>
        -:  304:    T const& operator + ( T const& value, StreamEndStop ) {
        -:  305:        return value;
        -:  306:    }
        -:  307:}
        -:  308:
        -:  309:#define CATCH_INTERNAL_LINEINFO \
        -:  310:    ::Catch::SourceLineInfo( __FILE__, static_cast<std::size_t>( __LINE__ ) )
        -:  311:
        -:  312:// end catch_common.h
        -:  313:namespace Catch {
        -:  314:
        -:  315:    struct RegistrarForTagAliases {
        -:  316:        RegistrarForTagAliases( char const* alias, char const* tag, SourceLineInfo const& lineInfo );
        -:  317:    };
        -:  318:
        -:  319:} // end namespace Catch
        -:  320:
        -:  321:#define CATCH_REGISTER_TAG_ALIAS( alias, spec ) \
        -:  322:    CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
        -:  323:    namespace{ Catch::RegistrarForTagAliases INTERNAL_CATCH_UNIQUE_NAME( AutoRegisterTagAlias )( alias, spec, CATCH_INTERNAL_LINEINFO ); } \
        -:  324:    CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS
        -:  325:
        -:  326:// end catch_tag_alias_autoregistrar.h
        -:  327:// start catch_test_registry.h
        -:  328:
        -:  329:// start catch_interfaces_testcase.h
        -:  330:
        -:  331:#include <vector>
        -:  332:#include <memory>
        -:  333:
        -:  334:namespace Catch {
        -:  335:
        -:  336:    class TestSpec;
        -:  337:
    #####:  338:    struct ITestInvoker {
        -:  339:        virtual void invoke () const = 0;
        -:  340:        virtual ~ITestInvoker();
        -:  341:    };
        -:  342:
        -:  343:    using ITestCasePtr = std::shared_ptr<ITestInvoker>;
        -:  344:
        -:  345:    class TestCase;
        -:  346:    struct IConfig;
        -:  347:
    #####:  348:    struct ITestCaseRegistry {
        -:  349:        virtual ~ITestCaseRegistry();
        -:  350:        virtual std::vector<TestCase> const& getAllTests() const = 0;
        -:  351:        virtual std::vector<TestCase> const& getAllTestsSorted( IConfig const& config ) const = 0;
        -:  352:    };
        -:  353:
        -:  354:    bool matchTest( TestCase const& testCase, TestSpec const& testSpec, IConfig const& config );
        -:  355:    std::vector<TestCase> filterTests( std::vector<TestCase> const& testCases, TestSpec const& testSpec, IConfig const& config );
        -:  356:    std::vector<TestCase> const& getAllTestCasesSorted( IConfig const& config );
        -:  357:
        -:  358:}
        -:  359:
        -:  360:// end catch_interfaces_testcase.h
        -:  361:// start catch_stringref.h
        -:  362:
        -:  363:#include <cstddef>
        -:  364:#include <string>
        -:  365:#include <iosfwd>
        -:  366:
        -:  367:namespace Catch {
        -:  368:
        -:  369:    class StringData;
        -:  370:
        -:  371:    /// A non-owning string class (similar to the forthcoming std::string_view)
        -:  372:    /// Note that, because a StringRef may be a substring of another string,
        -:  373:    /// it may not be null terminated. c_str() must return a null terminated
        -:  374:    /// string, however, and so the StringRef will internally take ownership
        -:  375:    /// (taking a copy), if necessary. In theory this ownership is not externally
        -:  376:    /// visible - but it does mean (substring) StringRefs should not be shared between
        -:  377:    /// threads.
        -:  378:    class StringRef {
        -:  379:    public:
        -:  380:        using size_type = std::size_t;
        -:  381:
        -:  382:    private:
        -:  383:        friend struct StringRefTestAccess;
        -:  384:
        -:  385:        char const* m_start;
        -:  386:        size_type m_size;
        -:  387:
        -:  388:        char* m_data = nullptr;
        -:  389:
        -:  390:        void takeOwnership();
        -:  391:
        -:  392:        static constexpr char const* const s_empty = "";
        -:  393:
        -:  394:    public: // construction/ assignment
    #####:  395:        StringRef() noexcept
    #####:  396:        :   StringRef( s_empty, 0 )
    #####:  397:        {}
        -:  398:
    #####:  399:        StringRef( StringRef const& other ) noexcept
    #####:  400:        :   m_start( other.m_start ),
    #####:  401:            m_size( other.m_size )
    #####:  402:        {}
        -:  403:
        -:  404:        StringRef( StringRef&& other ) noexcept
        -:  405:        :   m_start( other.m_start ),
        -:  406:            m_size( other.m_size ),
        -:  407:            m_data( other.m_data )
        -:  408:        {
        -:  409:            other.m_data = nullptr;
        -:  410:        }
        -:  411:
        -:  412:        StringRef( char const* rawChars ) noexcept;
        -:  413:
    #####:  414:        StringRef( char const* rawChars, size_type size ) noexcept
    #####:  415:        :   m_start( rawChars ),
    #####:  416:            m_size( size )
    #####:  417:        {}
        -:  418:
    #####:  419:        StringRef( std::string const& stdString ) noexcept
    #####:  420:        :   m_start( stdString.c_str() ),
    #####:  421:            m_size( stdString.size() )
    #####:  422:        {}
        -:  423:
    #####:  424:        ~StringRef() noexcept {
    #####:  425:            delete[] m_data;
    #####:  426:        }
        -:  427:
    #####:  428:        auto operator = ( StringRef const &other ) noexcept -> StringRef& {
    #####:  429:            delete[] m_data;
    #####:  430:            m_data = nullptr;
    #####:  431:            m_start = other.m_start;
    #####:  432:            m_size = other.m_size;
    #####:  433:            return *this;
        -:  434:        }
        -:  435:
        -:  436:        operator std::string() const;
        -:  437:
        -:  438:        void swap( StringRef& other ) noexcept;
        -:  439:
        -:  440:    public: // operators
        -:  441:        auto operator == ( StringRef const& other ) const noexcept -> bool;
        -:  442:        auto operator != ( StringRef const& other ) const noexcept -> bool;
        -:  443:
        -:  444:        auto operator[] ( size_type index ) const noexcept -> char;
        -:  445:
        -:  446:    public: // named queries
    #####:  447:        auto empty() const noexcept -> bool {
    #####:  448:            return m_size == 0;
        -:  449:        }
    #####:  450:        auto size() const noexcept -> size_type {
    #####:  451:            return m_size;
        -:  452:        }
        -:  453:
        -:  454:        auto numberOfCharacters() const noexcept -> size_type;
        -:  455:        auto c_str() const -> char const*;
        -:  456:
        -:  457:    public: // substrings and searches
        -:  458:        auto substr( size_type start, size_type size ) const noexcept -> StringRef;
        -:  459:
        -:  460:        // Returns the current start pointer.
        -:  461:        // Note that the pointer can change when if the StringRef is a substring
        -:  462:        auto currentData() const noexcept -> char const*;
        -:  463:
        -:  464:    private: // ownership queries - may not be consistent between calls
        -:  465:        auto isOwned() const noexcept -> bool;
        -:  466:        auto isSubstring() const noexcept -> bool;
        -:  467:    };
        -:  468:
        -:  469:    auto operator + ( StringRef const& lhs, StringRef const& rhs ) -> std::string;
        -:  470:    auto operator + ( StringRef const& lhs, char const* rhs ) -> std::string;
        -:  471:    auto operator + ( char const* lhs, StringRef const& rhs ) -> std::string;
        -:  472:
        -:  473:    auto operator += ( std::string& lhs, StringRef const& sr ) -> std::string&;
        -:  474:    auto operator << ( std::ostream& os, StringRef const& sr ) -> std::ostream&;
        -:  475:
    #####:  476:    inline auto operator "" _sr( char const* rawChars, std::size_t size ) noexcept -> StringRef {
    #####:  477:        return StringRef( rawChars, size );
        -:  478:    }
        -:  479:
        -:  480:} // namespace Catch
        -:  481:
        -:  482:// end catch_stringref.h
        -:  483:namespace Catch {
        -:  484:
        -:  485:template<typename C>
        -:  486:class TestInvokerAsMethod : public ITestInvoker {
        -:  487:    void (C::*m_testAsMethod)();
        -:  488:public:
        -:  489:    TestInvokerAsMethod( void (C::*testAsMethod)() ) noexcept : m_testAsMethod( testAsMethod ) {}
        -:  490:
        -:  491:    void invoke() const override {
        -:  492:        C obj;
        -:  493:        (obj.*m_testAsMethod)();
        -:  494:    }
        -:  495:};
        -:  496:
        -:  497:auto makeTestInvoker( void(*testAsFunction)() ) noexcept -> ITestInvoker*;
        -:  498:
        -:  499:template<typename C>
        -:  500:auto makeTestInvoker( void (C::*testAsMethod)() ) noexcept -> ITestInvoker* {
        -:  501:    return new(std::nothrow) TestInvokerAsMethod<C>( testAsMethod );
        -:  502:}
        -:  503:
    #####:  504:struct NameAndTags {
        -:  505:    NameAndTags( StringRef const& name_ = StringRef(), StringRef const& tags_ = StringRef() ) noexcept;
        -:  506:    StringRef name;
        -:  507:    StringRef tags;
        -:  508:};
        -:  509:
    #####:  510:struct AutoReg : NonCopyable {
        -:  511:    AutoReg( ITestInvoker* invoker, SourceLineInfo const& lineInfo, StringRef const& classOrMethod, NameAndTags const& nameAndTags ) noexcept;
        -:  512:    ~AutoReg();
        -:  513:};
        -:  514:
        -:  515:} // end namespace Catch
        -:  516:
        -:  517:#if defined(CATCH_CONFIG_DISABLE)
        -:  518:    #define INTERNAL_CATCH_TESTCASE_NO_REGISTRATION( TestName, ... ) \
        -:  519:        static void TestName()
        -:  520:    #define INTERNAL_CATCH_TESTCASE_METHOD_NO_REGISTRATION( TestName, ClassName, ... ) \
        -:  521:        namespace{                        \
        -:  522:            struct TestName : ClassName { \
        -:  523:                void test();              \
        -:  524:            };                            \
        -:  525:        }                                 \
        -:  526:        void TestName::test()
        -:  527:
        -:  528:#endif
        -:  529:
        -:  530:    ///////////////////////////////////////////////////////////////////////////////
        -:  531:    #define INTERNAL_CATCH_TESTCASE2( TestName, ... ) \
        -:  532:        static void TestName(); \
        -:  533:        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
        -:  534:        namespace{ Catch::AutoReg INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar )( Catch::makeTestInvoker( &TestName ), CATCH_INTERNAL_LINEINFO, "", Catch::NameAndTags{ __VA_ARGS__ } ); } /* NOLINT */ \
        -:  535:        CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS \
        -:  536:        static void TestName()
        -:  537:    #define INTERNAL_CATCH_TESTCASE( ... ) \
        -:  538:        INTERNAL_CATCH_TESTCASE2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ), __VA_ARGS__ )
        -:  539:
        -:  540:    ///////////////////////////////////////////////////////////////////////////////
        -:  541:    #define INTERNAL_CATCH_METHOD_AS_TEST_CASE( QualifiedMethod, ... ) \
        -:  542:        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
        -:  543:        namespace{ Catch::AutoReg INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar )( Catch::makeTestInvoker( &QualifiedMethod ), CATCH_INTERNAL_LINEINFO, "&" #QualifiedMethod, Catch::NameAndTags{ __VA_ARGS__ } ); } /* NOLINT */ \
        -:  544:        CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS
        -:  545:
        -:  546:    ///////////////////////////////////////////////////////////////////////////////
        -:  547:    #define INTERNAL_CATCH_TEST_CASE_METHOD2( TestName, ClassName, ... )\
        -:  548:        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
        -:  549:        namespace{ \
        -:  550:            struct TestName : ClassName{ \
        -:  551:                void test(); \
        -:  552:            }; \
        -:  553:            Catch::AutoReg INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar ) ( Catch::makeTestInvoker( &TestName::test ), CATCH_INTERNAL_LINEINFO, #ClassName, Catch::NameAndTags{ __VA_ARGS__ } ); /* NOLINT */ \
        -:  554:        } \
        -:  555:        CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS \
        -:  556:        void TestName::test()
        -:  557:    #define INTERNAL_CATCH_TEST_CASE_METHOD( ClassName, ... ) \
        -:  558:        INTERNAL_CATCH_TEST_CASE_METHOD2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ), ClassName, __VA_ARGS__ )
        -:  559:
        -:  560:    ///////////////////////////////////////////////////////////////////////////////
        -:  561:    #define INTERNAL_CATCH_REGISTER_TESTCASE( Function, ... ) \
        -:  562:        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
        -:  563:        Catch::AutoReg INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar )( Catch::makeTestInvoker( Function ), CATCH_INTERNAL_LINEINFO, "", Catch::NameAndTags{ __VA_ARGS__ } ); /* NOLINT */ \
        -:  564:        CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS
        -:  565:
        -:  566:// end catch_test_registry.h
        -:  567:// start catch_capture.hpp
        -:  568:
        -:  569:// start catch_assertionhandler.h
        -:  570:
        -:  571:// start catch_assertioninfo.h
        -:  572:
        -:  573:// start catch_result_type.h
        -:  574:
        -:  575:namespace Catch {
        -:  576:
        -:  577:    // ResultWas::OfType enum
        -:  578:    struct ResultWas { enum OfType {
        -:  579:        Unknown = -1,
        -:  580:        Ok = 0,
        -:  581:        Info = 1,
        -:  582:        Warning = 2,
        -:  583:
        -:  584:        FailureBit = 0x10,
        -:  585:
        -:  586:        ExpressionFailed = FailureBit | 1,
        -:  587:        ExplicitFailure = FailureBit | 2,
        -:  588:
        -:  589:        Exception = 0x100 | FailureBit,
        -:  590:
        -:  591:        ThrewException = Exception | 1,
        -:  592:        DidntThrowException = Exception | 2,
        -:  593:
        -:  594:        FatalErrorCondition = 0x200 | FailureBit
        -:  595:
        -:  596:    }; };
        -:  597:
        -:  598:    bool isOk( ResultWas::OfType resultType );
        -:  599:    bool isJustInfo( int flags );
        -:  600:
        -:  601:    // ResultDisposition::Flags enum
        -:  602:    struct ResultDisposition { enum Flags {
        -:  603:        Normal = 0x01,
        -:  604:
        -:  605:        ContinueOnFailure = 0x02,   // Failures fail test, but execution continues
        -:  606:        FalseTest = 0x04,           // Prefix expression with !
        -:  607:        SuppressFail = 0x08         // Failures are reported but do not fail the test
        -:  608:    }; };
        -:  609:
        -:  610:    ResultDisposition::Flags operator | ( ResultDisposition::Flags lhs, ResultDisposition::Flags rhs );
        -:  611:
        -:  612:    bool shouldContinueOnFailure( int flags );
    #####:  613:    inline bool isFalseTest( int flags ) { return ( flags & ResultDisposition::FalseTest ) != 0; }
        -:  614:    bool shouldSuppressFailure( int flags );
        -:  615:
        -:  616:} // end namespace Catch
        -:  617:
        -:  618:// end catch_result_type.h
        -:  619:namespace Catch {
        -:  620:
    #####:  621:    struct AssertionInfo
        -:  622:    {
        -:  623:        StringRef macroName;
        -:  624:        SourceLineInfo lineInfo;
        -:  625:        StringRef capturedExpression;
        -:  626:        ResultDisposition::Flags resultDisposition;
        -:  627:
        -:  628:        // We want to delete this constructor but a compiler bug in 4.8 means
        -:  629:        // the struct is then treated as non-aggregate
        -:  630:        //AssertionInfo() = delete;
        -:  631:    };
        -:  632:
        -:  633:} // end namespace Catch
        -:  634:
        -:  635:// end catch_assertioninfo.h
        -:  636:// start catch_decomposer.h
        -:  637:
        -:  638:// start catch_tostring.h
        -:  639:
        -:  640:#include <vector>
        -:  641:#include <cstddef>
        -:  642:#include <type_traits>
        -:  643:#include <string>
        -:  644:// start catch_stream.h
        -:  645:
        -:  646:#include <iosfwd>
        -:  647:#include <cstddef>
        -:  648:#include <ostream>
        -:  649:
        -:  650:namespace Catch {
        -:  651:
        -:  652:    std::ostream& cout();
        -:  653:    std::ostream& cerr();
        -:  654:    std::ostream& clog();
        -:  655:
        -:  656:    class StringRef;
        -:  657:
    #####:  658:    struct IStream {
        -:  659:        virtual ~IStream();
        -:  660:        virtual std::ostream& stream() const = 0;
        -:  661:    };
        -:  662:
        -:  663:    auto makeStream( StringRef const &filename ) -> IStream const*;
        -:  664:
        -:  665:    class ReusableStringStream {
        -:  666:        std::size_t m_index;
        -:  667:        std::ostream* m_oss;
        -:  668:    public:
        -:  669:        ReusableStringStream();
        -:  670:        ~ReusableStringStream();
        -:  671:
        -:  672:        auto str() const -> std::string;
        -:  673:
        -:  674:        template<typename T>
    #####:  675:        auto operator << ( T const& value ) -> ReusableStringStream& {
    #####:  676:            *m_oss << value;
    #####:  677:            return *this;
        -:  678:        }
    #####:  679:        auto get() -> std::ostream& { return *m_oss; }
        -:  680:
        -:  681:        static void cleanup();
        -:  682:    };
        -:  683:}
        -:  684:
        -:  685:// end catch_stream.h
        -:  686:
        -:  687:#ifdef __OBJC__
        -:  688:// start catch_objc_arc.hpp
        -:  689:
        -:  690:#import <Foundation/Foundation.h>
        -:  691:
        -:  692:#ifdef __has_feature
        -:  693:#define CATCH_ARC_ENABLED __has_feature(objc_arc)
        -:  694:#else
        -:  695:#define CATCH_ARC_ENABLED 0
        -:  696:#endif
        -:  697:
        -:  698:void arcSafeRelease( NSObject* obj );
        -:  699:id performOptionalSelector( id obj, SEL sel );
        -:  700:
        -:  701:#if !CATCH_ARC_ENABLED
        -:  702:inline void arcSafeRelease( NSObject* obj ) {
        -:  703:    [obj release];
        -:  704:}
        -:  705:inline id performOptionalSelector( id obj, SEL sel ) {
        -:  706:    if( [obj respondsToSelector: sel] )
        -:  707:        return [obj performSelector: sel];
        -:  708:    return nil;
        -:  709:}
        -:  710:#define CATCH_UNSAFE_UNRETAINED
        -:  711:#define CATCH_ARC_STRONG
        -:  712:#else
        -:  713:inline void arcSafeRelease( NSObject* ){}
        -:  714:inline id performOptionalSelector( id obj, SEL sel ) {
        -:  715:#ifdef __clang__
        -:  716:#pragma clang diagnostic push
        -:  717:#pragma clang diagnostic ignored "-Warc-performSelector-leaks"
        -:  718:#endif
        -:  719:    if( [obj respondsToSelector: sel] )
        -:  720:        return [obj performSelector: sel];
        -:  721:#ifdef __clang__
        -:  722:#pragma clang diagnostic pop
        -:  723:#endif
        -:  724:    return nil;
        -:  725:}
        -:  726:#define CATCH_UNSAFE_UNRETAINED __unsafe_unretained
        -:  727:#define CATCH_ARC_STRONG __strong
        -:  728:#endif
        -:  729:
        -:  730:// end catch_objc_arc.hpp
        -:  731:#endif
        -:  732:
        -:  733:#ifdef _MSC_VER
        -:  734:#pragma warning(push)
        -:  735:#pragma warning(disable:4180) // We attempt to stream a function (address) by const&, which MSVC complains about but is harmless
        -:  736:#endif
        -:  737:
        -:  738:// We need a dummy global operator<< so we can bring it into Catch namespace later
        -:  739:struct Catch_global_namespace_dummy {};
        -:  740:std::ostream& operator<<(std::ostream&, Catch_global_namespace_dummy);
        -:  741:
        -:  742:namespace Catch {
        -:  743:    // Bring in operator<< from global namespace into Catch namespace
        -:  744:    using ::operator<<;
        -:  745:
        -:  746:    namespace Detail {
        -:  747:
        -:  748:        extern const std::string unprintableString;
        -:  749:
        -:  750:        std::string rawMemoryToString( const void *object, std::size_t size );
        -:  751:
        -:  752:        template<typename T>
        -:  753:        std::string rawMemoryToString( const T& object ) {
        -:  754:          return rawMemoryToString( &object, sizeof(object) );
        -:  755:        }
        -:  756:
        -:  757:        template<typename T>
        -:  758:        class IsStreamInsertable {
        -:  759:            template<typename SS, typename TT>
        -:  760:            static auto test(int)
        -:  761:                -> decltype(std::declval<SS&>() << std::declval<TT>(), std::true_type());
        -:  762:
        -:  763:            template<typename, typename>
        -:  764:            static auto test(...)->std::false_type;
        -:  765:
        -:  766:        public:
        -:  767:            static const bool value = decltype(test<std::ostream, const T&>(0))::value;
        -:  768:        };
        -:  769:
        -:  770:        template<typename E>
        -:  771:        std::string convertUnknownEnumToString( E e );
        -:  772:
        -:  773:        template<typename T>
    #####:  774:        typename std::enable_if<!std::is_enum<T>::value, std::string>::type convertUnstreamable( T const& value ) {
        -:  775:#if !defined(CATCH_CONFIG_FALLBACK_STRINGIFIER)
        -:  776:            (void)value;
    #####:  777:            return Detail::unprintableString;
        -:  778:#else
        -:  779:            return CATCH_CONFIG_FALLBACK_STRINGIFIER(value);
        -:  780:#endif
        -:  781:        }
        -:  782:        template<typename T>
        -:  783:        typename std::enable_if<std::is_enum<T>::value, std::string>::type convertUnstreamable( T const& value ) {
        -:  784:            return convertUnknownEnumToString( value );
        -:  785:        }
        -:  786:
        -:  787:    } // namespace Detail
        -:  788:
        -:  789:    // If we decide for C++14, change these to enable_if_ts
        -:  790:    template <typename T, typename = void>
        -:  791:    struct StringMaker {
        -:  792:        template <typename Fake = T>
        -:  793:        static
        -:  794:        typename std::enable_if<::Catch::Detail::IsStreamInsertable<Fake>::value, std::string>::type
    #####:  795:            convert(const Fake& value) {
    #####:  796:                ReusableStringStream rss;
    #####:  797:                rss << value;
    #####:  798:                return rss.str();
        -:  799:        }
        -:  800:
        -:  801:        template <typename Fake = T>
        -:  802:        static
        -:  803:        typename std::enable_if<!::Catch::Detail::IsStreamInsertable<Fake>::value, std::string>::type
    #####:  804:            convert( const Fake& value ) {
    #####:  805:                return Detail::convertUnstreamable( value );
        -:  806:        }
        -:  807:    };
        -:  808:
        -:  809:    namespace Detail {
        -:  810:
        -:  811:        // This function dispatches all stringification requests inside of Catch.
        -:  812:        // Should be preferably called fully qualified, like ::Catch::Detail::stringify
        -:  813:        template <typename T>
    #####:  814:        std::string stringify(const T& e) {
    #####:  815:            return ::Catch::StringMaker<typename std::remove_cv<typename std::remove_reference<T>::type>::type>::convert(e);
        -:  816:        }
        -:  817:
        -:  818:        template<typename E>
        -:  819:        std::string convertUnknownEnumToString( E e ) {
        -:  820:            return ::Catch::Detail::stringify(static_cast<typename std::underlying_type<E>::type>(e));
        -:  821:        }
        -:  822:
        -:  823:    } // namespace Detail
        -:  824:
        -:  825:    // Some predefined specializations
        -:  826:
        -:  827:    template<>
        -:  828:    struct StringMaker<std::string> {
        -:  829:        static std::string convert(const std::string& str);
        -:  830:    };
        -:  831:#ifdef CATCH_CONFIG_WCHAR
        -:  832:    template<>
        -:  833:    struct StringMaker<std::wstring> {
        -:  834:        static std::string convert(const std::wstring& wstr);
        -:  835:    };
        -:  836:#endif
        -:  837:
        -:  838:    template<>
        -:  839:    struct StringMaker<char const *> {
        -:  840:        static std::string convert(char const * str);
        -:  841:    };
        -:  842:    template<>
        -:  843:    struct StringMaker<char *> {
        -:  844:        static std::string convert(char * str);
        -:  845:    };
        -:  846:#ifdef CATCH_CONFIG_WCHAR
        -:  847:    template<>
        -:  848:    struct StringMaker<wchar_t const *> {
        -:  849:        static std::string convert(wchar_t const * str);
        -:  850:    };
        -:  851:    template<>
        -:  852:    struct StringMaker<wchar_t *> {
        -:  853:        static std::string convert(wchar_t * str);
        -:  854:    };
        -:  855:#endif
        -:  856:
        -:  857:    template<int SZ>
        -:  858:    struct StringMaker<char[SZ]> {
    #####:  859:        static std::string convert(const char* str) {
    #####:  860:            return ::Catch::Detail::stringify(std::string{ str });
        -:  861:        }
        -:  862:    };
        -:  863:    template<int SZ>
        -:  864:    struct StringMaker<signed char[SZ]> {
        -:  865:        static std::string convert(const char* str) {
        -:  866:            return ::Catch::Detail::stringify(std::string{ str });
        -:  867:        }
        -:  868:    };
        -:  869:    template<int SZ>
        -:  870:    struct StringMaker<unsigned char[SZ]> {
        -:  871:        static std::string convert(const char* str) {
        -:  872:            return ::Catch::Detail::stringify(std::string{ str });
        -:  873:        }
        -:  874:    };
        -:  875:
        -:  876:    template<>
        -:  877:    struct StringMaker<int> {
        -:  878:        static std::string convert(int value);
        -:  879:    };
        -:  880:    template<>
        -:  881:    struct StringMaker<long> {
        -:  882:        static std::string convert(long value);
        -:  883:    };
        -:  884:    template<>
        -:  885:    struct StringMaker<long long> {
        -:  886:        static std::string convert(long long value);
        -:  887:    };
        -:  888:    template<>
        -:  889:    struct StringMaker<unsigned int> {
        -:  890:        static std::string convert(unsigned int value);
        -:  891:    };
        -:  892:    template<>
        -:  893:    struct StringMaker<unsigned long> {
        -:  894:        static std::string convert(unsigned long value);
        -:  895:    };
        -:  896:    template<>
        -:  897:    struct StringMaker<unsigned long long> {
        -:  898:        static std::string convert(unsigned long long value);
        -:  899:    };
        -:  900:
        -:  901:    template<>
        -:  902:    struct StringMaker<bool> {
        -:  903:        static std::string convert(bool b);
        -:  904:    };
        -:  905:
        -:  906:    template<>
        -:  907:    struct StringMaker<char> {
        -:  908:        static std::string convert(char c);
        -:  909:    };
        -:  910:    template<>
        -:  911:    struct StringMaker<signed char> {
        -:  912:        static std::string convert(signed char c);
        -:  913:    };
        -:  914:    template<>
        -:  915:    struct StringMaker<unsigned char> {
        -:  916:        static std::string convert(unsigned char c);
        -:  917:    };
        -:  918:
        -:  919:    template<>
        -:  920:    struct StringMaker<std::nullptr_t> {
        -:  921:        static std::string convert(std::nullptr_t);
        -:  922:    };
        -:  923:
        -:  924:    template<>
        -:  925:    struct StringMaker<float> {
        -:  926:        static std::string convert(float value);
        -:  927:    };
        -:  928:    template<>
        -:  929:    struct StringMaker<double> {
        -:  930:        static std::string convert(double value);
        -:  931:    };
        -:  932:
        -:  933:    template <typename T>
        -:  934:    struct StringMaker<T*> {
        -:  935:        template <typename U>
        -:  936:        static std::string convert(U* p) {
        -:  937:            if (p) {
        -:  938:                return ::Catch::Detail::rawMemoryToString(p);
        -:  939:            } else {
        -:  940:                return "nullptr";
        -:  941:            }
        -:  942:        }
        -:  943:    };
        -:  944:
        -:  945:    template <typename R, typename C>
        -:  946:    struct StringMaker<R C::*> {
        -:  947:        static std::string convert(R C::* p) {
        -:  948:            if (p) {
        -:  949:                return ::Catch::Detail::rawMemoryToString(p);
        -:  950:            } else {
        -:  951:                return "nullptr";
        -:  952:            }
        -:  953:        }
        -:  954:    };
        -:  955:
        -:  956:    namespace Detail {
        -:  957:        template<typename InputIterator>
        -:  958:        std::string rangeToString(InputIterator first, InputIterator last) {
        -:  959:            ReusableStringStream rss;
        -:  960:            rss << "{ ";
        -:  961:            if (first != last) {
        -:  962:                rss << ::Catch::Detail::stringify(*first);
        -:  963:                for (++first; first != last; ++first)
        -:  964:                    rss << ", " << ::Catch::Detail::stringify(*first);
        -:  965:            }
        -:  966:            rss << " }";
        -:  967:            return rss.str();
        -:  968:        }
        -:  969:    }
        -:  970:
        -:  971:#ifdef __OBJC__
        -:  972:    template<>
        -:  973:    struct StringMaker<NSString*> {
        -:  974:        static std::string convert(NSString * nsstring) {
        -:  975:            if (!nsstring)
        -:  976:                return "nil";
        -:  977:            return std::string("@") + [nsstring UTF8String];
        -:  978:        }
        -:  979:    };
        -:  980:    template<>
        -:  981:    struct StringMaker<NSObject*> {
        -:  982:        static std::string convert(NSObject* nsObject) {
        -:  983:            return ::Catch::Detail::stringify([nsObject description]);
        -:  984:        }
        -:  985:
        -:  986:    };
        -:  987:    namespace Detail {
        -:  988:        inline std::string stringify( NSString* nsstring ) {
        -:  989:            return StringMaker<NSString*>::convert( nsstring );
        -:  990:        }
        -:  991:
        -:  992:    } // namespace Detail
        -:  993:#endif // __OBJC__
        -:  994:
        -:  995:} // namespace Catch
        -:  996:
        -:  997://////////////////////////////////////////////////////
        -:  998:// Separate std-lib types stringification, so it can be selectively enabled
        -:  999:// This means that we do not bring in
        -: 1000:
        -: 1001:#if defined(CATCH_CONFIG_ENABLE_ALL_STRINGMAKERS)
        -: 1002:#  define CATCH_CONFIG_ENABLE_PAIR_STRINGMAKER
        -: 1003:#  define CATCH_CONFIG_ENABLE_TUPLE_STRINGMAKER
        -: 1004:#  define CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER
        -: 1005:#endif
        -: 1006:
        -: 1007:// Separate std::pair specialization
        -: 1008:#if defined(CATCH_CONFIG_ENABLE_PAIR_STRINGMAKER)
        -: 1009:#include <utility>
        -: 1010:namespace Catch {
        -: 1011:    template<typename T1, typename T2>
        -: 1012:    struct StringMaker<std::pair<T1, T2> > {
        -: 1013:        static std::string convert(const std::pair<T1, T2>& pair) {
        -: 1014:            ReusableStringStream rss;
        -: 1015:            rss << "{ "
        -: 1016:                << ::Catch::Detail::stringify(pair.first)
        -: 1017:                << ", "
        -: 1018:                << ::Catch::Detail::stringify(pair.second)
        -: 1019:                << " }";
        -: 1020:            return rss.str();
        -: 1021:        }
        -: 1022:    };
        -: 1023:}
        -: 1024:#endif // CATCH_CONFIG_ENABLE_PAIR_STRINGMAKER
        -: 1025:
        -: 1026:// Separate std::tuple specialization
        -: 1027:#if defined(CATCH_CONFIG_ENABLE_TUPLE_STRINGMAKER)
        -: 1028:#include <tuple>
        -: 1029:namespace Catch {
        -: 1030:    namespace Detail {
        -: 1031:        template<
        -: 1032:            typename Tuple,
        -: 1033:            std::size_t N = 0,
        -: 1034:            bool = (N < std::tuple_size<Tuple>::value)
        -: 1035:            >
        -: 1036:            struct TupleElementPrinter {
        -: 1037:            static void print(const Tuple& tuple, std::ostream& os) {
        -: 1038:                os << (N ? ", " : " ")
        -: 1039:                    << ::Catch::Detail::stringify(std::get<N>(tuple));
        -: 1040:                TupleElementPrinter<Tuple, N + 1>::print(tuple, os);
        -: 1041:            }
        -: 1042:        };
        -: 1043:
        -: 1044:        template<
        -: 1045:            typename Tuple,
        -: 1046:            std::size_t N
        -: 1047:        >
        -: 1048:            struct TupleElementPrinter<Tuple, N, false> {
        -: 1049:            static void print(const Tuple&, std::ostream&) {}
        -: 1050:        };
        -: 1051:
        -: 1052:    }
        -: 1053:
        -: 1054:    template<typename ...Types>
        -: 1055:    struct StringMaker<std::tuple<Types...>> {
        -: 1056:        static std::string convert(const std::tuple<Types...>& tuple) {
        -: 1057:            ReusableStringStream rss;
        -: 1058:            rss << '{';
        -: 1059:            Detail::TupleElementPrinter<std::tuple<Types...>>::print(tuple, rss.get());
        -: 1060:            rss << " }";
        -: 1061:            return rss.str();
        -: 1062:        }
        -: 1063:    };
        -: 1064:}
        -: 1065:#endif // CATCH_CONFIG_ENABLE_TUPLE_STRINGMAKER
        -: 1066:
        -: 1067:namespace Catch {
        -: 1068:    struct not_this_one {}; // Tag type for detecting which begin/ end are being selected
        -: 1069:
        -: 1070:    // Import begin/ end from std here so they are considered alongside the fallback (...) overloads in this namespace
        -: 1071:    using std::begin;
        -: 1072:    using std::end;
        -: 1073:
        -: 1074:    not_this_one begin( ... );
        -: 1075:    not_this_one end( ... );
        -: 1076:
        -: 1077:    template <typename T>
        -: 1078:    struct is_range {
        -: 1079:        static const bool value =
        -: 1080:            !std::is_same<decltype(begin(std::declval<T>())), not_this_one>::value &&
        -: 1081:            !std::is_same<decltype(end(std::declval<T>())), not_this_one>::value;
        -: 1082:    };
        -: 1083:
        -: 1084:    template<typename Range>
        -: 1085:    std::string rangeToString( Range const& range ) {
        -: 1086:        return ::Catch::Detail::rangeToString( begin( range ), end( range ) );
        -: 1087:    }
        -: 1088:
        -: 1089:    // Handle vector<bool> specially
        -: 1090:    template<typename Allocator>
        -: 1091:    std::string rangeToString( std::vector<bool, Allocator> const& v ) {
        -: 1092:        ReusableStringStream rss;
        -: 1093:        rss << "{ ";
        -: 1094:        bool first = true;
        -: 1095:        for( bool b : v ) {
        -: 1096:            if( first )
        -: 1097:                first = false;
        -: 1098:            else
        -: 1099:                rss << ", ";
        -: 1100:            rss << ::Catch::Detail::stringify( b );
        -: 1101:        }
        -: 1102:        rss << " }";
        -: 1103:        return rss.str();
        -: 1104:    }
        -: 1105:
        -: 1106:    template<typename R>
        -: 1107:    struct StringMaker<R, typename std::enable_if<is_range<R>::value && !::Catch::Detail::IsStreamInsertable<R>::value>::type> {
        -: 1108:        static std::string convert( R const& range ) {
        -: 1109:            return rangeToString( range );
        -: 1110:        }
        -: 1111:    };
        -: 1112:
        -: 1113:    template <typename T, int SZ>
        -: 1114:    struct StringMaker<T[SZ]> {
        -: 1115:        static std::string convert(T const(&arr)[SZ]) {
        -: 1116:            return rangeToString(arr);
        -: 1117:        }
        -: 1118:    };
        -: 1119:
        -: 1120:} // namespace Catch
        -: 1121:
        -: 1122:// Separate std::chrono::duration specialization
        -: 1123:#if defined(CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER)
        -: 1124:#include <ctime>
        -: 1125:#include <ratio>
        -: 1126:#include <chrono>
        -: 1127:
        -: 1128:namespace Catch {
        -: 1129:
        -: 1130:template <class Ratio>
        -: 1131:struct ratio_string {
        -: 1132:    static std::string symbol();
        -: 1133:};
        -: 1134:
        -: 1135:template <class Ratio>
        -: 1136:std::string ratio_string<Ratio>::symbol() {
        -: 1137:    Catch::ReusableStringStream rss;
        -: 1138:    rss << '[' << Ratio::num << '/'
        -: 1139:        << Ratio::den << ']';
        -: 1140:    return rss.str();
        -: 1141:}
        -: 1142:template <>
        -: 1143:struct ratio_string<std::atto> {
        -: 1144:    static std::string symbol();
        -: 1145:};
        -: 1146:template <>
        -: 1147:struct ratio_string<std::femto> {
        -: 1148:    static std::string symbol();
        -: 1149:};
        -: 1150:template <>
        -: 1151:struct ratio_string<std::pico> {
        -: 1152:    static std::string symbol();
        -: 1153:};
        -: 1154:template <>
        -: 1155:struct ratio_string<std::nano> {
        -: 1156:    static std::string symbol();
        -: 1157:};
        -: 1158:template <>
        -: 1159:struct ratio_string<std::micro> {
        -: 1160:    static std::string symbol();
        -: 1161:};
        -: 1162:template <>
        -: 1163:struct ratio_string<std::milli> {
        -: 1164:    static std::string symbol();
        -: 1165:};
        -: 1166:
        -: 1167:    ////////////
        -: 1168:    // std::chrono::duration specializations
        -: 1169:    template<typename Value, typename Ratio>
        -: 1170:    struct StringMaker<std::chrono::duration<Value, Ratio>> {
        -: 1171:        static std::string convert(std::chrono::duration<Value, Ratio> const& duration) {
        -: 1172:            ReusableStringStream rss;
        -: 1173:            rss << duration.count() << ' ' << ratio_string<Ratio>::symbol() << 's';
        -: 1174:            return rss.str();
        -: 1175:        }
        -: 1176:    };
        -: 1177:    template<typename Value>
        -: 1178:    struct StringMaker<std::chrono::duration<Value, std::ratio<1>>> {
        -: 1179:        static std::string convert(std::chrono::duration<Value, std::ratio<1>> const& duration) {
        -: 1180:            ReusableStringStream rss;
        -: 1181:            rss << duration.count() << " s";
        -: 1182:            return rss.str();
        -: 1183:        }
        -: 1184:    };
        -: 1185:    template<typename Value>
        -: 1186:    struct StringMaker<std::chrono::duration<Value, std::ratio<60>>> {
        -: 1187:        static std::string convert(std::chrono::duration<Value, std::ratio<60>> const& duration) {
        -: 1188:            ReusableStringStream rss;
        -: 1189:            rss << duration.count() << " m";
        -: 1190:            return rss.str();
        -: 1191:        }
        -: 1192:    };
        -: 1193:    template<typename Value>
        -: 1194:    struct StringMaker<std::chrono::duration<Value, std::ratio<3600>>> {
        -: 1195:        static std::string convert(std::chrono::duration<Value, std::ratio<3600>> const& duration) {
        -: 1196:            ReusableStringStream rss;
        -: 1197:            rss << duration.count() << " h";
        -: 1198:            return rss.str();
        -: 1199:        }
        -: 1200:    };
        -: 1201:
        -: 1202:    ////////////
        -: 1203:    // std::chrono::time_point specialization
        -: 1204:    // Generic time_point cannot be specialized, only std::chrono::time_point<system_clock>
        -: 1205:    template<typename Clock, typename Duration>
        -: 1206:    struct StringMaker<std::chrono::time_point<Clock, Duration>> {
        -: 1207:        static std::string convert(std::chrono::time_point<Clock, Duration> const& time_point) {
        -: 1208:            return ::Catch::Detail::stringify(time_point.time_since_epoch()) + " since epoch";
        -: 1209:        }
        -: 1210:    };
        -: 1211:    // std::chrono::time_point<system_clock> specialization
        -: 1212:    template<typename Duration>
        -: 1213:    struct StringMaker<std::chrono::time_point<std::chrono::system_clock, Duration>> {
        -: 1214:        static std::string convert(std::chrono::time_point<std::chrono::system_clock, Duration> const& time_point) {
        -: 1215:            auto converted = std::chrono::system_clock::to_time_t(time_point);
        -: 1216:
        -: 1217:#ifdef _MSC_VER
        -: 1218:            std::tm timeInfo = {};
        -: 1219:            gmtime_s(&timeInfo, &converted);
        -: 1220:#else
        -: 1221:            std::tm* timeInfo = std::gmtime(&converted);
        -: 1222:#endif
        -: 1223:
        -: 1224:            auto const timeStampSize = sizeof("2017-01-16T17:06:45Z");
        -: 1225:            char timeStamp[timeStampSize];
        -: 1226:            const char * const fmt = "%Y-%m-%dT%H:%M:%SZ";
        -: 1227:
        -: 1228:#ifdef _MSC_VER
        -: 1229:            std::strftime(timeStamp, timeStampSize, fmt, &timeInfo);
        -: 1230:#else
        -: 1231:            std::strftime(timeStamp, timeStampSize, fmt, timeInfo);
        -: 1232:#endif
        -: 1233:            return std::string(timeStamp);
        -: 1234:        }
        -: 1235:    };
        -: 1236:}
        -: 1237:#endif // CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER
        -: 1238:
        -: 1239:#ifdef _MSC_VER
        -: 1240:#pragma warning(pop)
        -: 1241:#endif
        -: 1242:
        -: 1243:// end catch_tostring.h
        -: 1244:#include <iosfwd>
        -: 1245:
        -: 1246:#ifdef _MSC_VER
        -: 1247:#pragma warning(push)
        -: 1248:#pragma warning(disable:4389) // '==' : signed/unsigned mismatch
        -: 1249:#pragma warning(disable:4018) // more "signed/unsigned mismatch"
        -: 1250:#pragma warning(disable:4312) // Converting int to T* using reinterpret_cast (issue on x64 platform)
        -: 1251:#pragma warning(disable:4180) // qualifier applied to function type has no meaning
        -: 1252:#endif
        -: 1253:
        -: 1254:namespace Catch {
        -: 1255:
    #####: 1256:    struct ITransientExpression {
    #####: 1257:        auto isBinaryExpression() const -> bool { return m_isBinaryExpression; }
    #####: 1258:        auto getResult() const -> bool { return m_result; }
        -: 1259:        virtual void streamReconstructedExpression( std::ostream &os ) const = 0;
        -: 1260:
    #####: 1261:        ITransientExpression( bool isBinaryExpression, bool result )
    #####: 1262:        :   m_isBinaryExpression( isBinaryExpression ),
    #####: 1263:            m_result( result )
    #####: 1264:        {}
        -: 1265:
        -: 1266:        // We don't actually need a virtual destructor, but many static analysers
        -: 1267:        // complain if it's not here :-(
        -: 1268:        virtual ~ITransientExpression();
        -: 1269:
        -: 1270:        bool m_isBinaryExpression;
        -: 1271:        bool m_result;
        -: 1272:
        -: 1273:    };
        -: 1274:
        -: 1275:    void formatReconstructedExpression( std::ostream &os, std::string const& lhs, StringRef op, std::string const& rhs );
        -: 1276:
        -: 1277:    template<typename LhsT, typename RhsT>
    #####: 1278:    class BinaryExpr  : public ITransientExpression {
        -: 1279:        LhsT m_lhs;
        -: 1280:        StringRef m_op;
        -: 1281:        RhsT m_rhs;
        -: 1282:
    #####: 1283:        void streamReconstructedExpression( std::ostream &os ) const override {
    #####: 1284:            formatReconstructedExpression
    #####: 1285:                    ( os, Catch::Detail::stringify( m_lhs ), m_op, Catch::Detail::stringify( m_rhs ) );
    #####: 1286:        }
        -: 1287:
        -: 1288:    public:
    #####: 1289:        BinaryExpr( bool comparisonResult, LhsT lhs, StringRef op, RhsT rhs )
        -: 1290:        :   ITransientExpression{ true, comparisonResult },
        -: 1291:            m_lhs( lhs ),
        -: 1292:            m_op( op ),
    #####: 1293:            m_rhs( rhs )
    #####: 1294:        {}
        -: 1295:    };
        -: 1296:
        -: 1297:    template<typename LhsT>
    #####: 1298:    class UnaryExpr : public ITransientExpression {
        -: 1299:        LhsT m_lhs;
        -: 1300:
    #####: 1301:        void streamReconstructedExpression( std::ostream &os ) const override {
    #####: 1302:            os << Catch::Detail::stringify( m_lhs );
    #####: 1303:        }
        -: 1304:
        -: 1305:    public:
    #####: 1306:        explicit UnaryExpr( LhsT lhs )
    #####: 1307:        :   ITransientExpression{ false, lhs ? true : false },
    #####: 1308:            m_lhs( lhs )
    #####: 1309:        {}
        -: 1310:    };
        -: 1311:
        -: 1312:    // Specialised comparison functions to handle equality comparisons between ints and pointers (NULL deduces as an int)
        -: 1313:    template<typename LhsT, typename RhsT>
    #####: 1314:    auto compareEqual( LhsT const& lhs, RhsT const& rhs ) -> bool { return static_cast<bool>(lhs == rhs); }
        -: 1315:    template<typename T>
        -: 1316:    auto compareEqual( T* const& lhs, int rhs ) -> bool { return lhs == reinterpret_cast<void const*>( rhs ); }
        -: 1317:    template<typename T>
        -: 1318:    auto compareEqual( T* const& lhs, long rhs ) -> bool { return lhs == reinterpret_cast<void const*>( rhs ); }
        -: 1319:    template<typename T>
        -: 1320:    auto compareEqual( int lhs, T* const& rhs ) -> bool { return reinterpret_cast<void const*>( lhs ) == rhs; }
        -: 1321:    template<typename T>
        -: 1322:    auto compareEqual( long lhs, T* const& rhs ) -> bool { return reinterpret_cast<void const*>( lhs ) == rhs; }
        -: 1323:
        -: 1324:    template<typename LhsT, typename RhsT>
    #####: 1325:    auto compareNotEqual( LhsT const& lhs, RhsT&& rhs ) -> bool { return static_cast<bool>(lhs != rhs); }
        -: 1326:    template<typename T>
        -: 1327:    auto compareNotEqual( T* const& lhs, int rhs ) -> bool { return lhs != reinterpret_cast<void const*>( rhs ); }
        -: 1328:    template<typename T>
        -: 1329:    auto compareNotEqual( T* const& lhs, long rhs ) -> bool { return lhs != reinterpret_cast<void const*>( rhs ); }
        -: 1330:    template<typename T>
        -: 1331:    auto compareNotEqual( int lhs, T* const& rhs ) -> bool { return reinterpret_cast<void const*>( lhs ) != rhs; }
        -: 1332:    template<typename T>
        -: 1333:    auto compareNotEqual( long lhs, T* const& rhs ) -> bool { return reinterpret_cast<void const*>( lhs ) != rhs; }
        -: 1334:
        -: 1335:    template<typename LhsT>
        -: 1336:    class ExprLhs {
        -: 1337:        LhsT m_lhs;
        -: 1338:    public:
    #####: 1339:        explicit ExprLhs( LhsT lhs ) : m_lhs( lhs ) {}
        -: 1340:
        -: 1341:        template<typename RhsT>
    #####: 1342:        auto operator == ( RhsT const& rhs ) -> BinaryExpr<LhsT, RhsT const&> const {
    #####: 1343:            return { compareEqual( m_lhs, rhs ), m_lhs, "==", rhs };
        -: 1344:        }
    #####: 1345:        auto operator == ( bool rhs ) -> BinaryExpr<LhsT, bool> const {
    #####: 1346:            return { m_lhs == rhs, m_lhs, "==", rhs };
        -: 1347:        }
        -: 1348:
        -: 1349:        template<typename RhsT>
    #####: 1350:        auto operator != ( RhsT const& rhs ) -> BinaryExpr<LhsT, RhsT const&> const {
    #####: 1351:            return { compareNotEqual( m_lhs, rhs ), m_lhs, "!=", rhs };
        -: 1352:        }
        -: 1353:        auto operator != ( bool rhs ) -> BinaryExpr<LhsT, bool> const {
        -: 1354:            return { m_lhs != rhs, m_lhs, "!=", rhs };
        -: 1355:        }
        -: 1356:
        -: 1357:        template<typename RhsT>
    #####: 1358:        auto operator > ( RhsT const& rhs ) -> BinaryExpr<LhsT, RhsT const&> const {
    #####: 1359:            return { static_cast<bool>(m_lhs > rhs), m_lhs, ">", rhs };
        -: 1360:        }
        -: 1361:        template<typename RhsT>
    #####: 1362:        auto operator < ( RhsT const& rhs ) -> BinaryExpr<LhsT, RhsT const&> const {
    #####: 1363:            return { static_cast<bool>(m_lhs < rhs), m_lhs, "<", rhs };
        -: 1364:        }
        -: 1365:        template<typename RhsT>
    #####: 1366:        auto operator >= ( RhsT const& rhs ) -> BinaryExpr<LhsT, RhsT const&> const {
    #####: 1367:            return { static_cast<bool>(m_lhs >= rhs), m_lhs, ">=", rhs };
        -: 1368:        }
        -: 1369:        template<typename RhsT>
    #####: 1370:        auto operator <= ( RhsT const& rhs ) -> BinaryExpr<LhsT, RhsT const&> const {
    #####: 1371:            return { static_cast<bool>(m_lhs <= rhs), m_lhs, "<=", rhs };
        -: 1372:        }
        -: 1373:
    #####: 1374:        auto makeUnaryExpr() const -> UnaryExpr<LhsT> {
    #####: 1375:            return UnaryExpr<LhsT>{ m_lhs };
        -: 1376:        }
        -: 1377:    };
        -: 1378:
        -: 1379:    void handleExpression( ITransientExpression const& expr );
        -: 1380:
        -: 1381:    template<typename T>
        -: 1382:    void handleExpression( ExprLhs<T> const& expr ) {
        -: 1383:        handleExpression( expr.makeUnaryExpr() );
        -: 1384:    }
        -: 1385:
        -: 1386:    struct Decomposer {
        -: 1387:        template<typename T>
    #####: 1388:        auto operator <= ( T const& lhs ) -> ExprLhs<T const&> {
    #####: 1389:            return ExprLhs<T const&>{ lhs };
        -: 1390:        }
        -: 1391:
    #####: 1392:        auto operator <=( bool value ) -> ExprLhs<bool> {
    #####: 1393:            return ExprLhs<bool>{ value };
        -: 1394:        }
        -: 1395:    };
        -: 1396:
        -: 1397:} // end namespace Catch
        -: 1398:
        -: 1399:#ifdef _MSC_VER
        -: 1400:#pragma warning(pop)
        -: 1401:#endif
        -: 1402:
        -: 1403:// end catch_decomposer.h
        -: 1404:// start catch_interfaces_capture.h
        -: 1405:
        -: 1406:#include <string>
        -: 1407:
        -: 1408:namespace Catch {
        -: 1409:
        -: 1410:    class AssertionResult;
        -: 1411:    struct AssertionInfo;
        -: 1412:    struct SectionInfo;
        -: 1413:    struct SectionEndInfo;
        -: 1414:    struct MessageInfo;
        -: 1415:    struct Counts;
        -: 1416:    struct BenchmarkInfo;
        -: 1417:    struct BenchmarkStats;
        -: 1418:    struct AssertionReaction;
        -: 1419:
        -: 1420:    struct ITransientExpression;
        -: 1421:
    #####: 1422:    struct IResultCapture {
        -: 1423:
        -: 1424:        virtual ~IResultCapture();
        -: 1425:
        -: 1426:        virtual bool sectionStarted(    SectionInfo const& sectionInfo,
        -: 1427:                                        Counts& assertions ) = 0;
        -: 1428:        virtual void sectionEnded( SectionEndInfo const& endInfo ) = 0;
        -: 1429:        virtual void sectionEndedEarly( SectionEndInfo const& endInfo ) = 0;
        -: 1430:
        -: 1431:        virtual void benchmarkStarting( BenchmarkInfo const& info ) = 0;
        -: 1432:        virtual void benchmarkEnded( BenchmarkStats const& stats ) = 0;
        -: 1433:
        -: 1434:        virtual void pushScopedMessage( MessageInfo const& message ) = 0;
        -: 1435:        virtual void popScopedMessage( MessageInfo const& message ) = 0;
        -: 1436:
        -: 1437:        virtual void handleFatalErrorCondition( StringRef message ) = 0;
        -: 1438:
        -: 1439:        virtual void handleExpr
        -: 1440:                (   AssertionInfo const& info,
        -: 1441:                    ITransientExpression const& expr,
        -: 1442:                    AssertionReaction& reaction ) = 0;
        -: 1443:        virtual void handleMessage
        -: 1444:                (   AssertionInfo const& info,
        -: 1445:                    ResultWas::OfType resultType,
        -: 1446:                    StringRef const& message,
        -: 1447:                    AssertionReaction& reaction ) = 0;
        -: 1448:        virtual void handleUnexpectedExceptionNotThrown
        -: 1449:                (   AssertionInfo const& info,
        -: 1450:                    AssertionReaction& reaction ) = 0;
        -: 1451:        virtual void handleUnexpectedInflightException
        -: 1452:                (   AssertionInfo const& info,
        -: 1453:                    std::string const& message,
        -: 1454:                    AssertionReaction& reaction ) = 0;
        -: 1455:        virtual void handleIncomplete
        -: 1456:                (   AssertionInfo const& info ) = 0;
        -: 1457:        virtual void handleNonExpr
        -: 1458:                (   AssertionInfo const &info,
        -: 1459:                    ResultWas::OfType resultType,
        -: 1460:                    AssertionReaction &reaction ) = 0;
        -: 1461:
        -: 1462:        virtual bool lastAssertionPassed() = 0;
        -: 1463:        virtual void assertionPassed() = 0;
        -: 1464:
        -: 1465:        // Deprecated, do not use:
        -: 1466:        virtual std::string getCurrentTestName() const = 0;
        -: 1467:        virtual const AssertionResult* getLastResult() const = 0;
        -: 1468:        virtual void exceptionEarlyReported() = 0;
        -: 1469:    };
        -: 1470:
        -: 1471:    IResultCapture& getResultCapture();
        -: 1472:}
        -: 1473:
        -: 1474:// end catch_interfaces_capture.h
        -: 1475:namespace Catch {
        -: 1476:
        -: 1477:    struct TestFailureException{};
        -: 1478:    struct AssertionResultData;
        -: 1479:    struct IResultCapture;
        -: 1480:    class RunContext;
        -: 1481:
        -: 1482:    class LazyExpression {
        -: 1483:        friend class AssertionHandler;
        -: 1484:        friend struct AssertionStats;
        -: 1485:        friend class RunContext;
        -: 1486:
        -: 1487:        ITransientExpression const* m_transientExpression = nullptr;
        -: 1488:        bool m_isNegated;
        -: 1489:    public:
        -: 1490:        LazyExpression( bool isNegated );
        -: 1491:        LazyExpression( LazyExpression const& other );
        -: 1492:        LazyExpression& operator = ( LazyExpression const& ) = delete;
        -: 1493:
        -: 1494:        explicit operator bool() const;
        -: 1495:
        -: 1496:        friend auto operator << ( std::ostream& os, LazyExpression const& lazyExpr ) -> std::ostream&;
        -: 1497:    };
        -: 1498:
    #####: 1499:    struct AssertionReaction {
        -: 1500:        bool shouldDebugBreak = false;
        -: 1501:        bool shouldThrow = false;
        -: 1502:    };
        -: 1503:
        -: 1504:    class AssertionHandler {
        -: 1505:        AssertionInfo m_assertionInfo;
        -: 1506:        AssertionReaction m_reaction;
        -: 1507:        bool m_completed = false;
        -: 1508:        IResultCapture& m_resultCapture;
        -: 1509:
        -: 1510:    public:
        -: 1511:        AssertionHandler
        -: 1512:            (   StringRef macroName,
        -: 1513:                SourceLineInfo const& lineInfo,
        -: 1514:                StringRef capturedExpression,
        -: 1515:                ResultDisposition::Flags resultDisposition );
    #####: 1516:        ~AssertionHandler() {
    #####: 1517:            if ( !m_completed ) {
    #####: 1518:                m_resultCapture.handleIncomplete( m_assertionInfo );
        -: 1519:            }
    #####: 1520:        }
        -: 1521:
        -: 1522:        template<typename T>
    #####: 1523:        void handleExpr( ExprLhs<T> const& expr ) {
    #####: 1524:            handleExpr( expr.makeUnaryExpr() );
    #####: 1525:        }
        -: 1526:        void handleExpr( ITransientExpression const& expr );
        -: 1527:
        -: 1528:        void handleMessage(ResultWas::OfType resultType, StringRef const& message);
        -: 1529:
        -: 1530:        void handleExceptionThrownAsExpected();
        -: 1531:        void handleUnexpectedExceptionNotThrown();
        -: 1532:        void handleExceptionNotThrownAsExpected();
        -: 1533:        void handleThrowingCallSkipped();
        -: 1534:        void handleUnexpectedInflightException();
        -: 1535:
        -: 1536:        void complete();
        -: 1537:        void setCompleted();
        -: 1538:
        -: 1539:        // query
        -: 1540:        auto allowThrows() const -> bool;
        -: 1541:    };
        -: 1542:
        -: 1543:    void handleExceptionMatchExpr( AssertionHandler& handler, std::string const& str, StringRef matcherString );
        -: 1544:
        -: 1545:} // namespace Catch
        -: 1546:
        -: 1547:// end catch_assertionhandler.h
        -: 1548:// start catch_message.h
        -: 1549:
        -: 1550:#include <string>
        -: 1551:
        -: 1552:namespace Catch {
        -: 1553:
    #####: 1554:    struct MessageInfo {
        -: 1555:        MessageInfo(    std::string const& _macroName,
        -: 1556:                        SourceLineInfo const& _lineInfo,
        -: 1557:                        ResultWas::OfType _type );
        -: 1558:
        -: 1559:        std::string macroName;
        -: 1560:        std::string message;
        -: 1561:        SourceLineInfo lineInfo;
        -: 1562:        ResultWas::OfType type;
        -: 1563:        unsigned int sequence;
        -: 1564:
        -: 1565:        bool operator == ( MessageInfo const& other ) const;
        -: 1566:        bool operator < ( MessageInfo const& other ) const;
        -: 1567:    private:
        -: 1568:        static unsigned int globalCount;
        -: 1569:    };
        -: 1570:
    #####: 1571:    struct MessageStream {
        -: 1572:
        -: 1573:        template<typename T>
        -: 1574:        MessageStream& operator << ( T const& value ) {
        -: 1575:            m_stream << value;
        -: 1576:            return *this;
        -: 1577:        }
        -: 1578:
        -: 1579:        ReusableStringStream m_stream;
        -: 1580:    };
        -: 1581:
    #####: 1582:    struct MessageBuilder : MessageStream {
        -: 1583:        MessageBuilder( std::string const& macroName,
        -: 1584:                        SourceLineInfo const& lineInfo,
        -: 1585:                        ResultWas::OfType type );
        -: 1586:
        -: 1587:        template<typename T>
    #####: 1588:        MessageBuilder& operator << ( T const& value ) {
    #####: 1589:            m_stream << value;
    #####: 1590:            return *this;
        -: 1591:        }
        -: 1592:
        -: 1593:        MessageInfo m_info;
        -: 1594:    };
        -: 1595:
        -: 1596:    class ScopedMessage {
        -: 1597:    public:
        -: 1598:        explicit ScopedMessage( MessageBuilder const& builder );
        -: 1599:        ~ScopedMessage();
        -: 1600:
        -: 1601:        MessageInfo m_info;
        -: 1602:    };
        -: 1603:
        -: 1604:} // end namespace Catch
        -: 1605:
        -: 1606:// end catch_message.h
        -: 1607:#if !defined(CATCH_CONFIG_DISABLE)
        -: 1608:
        -: 1609:#if !defined(CATCH_CONFIG_DISABLE_STRINGIFICATION)
        -: 1610:  #define CATCH_INTERNAL_STRINGIFY(...) #__VA_ARGS__
        -: 1611:#else
        -: 1612:  #define CATCH_INTERNAL_STRINGIFY(...) "Disabled by CATCH_CONFIG_DISABLE_STRINGIFICATION"
        -: 1613:#endif
        -: 1614:
        -: 1615:#if defined(CATCH_CONFIG_FAST_COMPILE)
        -: 1616:
        -: 1617:///////////////////////////////////////////////////////////////////////////////
        -: 1618:// Another way to speed-up compilation is to omit local try-catch for REQUIRE*
        -: 1619:// macros.
        -: 1620:#define INTERNAL_CATCH_TRY
        -: 1621:#define INTERNAL_CATCH_CATCH( capturer )
        -: 1622:
        -: 1623:#else // CATCH_CONFIG_FAST_COMPILE
        -: 1624:
        -: 1625:#define INTERNAL_CATCH_TRY try
        -: 1626:#define INTERNAL_CATCH_CATCH( handler ) catch(...) { handler.handleUnexpectedInflightException(); }
        -: 1627:
        -: 1628:#endif
        -: 1629:
        -: 1630:#define INTERNAL_CATCH_REACT( handler ) handler.complete();
        -: 1631:
        -: 1632:///////////////////////////////////////////////////////////////////////////////
        -: 1633:#define INTERNAL_CATCH_TEST( macroName, resultDisposition, ... ) \
        -: 1634:    do { \
        -: 1635:        Catch::AssertionHandler catchAssertionHandler( macroName, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(__VA_ARGS__), resultDisposition ); \
        -: 1636:        INTERNAL_CATCH_TRY { \
        -: 1637:            CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS \
        -: 1638:            catchAssertionHandler.handleExpr( Catch::Decomposer() <= __VA_ARGS__ ); \
        -: 1639:            CATCH_INTERNAL_UNSUPPRESS_PARENTHESES_WARNINGS \
        -: 1640:        } INTERNAL_CATCH_CATCH( catchAssertionHandler ) \
        -: 1641:        INTERNAL_CATCH_REACT( catchAssertionHandler ) \
        -: 1642:    } while( (void)0, false && static_cast<bool>( !!(__VA_ARGS__) ) ) // the expression here is never evaluated at runtime but it forces the compiler to give it a look
        -: 1643:    // The double negation silences MSVC's C4800 warning, the static_cast forces short-circuit evaluation if the type has overloaded &&.
        -: 1644:
        -: 1645:///////////////////////////////////////////////////////////////////////////////
        -: 1646:#define INTERNAL_CATCH_IF( macroName, resultDisposition, ... ) \
        -: 1647:    INTERNAL_CATCH_TEST( macroName, resultDisposition, __VA_ARGS__ ); \
        -: 1648:    if( Catch::getResultCapture().lastAssertionPassed() )
        -: 1649:
        -: 1650:///////////////////////////////////////////////////////////////////////////////
        -: 1651:#define INTERNAL_CATCH_ELSE( macroName, resultDisposition, ... ) \
        -: 1652:    INTERNAL_CATCH_TEST( macroName, resultDisposition, __VA_ARGS__ ); \
        -: 1653:    if( !Catch::getResultCapture().lastAssertionPassed() )
        -: 1654:
        -: 1655:///////////////////////////////////////////////////////////////////////////////
        -: 1656:#define INTERNAL_CATCH_NO_THROW( macroName, resultDisposition, ... ) \
        -: 1657:    do { \
        -: 1658:        Catch::AssertionHandler catchAssertionHandler( macroName, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(__VA_ARGS__), resultDisposition ); \
        -: 1659:        try { \
        -: 1660:            static_cast<void>(__VA_ARGS__); \
        -: 1661:            catchAssertionHandler.handleExceptionNotThrownAsExpected(); \
        -: 1662:        } \
        -: 1663:        catch( ... ) { \
        -: 1664:            catchAssertionHandler.handleUnexpectedInflightException(); \
        -: 1665:        } \
        -: 1666:        INTERNAL_CATCH_REACT( catchAssertionHandler ) \
        -: 1667:    } while( false )
        -: 1668:
        -: 1669:///////////////////////////////////////////////////////////////////////////////
        -: 1670:#define INTERNAL_CATCH_THROWS( macroName, resultDisposition, ... ) \
        -: 1671:    do { \
        -: 1672:        Catch::AssertionHandler catchAssertionHandler( macroName, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(__VA_ARGS__), resultDisposition); \
        -: 1673:        if( catchAssertionHandler.allowThrows() ) \
        -: 1674:            try { \
        -: 1675:                static_cast<void>(__VA_ARGS__); \
        -: 1676:                catchAssertionHandler.handleUnexpectedExceptionNotThrown(); \
        -: 1677:            } \
        -: 1678:            catch( ... ) { \
        -: 1679:                catchAssertionHandler.handleExceptionThrownAsExpected(); \
        -: 1680:            } \
        -: 1681:        else \
        -: 1682:            catchAssertionHandler.handleThrowingCallSkipped(); \
        -: 1683:        INTERNAL_CATCH_REACT( catchAssertionHandler ) \
        -: 1684:    } while( false )
        -: 1685:
        -: 1686:///////////////////////////////////////////////////////////////////////////////
        -: 1687:#define INTERNAL_CATCH_THROWS_AS( macroName, exceptionType, resultDisposition, expr ) \
        -: 1688:    do { \
        -: 1689:        Catch::AssertionHandler catchAssertionHandler( macroName, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(expr) ", " CATCH_INTERNAL_STRINGIFY(exceptionType), resultDisposition ); \
        -: 1690:        if( catchAssertionHandler.allowThrows() ) \
        -: 1691:            try { \
        -: 1692:                static_cast<void>(expr); \
        -: 1693:                catchAssertionHandler.handleUnexpectedExceptionNotThrown(); \
        -: 1694:            } \
        -: 1695:            catch( exceptionType const& ) { \
        -: 1696:                catchAssertionHandler.handleExceptionThrownAsExpected(); \
        -: 1697:            } \
        -: 1698:            catch( ... ) { \
        -: 1699:                catchAssertionHandler.handleUnexpectedInflightException(); \
        -: 1700:            } \
        -: 1701:        else \
        -: 1702:            catchAssertionHandler.handleThrowingCallSkipped(); \
        -: 1703:        INTERNAL_CATCH_REACT( catchAssertionHandler ) \
        -: 1704:    } while( false )
        -: 1705:
        -: 1706:///////////////////////////////////////////////////////////////////////////////
        -: 1707:#define INTERNAL_CATCH_MSG( macroName, messageType, resultDisposition, ... ) \
        -: 1708:    do { \
        -: 1709:        Catch::AssertionHandler catchAssertionHandler( macroName, CATCH_INTERNAL_LINEINFO, "", resultDisposition ); \
        -: 1710:        catchAssertionHandler.handleMessage( messageType, ( Catch::MessageStream() << __VA_ARGS__ + ::Catch::StreamEndStop() ).m_stream.str() ); \
        -: 1711:        INTERNAL_CATCH_REACT( catchAssertionHandler ) \
        -: 1712:    } while( false )
        -: 1713:
        -: 1714:///////////////////////////////////////////////////////////////////////////////
        -: 1715:#define INTERNAL_CATCH_INFO( macroName, log ) \
        -: 1716:    Catch::ScopedMessage INTERNAL_CATCH_UNIQUE_NAME( scopedMessage )( Catch::MessageBuilder( macroName, CATCH_INTERNAL_LINEINFO, Catch::ResultWas::Info ) << log );
        -: 1717:
        -: 1718:///////////////////////////////////////////////////////////////////////////////
        -: 1719:// Although this is matcher-based, it can be used with just a string
        -: 1720:#define INTERNAL_CATCH_THROWS_STR_MATCHES( macroName, resultDisposition, matcher, ... ) \
        -: 1721:    do { \
        -: 1722:        Catch::AssertionHandler catchAssertionHandler( macroName, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(__VA_ARGS__) ", " CATCH_INTERNAL_STRINGIFY(matcher), resultDisposition ); \
        -: 1723:        if( catchAssertionHandler.allowThrows() ) \
        -: 1724:            try { \
        -: 1725:                static_cast<void>(__VA_ARGS__); \
        -: 1726:                catchAssertionHandler.handleUnexpectedExceptionNotThrown(); \
        -: 1727:            } \
        -: 1728:            catch( ... ) { \
        -: 1729:                Catch::handleExceptionMatchExpr( catchAssertionHandler, matcher, #matcher ); \
        -: 1730:            } \
        -: 1731:        else \
        -: 1732:            catchAssertionHandler.handleThrowingCallSkipped(); \
        -: 1733:        INTERNAL_CATCH_REACT( catchAssertionHandler ) \
        -: 1734:    } while( false )
        -: 1735:
        -: 1736:#endif // CATCH_CONFIG_DISABLE
        -: 1737:
        -: 1738:// end catch_capture.hpp
        -: 1739:// start catch_section.h
        -: 1740:
        -: 1741:// start catch_section_info.h
        -: 1742:
        -: 1743:// start catch_totals.h
        -: 1744:
        -: 1745:#include <cstddef>
        -: 1746:
        -: 1747:namespace Catch {
        -: 1748:
    #####: 1749:    struct Counts {
        -: 1750:        Counts operator - ( Counts const& other ) const;
        -: 1751:        Counts& operator += ( Counts const& other );
        -: 1752:
        -: 1753:        std::size_t total() const;
        -: 1754:        bool allPassed() const;
        -: 1755:        bool allOk() const;
        -: 1756:
        -: 1757:        std::size_t passed = 0;
        -: 1758:        std::size_t failed = 0;
        -: 1759:        std::size_t failedButOk = 0;
        -: 1760:    };
        -: 1761:
    #####: 1762:    struct Totals {
        -: 1763:
        -: 1764:        Totals operator - ( Totals const& other ) const;
        -: 1765:        Totals& operator += ( Totals const& other );
        -: 1766:
        -: 1767:        Totals delta( Totals const& prevTotals ) const;
        -: 1768:
        -: 1769:        int error = 0;
        -: 1770:        Counts assertions;
        -: 1771:        Counts testCases;
        -: 1772:    };
        -: 1773:}
        -: 1774:
        -: 1775:// end catch_totals.h
        -: 1776:#include <string>
        -: 1777:
        -: 1778:namespace Catch {
        -: 1779:
    #####: 1780:    struct SectionInfo {
        -: 1781:        SectionInfo
        -: 1782:            (   SourceLineInfo const& _lineInfo,
        -: 1783:                std::string const& _name,
        -: 1784:                std::string const& _description = std::string() );
        -: 1785:
        -: 1786:        std::string name;
        -: 1787:        std::string description;
        -: 1788:        SourceLineInfo lineInfo;
        -: 1789:    };
        -: 1790:
    #####: 1791:    struct SectionEndInfo {
        -: 1792:        SectionEndInfo( SectionInfo const& _sectionInfo, Counts const& _prevAssertions, double _durationInSeconds );
        -: 1793:
        -: 1794:        SectionInfo sectionInfo;
        -: 1795:        Counts prevAssertions;
        -: 1796:        double durationInSeconds;
        -: 1797:    };
        -: 1798:
        -: 1799:} // end namespace Catch
        -: 1800:
        -: 1801:// end catch_section_info.h
        -: 1802:// start catch_timer.h
        -: 1803:
        -: 1804:#include <cstdint>
        -: 1805:
        -: 1806:namespace Catch {
        -: 1807:
        -: 1808:    auto getCurrentNanosecondsSinceEpoch() -> uint64_t;
        -: 1809:    auto getEstimatedClockResolution() -> uint64_t;
        -: 1810:
    #####: 1811:    class Timer {
        -: 1812:        uint64_t m_nanoseconds = 0;
        -: 1813:    public:
        -: 1814:        void start();
        -: 1815:        auto getElapsedNanoseconds() const -> uint64_t;
        -: 1816:        auto getElapsedMicroseconds() const -> uint64_t;
        -: 1817:        auto getElapsedMilliseconds() const -> unsigned int;
        -: 1818:        auto getElapsedSeconds() const -> double;
        -: 1819:    };
        -: 1820:
        -: 1821:} // namespace Catch
        -: 1822:
        -: 1823:// end catch_timer.h
        -: 1824:#include <string>
        -: 1825:
        -: 1826:namespace Catch {
        -: 1827:
        -: 1828:    class Section : NonCopyable {
        -: 1829:    public:
        -: 1830:        Section( SectionInfo const& info );
        -: 1831:        ~Section();
        -: 1832:
        -: 1833:        // This indicates whether the section should be executed or not
        -: 1834:        explicit operator bool() const;
        -: 1835:
        -: 1836:    private:
        -: 1837:        SectionInfo m_info;
        -: 1838:
        -: 1839:        std::string m_name;
        -: 1840:        Counts m_assertions;
        -: 1841:        bool m_sectionIncluded;
        -: 1842:        Timer m_timer;
        -: 1843:    };
        -: 1844:
        -: 1845:} // end namespace Catch
        -: 1846:
        -: 1847:    #define INTERNAL_CATCH_SECTION( ... ) \
        -: 1848:        if( Catch::Section const& INTERNAL_CATCH_UNIQUE_NAME( catch_internal_Section ) = Catch::SectionInfo( CATCH_INTERNAL_LINEINFO, __VA_ARGS__ ) )
        -: 1849:
        -: 1850:// end catch_section.h
        -: 1851:// start catch_benchmark.h
        -: 1852:
        -: 1853:#include <cstdint>
        -: 1854:#include <string>
        -: 1855:
        -: 1856:namespace Catch {
        -: 1857:
        -: 1858:    class BenchmarkLooper {
        -: 1859:
        -: 1860:        std::string m_name;
        -: 1861:        std::size_t m_count = 0;
        -: 1862:        std::size_t m_iterationsToRun = 1;
        -: 1863:        uint64_t m_resolution;
        -: 1864:        Timer m_timer;
        -: 1865:
        -: 1866:        static auto getResolution() -> uint64_t;
        -: 1867:    public:
        -: 1868:        // Keep most of this inline as it's on the code path that is being timed
        -: 1869:        BenchmarkLooper( StringRef name )
        -: 1870:        :   m_name( name ),
        -: 1871:            m_resolution( getResolution() )
        -: 1872:        {
        -: 1873:            reportStart();
        -: 1874:            m_timer.start();
        -: 1875:        }
        -: 1876:
        -: 1877:        explicit operator bool() {
        -: 1878:            if( m_count < m_iterationsToRun )
        -: 1879:                return true;
        -: 1880:            return needsMoreIterations();
        -: 1881:        }
        -: 1882:
        -: 1883:        void increment() {
        -: 1884:            ++m_count;
        -: 1885:        }
        -: 1886:
        -: 1887:        void reportStart();
        -: 1888:        auto needsMoreIterations() -> bool;
        -: 1889:    };
        -: 1890:
        -: 1891:} // end namespace Catch
        -: 1892:
        -: 1893:#define BENCHMARK( name ) \
        -: 1894:    for( Catch::BenchmarkLooper looper( name ); looper; looper.increment() )
        -: 1895:
        -: 1896:// end catch_benchmark.h
        -: 1897:// start catch_interfaces_exception.h
        -: 1898:
        -: 1899:// start catch_interfaces_registry_hub.h
        -: 1900:
        -: 1901:#include <string>
        -: 1902:#include <memory>
        -: 1903:
        -: 1904:namespace Catch {
        -: 1905:
        -: 1906:    class TestCase;
        -: 1907:    struct ITestCaseRegistry;
        -: 1908:    struct IExceptionTranslatorRegistry;
        -: 1909:    struct IExceptionTranslator;
        -: 1910:    struct IReporterRegistry;
        -: 1911:    struct IReporterFactory;
        -: 1912:    struct ITagAliasRegistry;
        -: 1913:    class StartupExceptionRegistry;
        -: 1914:
        -: 1915:    using IReporterFactoryPtr = std::shared_ptr<IReporterFactory>;
        -: 1916:
    #####: 1917:    struct IRegistryHub {
        -: 1918:        virtual ~IRegistryHub();
        -: 1919:
        -: 1920:        virtual IReporterRegistry const& getReporterRegistry() const = 0;
        -: 1921:        virtual ITestCaseRegistry const& getTestCaseRegistry() const = 0;
        -: 1922:        virtual ITagAliasRegistry const& getTagAliasRegistry() const = 0;
        -: 1923:
        -: 1924:        virtual IExceptionTranslatorRegistry& getExceptionTranslatorRegistry() = 0;
        -: 1925:
        -: 1926:        virtual StartupExceptionRegistry const& getStartupExceptionRegistry() const = 0;
        -: 1927:    };
        -: 1928:
    #####: 1929:    struct IMutableRegistryHub {
        -: 1930:        virtual ~IMutableRegistryHub();
        -: 1931:        virtual void registerReporter( std::string const& name, IReporterFactoryPtr const& factory ) = 0;
        -: 1932:        virtual void registerListener( IReporterFactoryPtr const& factory ) = 0;
        -: 1933:        virtual void registerTest( TestCase const& testInfo ) = 0;
        -: 1934:        virtual void registerTranslator( const IExceptionTranslator* translator ) = 0;
        -: 1935:        virtual void registerTagAlias( std::string const& alias, std::string const& tag, SourceLineInfo const& lineInfo ) = 0;
        -: 1936:        virtual void registerStartupException() noexcept = 0;
        -: 1937:    };
        -: 1938:
        -: 1939:    IRegistryHub& getRegistryHub();
        -: 1940:    IMutableRegistryHub& getMutableRegistryHub();
        -: 1941:    void cleanUp();
        -: 1942:    std::string translateActiveException();
        -: 1943:
        -: 1944:}
        -: 1945:
        -: 1946:// end catch_interfaces_registry_hub.h
        -: 1947:#if defined(CATCH_CONFIG_DISABLE)
        -: 1948:    #define INTERNAL_CATCH_TRANSLATE_EXCEPTION_NO_REG( translatorName, signature) \
        -: 1949:        static std::string translatorName( signature )
        -: 1950:#endif
        -: 1951:
        -: 1952:#include <exception>
        -: 1953:#include <string>
        -: 1954:#include <vector>
        -: 1955:
        -: 1956:namespace Catch {
        -: 1957:    using exceptionTranslateFunction = std::string(*)();
        -: 1958:
        -: 1959:    struct IExceptionTranslator;
        -: 1960:    using ExceptionTranslators = std::vector<std::unique_ptr<IExceptionTranslator const>>;
        -: 1961:
    #####: 1962:    struct IExceptionTranslator {
        -: 1963:        virtual ~IExceptionTranslator();
        -: 1964:        virtual std::string translate( ExceptionTranslators::const_iterator it, ExceptionTranslators::const_iterator itEnd ) const = 0;
        -: 1965:    };
        -: 1966:
    #####: 1967:    struct IExceptionTranslatorRegistry {
        -: 1968:        virtual ~IExceptionTranslatorRegistry();
        -: 1969:
        -: 1970:        virtual std::string translateActiveException() const = 0;
        -: 1971:    };
        -: 1972:
        -: 1973:    class ExceptionTranslatorRegistrar {
        -: 1974:        template<typename T>
        -: 1975:        class ExceptionTranslator : public IExceptionTranslator {
        -: 1976:        public:
        -: 1977:
        -: 1978:            ExceptionTranslator( std::string(*translateFunction)( T& ) )
        -: 1979:            : m_translateFunction( translateFunction )
        -: 1980:            {}
        -: 1981:
        -: 1982:            std::string translate( ExceptionTranslators::const_iterator it, ExceptionTranslators::const_iterator itEnd ) const override {
        -: 1983:                try {
        -: 1984:                    if( it == itEnd )
        -: 1985:                        std::rethrow_exception(std::current_exception());
        -: 1986:                    else
        -: 1987:                        return (*it)->translate( it+1, itEnd );
        -: 1988:                }
        -: 1989:                catch( T& ex ) {
        -: 1990:                    return m_translateFunction( ex );
        -: 1991:                }
        -: 1992:            }
        -: 1993:
        -: 1994:        protected:
        -: 1995:            std::string(*m_translateFunction)( T& );
        -: 1996:        };
        -: 1997:
        -: 1998:    public:
        -: 1999:        template<typename T>
        -: 2000:        ExceptionTranslatorRegistrar( std::string(*translateFunction)( T& ) ) {
        -: 2001:            getMutableRegistryHub().registerTranslator
        -: 2002:                ( new ExceptionTranslator<T>( translateFunction ) );
        -: 2003:        }
        -: 2004:    };
        -: 2005:}
        -: 2006:
        -: 2007:///////////////////////////////////////////////////////////////////////////////
        -: 2008:#define INTERNAL_CATCH_TRANSLATE_EXCEPTION2( translatorName, signature ) \
        -: 2009:    static std::string translatorName( signature ); \
        -: 2010:    CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
        -: 2011:    namespace{ Catch::ExceptionTranslatorRegistrar INTERNAL_CATCH_UNIQUE_NAME( catch_internal_ExceptionRegistrar )( &translatorName ); } \
        -: 2012:    CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS \
        -: 2013:    static std::string translatorName( signature )
        -: 2014:
        -: 2015:#define INTERNAL_CATCH_TRANSLATE_EXCEPTION( signature ) INTERNAL_CATCH_TRANSLATE_EXCEPTION2( INTERNAL_CATCH_UNIQUE_NAME( catch_internal_ExceptionTranslator ), signature )
        -: 2016:
        -: 2017:// end catch_interfaces_exception.h
        -: 2018:// start catch_approx.h
        -: 2019:
        -: 2020:#include <type_traits>
        -: 2021:#include <stdexcept>
        -: 2022:
        -: 2023:namespace Catch {
        -: 2024:namespace Detail {
        -: 2025:
        -: 2026:    class Approx {
        -: 2027:    private:
        -: 2028:        bool equalityComparisonImpl(double other) const;
        -: 2029:
        -: 2030:    public:
        -: 2031:        explicit Approx ( double value );
        -: 2032:
        -: 2033:        static Approx custom();
        -: 2034:
        -: 2035:        template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>
        -: 2036:        Approx operator()( T const& value ) {
        -: 2037:            Approx approx( static_cast<double>(value) );
        -: 2038:            approx.epsilon( m_epsilon );
        -: 2039:            approx.margin( m_margin );
        -: 2040:            approx.scale( m_scale );
        -: 2041:            return approx;
        -: 2042:        }
        -: 2043:
        -: 2044:        template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>
    #####: 2045:        explicit Approx( T const& value ): Approx(static_cast<double>(value))
    #####: 2046:        {}
        -: 2047:
        -: 2048:        template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>
        -: 2049:        friend bool operator == ( const T& lhs, Approx const& rhs ) {
        -: 2050:            auto lhs_v = static_cast<double>(lhs);
        -: 2051:            return rhs.equalityComparisonImpl(lhs_v);
        -: 2052:        }
        -: 2053:
        -: 2054:        template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>
        -: 2055:        friend bool operator == ( Approx const& lhs, const T& rhs ) {
        -: 2056:            return operator==( rhs, lhs );
        -: 2057:        }
        -: 2058:
        -: 2059:        template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>
        -: 2060:        friend bool operator != ( T const& lhs, Approx const& rhs ) {
        -: 2061:            return !operator==( lhs, rhs );
        -: 2062:        }
        -: 2063:
        -: 2064:        template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>
        -: 2065:        friend bool operator != ( Approx const& lhs, T const& rhs ) {
        -: 2066:            return !operator==( rhs, lhs );
        -: 2067:        }
        -: 2068:
        -: 2069:        template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>
        -: 2070:        friend bool operator <= ( T const& lhs, Approx const& rhs ) {
        -: 2071:            return static_cast<double>(lhs) < rhs.m_value || lhs == rhs;
        -: 2072:        }
        -: 2073:
        -: 2074:        template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>
        -: 2075:        friend bool operator <= ( Approx const& lhs, T const& rhs ) {
        -: 2076:            return lhs.m_value < static_cast<double>(rhs) || lhs == rhs;
        -: 2077:        }
        -: 2078:
        -: 2079:        template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>
        -: 2080:        friend bool operator >= ( T const& lhs, Approx const& rhs ) {
        -: 2081:            return static_cast<double>(lhs) > rhs.m_value || lhs == rhs;
        -: 2082:        }
        -: 2083:
        -: 2084:        template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>
        -: 2085:        friend bool operator >= ( Approx const& lhs, T const& rhs ) {
        -: 2086:            return lhs.m_value > static_cast<double>(rhs) || lhs == rhs;
        -: 2087:        }
        -: 2088:
        -: 2089:        template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>
        -: 2090:        Approx& epsilon( T const& newEpsilon ) {
        -: 2091:            double epsilonAsDouble = static_cast<double>(newEpsilon);
        -: 2092:            if( epsilonAsDouble < 0 || epsilonAsDouble > 1.0 ) {
        -: 2093:                throw std::domain_error
        -: 2094:                    (   "Invalid Approx::epsilon: " +
        -: 2095:                        Catch::Detail::stringify( epsilonAsDouble ) +
        -: 2096:                        ", Approx::epsilon has to be between 0 and 1" );
        -: 2097:            }
        -: 2098:            m_epsilon = epsilonAsDouble;
        -: 2099:            return *this;
        -: 2100:        }
        -: 2101:
        -: 2102:        template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>
        -: 2103:        Approx& margin( T const& newMargin ) {
        -: 2104:            double marginAsDouble = static_cast<double>(newMargin);
        -: 2105:            if( marginAsDouble < 0 ) {
        -: 2106:                throw std::domain_error
        -: 2107:                    (   "Invalid Approx::margin: " +
        -: 2108:                         Catch::Detail::stringify( marginAsDouble ) +
        -: 2109:                         ", Approx::Margin has to be non-negative." );
        -: 2110:
        -: 2111:            }
        -: 2112:            m_margin = marginAsDouble;
        -: 2113:            return *this;
        -: 2114:        }
        -: 2115:
        -: 2116:        template <typename T, typename = typename std::enable_if<std::is_constructible<double, T>::value>::type>
        -: 2117:        Approx& scale( T const& newScale ) {
        -: 2118:            m_scale = static_cast<double>(newScale);
        -: 2119:            return *this;
        -: 2120:        }
        -: 2121:
        -: 2122:        std::string toString() const;
        -: 2123:
        -: 2124:    private:
        -: 2125:        double m_epsilon;
        -: 2126:        double m_margin;
        -: 2127:        double m_scale;
        -: 2128:        double m_value;
        -: 2129:    };
        -: 2130:}
        -: 2131:
        -: 2132:template<>
        -: 2133:struct StringMaker<Catch::Detail::Approx> {
        -: 2134:    static std::string convert(Catch::Detail::Approx const& value);
        -: 2135:};
        -: 2136:
        -: 2137:} // end namespace Catch
        -: 2138:
        -: 2139:// end catch_approx.h
        -: 2140:// start catch_string_manip.h
        -: 2141:
        -: 2142:#include <string>
        -: 2143:#include <iosfwd>
        -: 2144:
        -: 2145:namespace Catch {
        -: 2146:
        -: 2147:    bool startsWith( std::string const& s, std::string const& prefix );
        -: 2148:    bool startsWith( std::string const& s, char prefix );
        -: 2149:    bool endsWith( std::string const& s, std::string const& suffix );
        -: 2150:    bool endsWith( std::string const& s, char suffix );
        -: 2151:    bool contains( std::string const& s, std::string const& infix );
        -: 2152:    void toLowerInPlace( std::string& s );
        -: 2153:    std::string toLower( std::string const& s );
        -: 2154:    std::string trim( std::string const& str );
        -: 2155:    bool replaceInPlace( std::string& str, std::string const& replaceThis, std::string const& withThis );
        -: 2156:
    #####: 2157:    struct pluralise {
        -: 2158:        pluralise( std::size_t count, std::string const& label );
        -: 2159:
        -: 2160:        friend std::ostream& operator << ( std::ostream& os, pluralise const& pluraliser );
        -: 2161:
        -: 2162:        std::size_t m_count;
        -: 2163:        std::string m_label;
        -: 2164:    };
        -: 2165:}
        -: 2166:
        -: 2167:// end catch_string_manip.h
        -: 2168:#ifndef CATCH_CONFIG_DISABLE_MATCHERS
        -: 2169:// start catch_capture_matchers.h
        -: 2170:
        -: 2171:// start catch_matchers.h
        -: 2172:
        -: 2173:#include <string>
        -: 2174:#include <vector>
        -: 2175:
        -: 2176:namespace Catch {
        -: 2177:namespace Matchers {
        -: 2178:    namespace Impl {
        -: 2179:
        -: 2180:        template<typename ArgT> struct MatchAllOf;
        -: 2181:        template<typename ArgT> struct MatchAnyOf;
        -: 2182:        template<typename ArgT> struct MatchNotOf;
        -: 2183:
    #####: 2184:        class MatcherUntypedBase {
        -: 2185:        public:
    #####: 2186:            MatcherUntypedBase() = default;
        -: 2187:            MatcherUntypedBase ( MatcherUntypedBase const& ) = default;
        -: 2188:            MatcherUntypedBase& operator = ( MatcherUntypedBase const& ) = delete;
        -: 2189:            std::string toString() const;
        -: 2190:
        -: 2191:        protected:
        -: 2192:            virtual ~MatcherUntypedBase();
        -: 2193:            virtual std::string describe() const = 0;
        -: 2194:            mutable std::string m_cachedToString;
        -: 2195:        };
        -: 2196:
        -: 2197:        template<typename ObjectT>
    #####: 2198:        struct MatcherMethod {
        -: 2199:            virtual bool match( ObjectT const& arg ) const = 0;
        -: 2200:        };
        -: 2201:        template<typename PtrT>
        -: 2202:        struct MatcherMethod<PtrT*> {
        -: 2203:            virtual bool match( PtrT* arg ) const = 0;
        -: 2204:        };
        -: 2205:
        -: 2206:        template<typename T>
    #####: 2207:        struct MatcherBase : MatcherUntypedBase, MatcherMethod<T> {
        -: 2208:
        -: 2209:            MatchAllOf<T> operator && ( MatcherBase const& other ) const;
        -: 2210:            MatchAnyOf<T> operator || ( MatcherBase const& other ) const;
        -: 2211:            MatchNotOf<T> operator ! () const;
        -: 2212:        };
        -: 2213:
        -: 2214:        template<typename ArgT>
        -: 2215:        struct MatchAllOf : MatcherBase<ArgT> {
        -: 2216:            bool match( ArgT const& arg ) const override {
        -: 2217:                for( auto matcher : m_matchers ) {
        -: 2218:                    if (!matcher->match(arg))
        -: 2219:                        return false;
        -: 2220:                }
        -: 2221:                return true;
        -: 2222:            }
        -: 2223:            std::string describe() const override {
        -: 2224:                std::string description;
        -: 2225:                description.reserve( 4 + m_matchers.size()*32 );
        -: 2226:                description += "( ";
        -: 2227:                bool first = true;
        -: 2228:                for( auto matcher : m_matchers ) {
        -: 2229:                    if( first )
        -: 2230:                        first = false;
        -: 2231:                    else
        -: 2232:                        description += " and ";
        -: 2233:                    description += matcher->toString();
        -: 2234:                }
        -: 2235:                description += " )";
        -: 2236:                return description;
        -: 2237:            }
        -: 2238:
        -: 2239:            MatchAllOf<ArgT>& operator && ( MatcherBase<ArgT> const& other ) {
        -: 2240:                m_matchers.push_back( &other );
        -: 2241:                return *this;
        -: 2242:            }
        -: 2243:
        -: 2244:            std::vector<MatcherBase<ArgT> const*> m_matchers;
        -: 2245:        };
        -: 2246:        template<typename ArgT>
        -: 2247:        struct MatchAnyOf : MatcherBase<ArgT> {
        -: 2248:
        -: 2249:            bool match( ArgT const& arg ) const override {
        -: 2250:                for( auto matcher : m_matchers ) {
        -: 2251:                    if (matcher->match(arg))
        -: 2252:                        return true;
        -: 2253:                }
        -: 2254:                return false;
        -: 2255:            }
        -: 2256:            std::string describe() const override {
        -: 2257:                std::string description;
        -: 2258:                description.reserve( 4 + m_matchers.size()*32 );
        -: 2259:                description += "( ";
        -: 2260:                bool first = true;
        -: 2261:                for( auto matcher : m_matchers ) {
        -: 2262:                    if( first )
        -: 2263:                        first = false;
        -: 2264:                    else
        -: 2265:                        description += " or ";
        -: 2266:                    description += matcher->toString();
        -: 2267:                }
        -: 2268:                description += " )";
        -: 2269:                return description;
        -: 2270:            }
        -: 2271:
        -: 2272:            MatchAnyOf<ArgT>& operator || ( MatcherBase<ArgT> const& other ) {
        -: 2273:                m_matchers.push_back( &other );
        -: 2274:                return *this;
        -: 2275:            }
        -: 2276:
        -: 2277:            std::vector<MatcherBase<ArgT> const*> m_matchers;
        -: 2278:        };
        -: 2279:
        -: 2280:        template<typename ArgT>
        -: 2281:        struct MatchNotOf : MatcherBase<ArgT> {
        -: 2282:
        -: 2283:            MatchNotOf( MatcherBase<ArgT> const& underlyingMatcher ) : m_underlyingMatcher( underlyingMatcher ) {}
        -: 2284:
        -: 2285:            bool match( ArgT const& arg ) const override {
        -: 2286:                return !m_underlyingMatcher.match( arg );
        -: 2287:            }
        -: 2288:
        -: 2289:            std::string describe() const override {
        -: 2290:                return "not " + m_underlyingMatcher.toString();
        -: 2291:            }
        -: 2292:            MatcherBase<ArgT> const& m_underlyingMatcher;
        -: 2293:        };
        -: 2294:
        -: 2295:        template<typename T>
        -: 2296:        MatchAllOf<T> MatcherBase<T>::operator && ( MatcherBase const& other ) const {
        -: 2297:            return MatchAllOf<T>() && *this && other;
        -: 2298:        }
        -: 2299:        template<typename T>
        -: 2300:        MatchAnyOf<T> MatcherBase<T>::operator || ( MatcherBase const& other ) const {
        -: 2301:            return MatchAnyOf<T>() || *this || other;
        -: 2302:        }
        -: 2303:        template<typename T>
        -: 2304:        MatchNotOf<T> MatcherBase<T>::operator ! () const {
        -: 2305:            return MatchNotOf<T>( *this );
        -: 2306:        }
        -: 2307:
        -: 2308:    } // namespace Impl
        -: 2309:
        -: 2310:} // namespace Matchers
        -: 2311:
        -: 2312:using namespace Matchers;
        -: 2313:using Matchers::Impl::MatcherBase;
        -: 2314:
        -: 2315:} // namespace Catch
        -: 2316:
        -: 2317:// end catch_matchers.h
        -: 2318:// start catch_matchers_floating.h
        -: 2319:
        -: 2320:#include <type_traits>
        -: 2321:#include <cmath>
        -: 2322:
        -: 2323:namespace Catch {
        -: 2324:namespace Matchers {
        -: 2325:
        -: 2326:    namespace Floating {
        -: 2327:
        -: 2328:        enum class FloatingPointKind : uint8_t;
        -: 2329:
    #####: 2330:        struct WithinAbsMatcher : MatcherBase<double> {
        -: 2331:            WithinAbsMatcher(double target, double margin);
        -: 2332:            bool match(double const& matchee) const override;
        -: 2333:            std::string describe() const override;
        -: 2334:        private:
        -: 2335:            double m_target;
        -: 2336:            double m_margin;
        -: 2337:        };
        -: 2338:
    #####: 2339:        struct WithinUlpsMatcher : MatcherBase<double> {
        -: 2340:            WithinUlpsMatcher(double target, int ulps, FloatingPointKind baseType);
        -: 2341:            bool match(double const& matchee) const override;
        -: 2342:            std::string describe() const override;
        -: 2343:        private:
        -: 2344:            double m_target;
        -: 2345:            int m_ulps;
        -: 2346:            FloatingPointKind m_type;
        -: 2347:        };
        -: 2348:
        -: 2349:    } // namespace Floating
        -: 2350:
        -: 2351:    // The following functions create the actual matcher objects.
        -: 2352:    // This allows the types to be inferred
        -: 2353:    Floating::WithinUlpsMatcher WithinULP(double target, int maxUlpDiff);
        -: 2354:    Floating::WithinUlpsMatcher WithinULP(float target, int maxUlpDiff);
        -: 2355:    Floating::WithinAbsMatcher WithinAbs(double target, double margin);
        -: 2356:
        -: 2357:} // namespace Matchers
        -: 2358:} // namespace Catch
        -: 2359:
        -: 2360:// end catch_matchers_floating.h
        -: 2361:// start catch_matchers_string.h
        -: 2362:
        -: 2363:#include <string>
        -: 2364:
        -: 2365:namespace Catch {
        -: 2366:namespace Matchers {
        -: 2367:
        -: 2368:    namespace StdString {
        -: 2369:
    #####: 2370:        struct CasedString
        -: 2371:        {
        -: 2372:            CasedString( std::string const& str, CaseSensitive::Choice caseSensitivity );
        -: 2373:            std::string adjustString( std::string const& str ) const;
        -: 2374:            std::string caseSensitivitySuffix() const;
        -: 2375:
        -: 2376:            CaseSensitive::Choice m_caseSensitivity;
        -: 2377:            std::string m_str;
        -: 2378:        };
        -: 2379:
    #####: 2380:        struct StringMatcherBase : MatcherBase<std::string> {
        -: 2381:            StringMatcherBase( std::string const& operation, CasedString const& comparator );
        -: 2382:            std::string describe() const override;
        -: 2383:
        -: 2384:            CasedString m_comparator;
        -: 2385:            std::string m_operation;
        -: 2386:        };
        -: 2387:
    #####: 2388:        struct EqualsMatcher : StringMatcherBase {
        -: 2389:            EqualsMatcher( CasedString const& comparator );
        -: 2390:            bool match( std::string const& source ) const override;
        -: 2391:        };
    #####: 2392:        struct ContainsMatcher : StringMatcherBase {
        -: 2393:            ContainsMatcher( CasedString const& comparator );
        -: 2394:            bool match( std::string const& source ) const override;
        -: 2395:        };
    #####: 2396:        struct StartsWithMatcher : StringMatcherBase {
        -: 2397:            StartsWithMatcher( CasedString const& comparator );
        -: 2398:            bool match( std::string const& source ) const override;
        -: 2399:        };
    #####: 2400:        struct EndsWithMatcher : StringMatcherBase {
        -: 2401:            EndsWithMatcher( CasedString const& comparator );
        -: 2402:            bool match( std::string const& source ) const override;
        -: 2403:        };
        -: 2404:
    #####: 2405:        struct RegexMatcher : MatcherBase<std::string> {
        -: 2406:            RegexMatcher( std::string regex, CaseSensitive::Choice caseSensitivity );
        -: 2407:            bool match( std::string const& matchee ) const override;
        -: 2408:            std::string describe() const override;
        -: 2409:
        -: 2410:        private:
        -: 2411:            std::string m_regex;
        -: 2412:            CaseSensitive::Choice m_caseSensitivity;
        -: 2413:        };
        -: 2414:
        -: 2415:    } // namespace StdString
        -: 2416:
        -: 2417:    // The following functions create the actual matcher objects.
        -: 2418:    // This allows the types to be inferred
        -: 2419:
        -: 2420:    StdString::EqualsMatcher Equals( std::string const& str, CaseSensitive::Choice caseSensitivity = CaseSensitive::Yes );
        -: 2421:    StdString::ContainsMatcher Contains( std::string const& str, CaseSensitive::Choice caseSensitivity = CaseSensitive::Yes );
        -: 2422:    StdString::EndsWithMatcher EndsWith( std::string const& str, CaseSensitive::Choice caseSensitivity = CaseSensitive::Yes );
        -: 2423:    StdString::StartsWithMatcher StartsWith( std::string const& str, CaseSensitive::Choice caseSensitivity = CaseSensitive::Yes );
        -: 2424:    StdString::RegexMatcher Matches( std::string const& regex, CaseSensitive::Choice caseSensitivity = CaseSensitive::Yes );
        -: 2425:
        -: 2426:} // namespace Matchers
        -: 2427:} // namespace Catch
        -: 2428:
        -: 2429:// end catch_matchers_string.h
        -: 2430:// start catch_matchers_vector.h
        -: 2431:
        -: 2432:#include <algorithm>
        -: 2433:
        -: 2434:namespace Catch {
        -: 2435:namespace Matchers {
        -: 2436:
        -: 2437:    namespace Vector {
        -: 2438:        namespace Detail {
        -: 2439:            template <typename InputIterator, typename T>
        -: 2440:            size_t count(InputIterator first, InputIterator last, T const& item) {
        -: 2441:                size_t cnt = 0;
        -: 2442:                for (; first != last; ++first) {
        -: 2443:                    if (*first == item) {
        -: 2444:                        ++cnt;
        -: 2445:                    }
        -: 2446:                }
        -: 2447:                return cnt;
        -: 2448:            }
        -: 2449:            template <typename InputIterator, typename T>
        -: 2450:            bool contains(InputIterator first, InputIterator last, T const& item) {
        -: 2451:                for (; first != last; ++first) {
        -: 2452:                    if (*first == item) {
        -: 2453:                        return true;
        -: 2454:                    }
        -: 2455:                }
        -: 2456:                return false;
        -: 2457:            }
        -: 2458:        }
        -: 2459:
        -: 2460:        template<typename T>
        -: 2461:        struct ContainsElementMatcher : MatcherBase<std::vector<T>> {
        -: 2462:
        -: 2463:            ContainsElementMatcher(T const &comparator) : m_comparator( comparator) {}
        -: 2464:
        -: 2465:            bool match(std::vector<T> const &v) const override {
        -: 2466:                for (auto const& el : v) {
        -: 2467:                    if (el == m_comparator) {
        -: 2468:                        return true;
        -: 2469:                    }
        -: 2470:                }
        -: 2471:                return false;
        -: 2472:            }
        -: 2473:
        -: 2474:            std::string describe() const override {
        -: 2475:                return "Contains: " + ::Catch::Detail::stringify( m_comparator );
        -: 2476:            }
        -: 2477:
        -: 2478:            T const& m_comparator;
        -: 2479:        };
        -: 2480:
        -: 2481:        template<typename T>
        -: 2482:        struct ContainsMatcher : MatcherBase<std::vector<T>> {
        -: 2483:
        -: 2484:            ContainsMatcher(std::vector<T> const &comparator) : m_comparator( comparator ) {}
        -: 2485:
        -: 2486:            bool match(std::vector<T> const &v) const override {
        -: 2487:                // !TBD: see note in EqualsMatcher
        -: 2488:                if (m_comparator.size() > v.size())
        -: 2489:                    return false;
        -: 2490:                for (auto const& comparator : m_comparator) {
        -: 2491:                    auto present = false;
        -: 2492:                    for (const auto& el : v) {
        -: 2493:                        if (el == comparator) {
        -: 2494:                            present = true;
        -: 2495:                            break;
        -: 2496:                        }
        -: 2497:                    }
        -: 2498:                    if (!present) {
        -: 2499:                        return false;
        -: 2500:                    }
        -: 2501:                }
        -: 2502:                return true;
        -: 2503:            }
        -: 2504:            std::string describe() const override {
        -: 2505:                return "Contains: " + ::Catch::Detail::stringify( m_comparator );
        -: 2506:            }
        -: 2507:
        -: 2508:            std::vector<T> const& m_comparator;
        -: 2509:        };
        -: 2510:
        -: 2511:        template<typename T>
        -: 2512:        struct EqualsMatcher : MatcherBase<std::vector<T>> {
        -: 2513:
        -: 2514:            EqualsMatcher(std::vector<T> const &comparator) : m_comparator( comparator ) {}
        -: 2515:
        -: 2516:            bool match(std::vector<T> const &v) const override {
        -: 2517:                // !TBD: This currently works if all elements can be compared using !=
        -: 2518:                // - a more general approach would be via a compare template that defaults
        -: 2519:                // to using !=. but could be specialised for, e.g. std::vector<T> etc
        -: 2520:                // - then just call that directly
        -: 2521:                if (m_comparator.size() != v.size())
        -: 2522:                    return false;
        -: 2523:                for (std::size_t i = 0; i < v.size(); ++i)
        -: 2524:                    if (m_comparator[i] != v[i])
        -: 2525:                        return false;
        -: 2526:                return true;
        -: 2527:            }
        -: 2528:            std::string describe() const override {
        -: 2529:                return "Equals: " + ::Catch::Detail::stringify( m_comparator );
        -: 2530:            }
        -: 2531:            std::vector<T> const& m_comparator;
        -: 2532:        };
        -: 2533:
        -: 2534:        template<typename T>
        -: 2535:        struct UnorderedEqualsMatcher : MatcherBase<std::vector<T>> {
        -: 2536:            UnorderedEqualsMatcher(std::vector<T> const& target) : m_target(target) {}
        -: 2537:            bool match(std::vector<T> const& vec) const override {
        -: 2538:                // Note: This is a reimplementation of std::is_permutation,
        -: 2539:                //       because I don't want to include <algorithm> inside the common path
        -: 2540:                if (m_target.size() != vec.size()) {
        -: 2541:                    return false;
        -: 2542:                }
        -: 2543:                auto lfirst = m_target.begin(), llast = m_target.end();
        -: 2544:                auto rfirst = vec.begin(), rlast = vec.end();
        -: 2545:                // Cut common prefix to optimize checking of permuted parts
        -: 2546:                while (lfirst != llast && *lfirst != *rfirst) {
        -: 2547:                    ++lfirst; ++rfirst;
        -: 2548:                }
        -: 2549:                if (lfirst == llast) {
        -: 2550:                    return true;
        -: 2551:                }
        -: 2552:
        -: 2553:                for (auto mid = lfirst; mid != llast; ++mid) {
        -: 2554:                    // Skip already counted items
        -: 2555:                    if (Detail::contains(lfirst, mid, *mid)) {
        -: 2556:                        continue;
        -: 2557:                    }
        -: 2558:                    size_t num_vec = Detail::count(rfirst, rlast, *mid);
        -: 2559:                    if (num_vec == 0 || Detail::count(lfirst, llast, *mid) != num_vec) {
        -: 2560:                        return false;
        -: 2561:                    }
        -: 2562:                }
        -: 2563:
        -: 2564:                return true;
        -: 2565:            }
        -: 2566:
        -: 2567:            std::string describe() const override {
        -: 2568:                return "UnorderedEquals: " + ::Catch::Detail::stringify(m_target);
        -: 2569:            }
        -: 2570:        private:
        -: 2571:            std::vector<T> const& m_target;
        -: 2572:        };
        -: 2573:
        -: 2574:    } // namespace Vector
        -: 2575:
        -: 2576:    // The following functions create the actual matcher objects.
        -: 2577:    // This allows the types to be inferred
        -: 2578:
        -: 2579:    template<typename T>
        -: 2580:    Vector::ContainsMatcher<T> Contains( std::vector<T> const& comparator ) {
        -: 2581:        return Vector::ContainsMatcher<T>( comparator );
        -: 2582:    }
        -: 2583:
        -: 2584:    template<typename T>
        -: 2585:    Vector::ContainsElementMatcher<T> VectorContains( T const& comparator ) {
        -: 2586:        return Vector::ContainsElementMatcher<T>( comparator );
        -: 2587:    }
        -: 2588:
        -: 2589:    template<typename T>
        -: 2590:    Vector::EqualsMatcher<T> Equals( std::vector<T> const& comparator ) {
        -: 2591:        return Vector::EqualsMatcher<T>( comparator );
        -: 2592:    }
        -: 2593:
        -: 2594:    template<typename T>
        -: 2595:    Vector::UnorderedEqualsMatcher<T> UnorderedEquals(std::vector<T> const& target) {
        -: 2596:        return Vector::UnorderedEqualsMatcher<T>(target);
        -: 2597:    }
        -: 2598:
        -: 2599:} // namespace Matchers
        -: 2600:} // namespace Catch
        -: 2601:
        -: 2602:// end catch_matchers_vector.h
        -: 2603:namespace Catch {
        -: 2604:
        -: 2605:    template<typename ArgT, typename MatcherT>
    #####: 2606:    class MatchExpr : public ITransientExpression {
        -: 2607:        ArgT const& m_arg;
        -: 2608:        MatcherT m_matcher;
        -: 2609:        StringRef m_matcherString;
        -: 2610:    public:
    #####: 2611:        MatchExpr( ArgT const& arg, MatcherT const& matcher, StringRef matcherString )
        -: 2612:        :   ITransientExpression{ true, matcher.match( arg ) },
        -: 2613:            m_arg( arg ),
        -: 2614:            m_matcher( matcher ),
    #####: 2615:            m_matcherString( matcherString )
    #####: 2616:        {}
        -: 2617:
    #####: 2618:        void streamReconstructedExpression( std::ostream &os ) const override {
    #####: 2619:            auto matcherAsString = m_matcher.toString();
    #####: 2620:            os << Catch::Detail::stringify( m_arg ) << ' ';
    #####: 2621:            if( matcherAsString == Detail::unprintableString )
    #####: 2622:                os << m_matcherString;
        -: 2623:            else
    #####: 2624:                os << matcherAsString;
    #####: 2625:        }
        -: 2626:    };
        -: 2627:
        -: 2628:    using StringMatcher = Matchers::Impl::MatcherBase<std::string>;
        -: 2629:
        -: 2630:    void handleExceptionMatchExpr( AssertionHandler& handler, StringMatcher const& matcher, StringRef matcherString  );
        -: 2631:
        -: 2632:    template<typename ArgT, typename MatcherT>
        -: 2633:    auto makeMatchExpr( ArgT const& arg, MatcherT const& matcher, StringRef matcherString  ) -> MatchExpr<ArgT, MatcherT> {
        -: 2634:        return MatchExpr<ArgT, MatcherT>( arg, matcher, matcherString );
        -: 2635:    }
        -: 2636:
        -: 2637:} // namespace Catch
        -: 2638:
        -: 2639:///////////////////////////////////////////////////////////////////////////////
        -: 2640:#define INTERNAL_CHECK_THAT( macroName, matcher, resultDisposition, arg ) \
        -: 2641:    do { \
        -: 2642:        Catch::AssertionHandler catchAssertionHandler( macroName, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(arg) ", " CATCH_INTERNAL_STRINGIFY(matcher), resultDisposition ); \
        -: 2643:        INTERNAL_CATCH_TRY { \
        -: 2644:            catchAssertionHandler.handleExpr( Catch::makeMatchExpr( arg, matcher, #matcher ) ); \
        -: 2645:        } INTERNAL_CATCH_CATCH( catchAssertionHandler ) \
        -: 2646:        INTERNAL_CATCH_REACT( catchAssertionHandler ) \
        -: 2647:    } while( false )
        -: 2648:
        -: 2649:///////////////////////////////////////////////////////////////////////////////
        -: 2650:#define INTERNAL_CATCH_THROWS_MATCHES( macroName, exceptionType, resultDisposition, matcher, ... ) \
        -: 2651:    do { \
        -: 2652:        Catch::AssertionHandler catchAssertionHandler( macroName, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(__VA_ARGS__) ", " CATCH_INTERNAL_STRINGIFY(exceptionType) ", " CATCH_INTERNAL_STRINGIFY(matcher), resultDisposition ); \
        -: 2653:        if( catchAssertionHandler.allowThrows() ) \
        -: 2654:            try { \
        -: 2655:                static_cast<void>(__VA_ARGS__ ); \
        -: 2656:                catchAssertionHandler.handleUnexpectedExceptionNotThrown(); \
        -: 2657:            } \
        -: 2658:            catch( exceptionType const& ex ) { \
        -: 2659:                catchAssertionHandler.handleExpr( Catch::makeMatchExpr( ex, matcher, #matcher ) ); \
        -: 2660:            } \
        -: 2661:            catch( ... ) { \
        -: 2662:                catchAssertionHandler.handleUnexpectedInflightException(); \
        -: 2663:            } \
        -: 2664:        else \
        -: 2665:            catchAssertionHandler.handleThrowingCallSkipped(); \
        -: 2666:        INTERNAL_CATCH_REACT( catchAssertionHandler ) \
        -: 2667:    } while( false )
        -: 2668:
        -: 2669:// end catch_capture_matchers.h
        -: 2670:#endif
        -: 2671:
        -: 2672:// These files are included here so the single_include script doesn't put them
        -: 2673:// in the conditionally compiled sections
        -: 2674:// start catch_test_case_info.h
        -: 2675:
        -: 2676:#include <string>
        -: 2677:#include <vector>
        -: 2678:#include <memory>
        -: 2679:
        -: 2680:#ifdef __clang__
        -: 2681:#pragma clang diagnostic push
        -: 2682:#pragma clang diagnostic ignored "-Wpadded"
        -: 2683:#endif
        -: 2684:
        -: 2685:namespace Catch {
        -: 2686:
        -: 2687:    struct ITestInvoker;
        -: 2688:
    #####: 2689:    struct TestCaseInfo {
        -: 2690:        enum SpecialProperties{
        -: 2691:            None = 0,
        -: 2692:            IsHidden = 1 << 1,
        -: 2693:            ShouldFail = 1 << 2,
        -: 2694:            MayFail = 1 << 3,
        -: 2695:            Throws = 1 << 4,
        -: 2696:            NonPortable = 1 << 5,
        -: 2697:            Benchmark = 1 << 6
        -: 2698:        };
        -: 2699:
        -: 2700:        TestCaseInfo(   std::string const& _name,
        -: 2701:                        std::string const& _className,
        -: 2702:                        std::string const& _description,
        -: 2703:                        std::vector<std::string> const& _tags,
        -: 2704:                        SourceLineInfo const& _lineInfo );
        -: 2705:
        -: 2706:        friend void setTags( TestCaseInfo& testCaseInfo, std::vector<std::string> tags );
        -: 2707:
        -: 2708:        bool isHidden() const;
        -: 2709:        bool throws() const;
        -: 2710:        bool okToFail() const;
        -: 2711:        bool expectedToFail() const;
        -: 2712:
        -: 2713:        std::string tagsAsString() const;
        -: 2714:
        -: 2715:        std::string name;
        -: 2716:        std::string className;
        -: 2717:        std::string description;
        -: 2718:        std::vector<std::string> tags;
        -: 2719:        std::vector<std::string> lcaseTags;
        -: 2720:        SourceLineInfo lineInfo;
        -: 2721:        SpecialProperties properties;
        -: 2722:    };
        -: 2723:
    #####: 2724:    class TestCase : public TestCaseInfo {
        -: 2725:    public:
        -: 2726:
        -: 2727:        TestCase( ITestInvoker* testCase, TestCaseInfo&& info );
        -: 2728:
        -: 2729:        TestCase withName( std::string const& _newName ) const;
        -: 2730:
        -: 2731:        void invoke() const;
        -: 2732:
        -: 2733:        TestCaseInfo const& getTestCaseInfo() const;
        -: 2734:
        -: 2735:        bool operator == ( TestCase const& other ) const;
        -: 2736:        bool operator < ( TestCase const& other ) const;
        -: 2737:
        -: 2738:    private:
        -: 2739:        std::shared_ptr<ITestInvoker> test;
        -: 2740:    };
        -: 2741:
        -: 2742:    TestCase makeTestCase(  ITestInvoker* testCase,
        -: 2743:                            std::string const& className,
        -: 2744:                            NameAndTags const& nameAndTags,
        -: 2745:                            SourceLineInfo const& lineInfo );
        -: 2746:}
        -: 2747:
        -: 2748:#ifdef __clang__
        -: 2749:#pragma clang diagnostic pop
        -: 2750:#endif
        -: 2751:
        -: 2752:// end catch_test_case_info.h
        -: 2753:// start catch_interfaces_runner.h
        -: 2754:
        -: 2755:namespace Catch {
        -: 2756:
    #####: 2757:    struct IRunner {
        -: 2758:        virtual ~IRunner();
        -: 2759:        virtual bool aborting() const = 0;
        -: 2760:    };
        -: 2761:}
        -: 2762:
        -: 2763:// end catch_interfaces_runner.h
        -: 2764:
        -: 2765:#ifdef __OBJC__
        -: 2766:// start catch_objc.hpp
        -: 2767:
        -: 2768:#import <objc/runtime.h>
        -: 2769:
        -: 2770:#include <string>
        -: 2771:
        -: 2772:// NB. Any general catch headers included here must be included
        -: 2773:// in catch.hpp first to make sure they are included by the single
        -: 2774:// header for non obj-usage
        -: 2775:
        -: 2776:///////////////////////////////////////////////////////////////////////////////
        -: 2777:// This protocol is really only here for (self) documenting purposes, since
        -: 2778:// all its methods are optional.
        -: 2779:@protocol OcFixture
        -: 2780:
        -: 2781:@optional
        -: 2782:
        -: 2783:-(void) setUp;
        -: 2784:-(void) tearDown;
        -: 2785:
        -: 2786:@end
        -: 2787:
        -: 2788:namespace Catch {
        -: 2789:
        -: 2790:    class OcMethod : public ITestInvoker {
        -: 2791:
        -: 2792:    public:
        -: 2793:        OcMethod( Class cls, SEL sel ) : m_cls( cls ), m_sel( sel ) {}
        -: 2794:
        -: 2795:        virtual void invoke() const {
        -: 2796:            id obj = [[m_cls alloc] init];
        -: 2797:
        -: 2798:            performOptionalSelector( obj, @selector(setUp)  );
        -: 2799:            performOptionalSelector( obj, m_sel );
        -: 2800:            performOptionalSelector( obj, @selector(tearDown)  );
        -: 2801:
        -: 2802:            arcSafeRelease( obj );
        -: 2803:        }
        -: 2804:    private:
        -: 2805:        virtual ~OcMethod() {}
        -: 2806:
        -: 2807:        Class m_cls;
        -: 2808:        SEL m_sel;
        -: 2809:    };
        -: 2810:
        -: 2811:    namespace Detail{
        -: 2812:
        -: 2813:        inline std::string getAnnotation(   Class cls,
        -: 2814:                                            std::string const& annotationName,
        -: 2815:                                            std::string const& testCaseName ) {
        -: 2816:            NSString* selStr = [[NSString alloc] initWithFormat:@"Catch_%s_%s", annotationName.c_str(), testCaseName.c_str()];
        -: 2817:            SEL sel = NSSelectorFromString( selStr );
        -: 2818:            arcSafeRelease( selStr );
        -: 2819:            id value = performOptionalSelector( cls, sel );
        -: 2820:            if( value )
        -: 2821:                return [(NSString*)value UTF8String];
        -: 2822:            return "";
        -: 2823:        }
        -: 2824:    }
        -: 2825:
        -: 2826:    inline std::size_t registerTestMethods() {
        -: 2827:        std::size_t noTestMethods = 0;
        -: 2828:        int noClasses = objc_getClassList( nullptr, 0 );
        -: 2829:
        -: 2830:        Class* classes = (CATCH_UNSAFE_UNRETAINED Class *)malloc( sizeof(Class) * noClasses);
        -: 2831:        objc_getClassList( classes, noClasses );
        -: 2832:
        -: 2833:        for( int c = 0; c < noClasses; c++ ) {
        -: 2834:            Class cls = classes[c];
        -: 2835:            {
        -: 2836:                u_int count;
        -: 2837:                Method* methods = class_copyMethodList( cls, &count );
        -: 2838:                for( u_int m = 0; m < count ; m++ ) {
        -: 2839:                    SEL selector = method_getName(methods[m]);
        -: 2840:                    std::string methodName = sel_getName(selector);
        -: 2841:                    if( startsWith( methodName, "Catch_TestCase_" ) ) {
        -: 2842:                        std::string testCaseName = methodName.substr( 15 );
        -: 2843:                        std::string name = Detail::getAnnotation( cls, "Name", testCaseName );
        -: 2844:                        std::string desc = Detail::getAnnotation( cls, "Description", testCaseName );
        -: 2845:                        const char* className = class_getName( cls );
        -: 2846:
        -: 2847:                        getMutableRegistryHub().registerTest( makeTestCase( new OcMethod( cls, selector ), className, name.c_str(), desc.c_str(), SourceLineInfo("",0) ) );
        -: 2848:                        noTestMethods++;
        -: 2849:                    }
        -: 2850:                }
        -: 2851:                free(methods);
        -: 2852:            }
        -: 2853:        }
        -: 2854:        return noTestMethods;
        -: 2855:    }
        -: 2856:
        -: 2857:#if !defined(CATCH_CONFIG_DISABLE_MATCHERS)
        -: 2858:
        -: 2859:    namespace Matchers {
        -: 2860:        namespace Impl {
        -: 2861:        namespace NSStringMatchers {
        -: 2862:
        -: 2863:            struct StringHolder : MatcherBase<NSString*>{
        -: 2864:                StringHolder( NSString* substr ) : m_substr( [substr copy] ){}
        -: 2865:                StringHolder( StringHolder const& other ) : m_substr( [other.m_substr copy] ){}
        -: 2866:                StringHolder() {
        -: 2867:                    arcSafeRelease( m_substr );
        -: 2868:                }
        -: 2869:
        -: 2870:                bool match( NSString* arg ) const override {
        -: 2871:                    return false;
        -: 2872:                }
        -: 2873:
        -: 2874:                NSString* CATCH_ARC_STRONG m_substr;
        -: 2875:            };
        -: 2876:
        -: 2877:            struct Equals : StringHolder {
        -: 2878:                Equals( NSString* substr ) : StringHolder( substr ){}
        -: 2879:
        -: 2880:                bool match( NSString* str ) const override {
        -: 2881:                    return  (str != nil || m_substr == nil ) &&
        -: 2882:                            [str isEqualToString:m_substr];
        -: 2883:                }
        -: 2884:
        -: 2885:                std::string describe() const override {
        -: 2886:                    return "equals string: " + Catch::Detail::stringify( m_substr );
        -: 2887:                }
        -: 2888:            };
        -: 2889:
        -: 2890:            struct Contains : StringHolder {
        -: 2891:                Contains( NSString* substr ) : StringHolder( substr ){}
        -: 2892:
        -: 2893:                bool match( NSString* str ) const {
        -: 2894:                    return  (str != nil || m_substr == nil ) &&
        -: 2895:                            [str rangeOfString:m_substr].location != NSNotFound;
        -: 2896:                }
        -: 2897:
        -: 2898:                std::string describe() const override {
        -: 2899:                    return "contains string: " + Catch::Detail::stringify( m_substr );
        -: 2900:                }
        -: 2901:            };
        -: 2902:
        -: 2903:            struct StartsWith : StringHolder {
        -: 2904:                StartsWith( NSString* substr ) : StringHolder( substr ){}
        -: 2905:
        -: 2906:                bool match( NSString* str ) const override {
        -: 2907:                    return  (str != nil || m_substr == nil ) &&
        -: 2908:                            [str rangeOfString:m_substr].location == 0;
        -: 2909:                }
        -: 2910:
        -: 2911:                std::string describe() const override {
        -: 2912:                    return "starts with: " + Catch::Detail::stringify( m_substr );
        -: 2913:                }
        -: 2914:            };
        -: 2915:            struct EndsWith : StringHolder {
        -: 2916:                EndsWith( NSString* substr ) : StringHolder( substr ){}
        -: 2917:
        -: 2918:                bool match( NSString* str ) const override {
        -: 2919:                    return  (str != nil || m_substr == nil ) &&
        -: 2920:                            [str rangeOfString:m_substr].location == [str length] - [m_substr length];
        -: 2921:                }
        -: 2922:
        -: 2923:                std::string describe() const override {
        -: 2924:                    return "ends with: " + Catch::Detail::stringify( m_substr );
        -: 2925:                }
        -: 2926:            };
        -: 2927:
        -: 2928:        } // namespace NSStringMatchers
        -: 2929:        } // namespace Impl
        -: 2930:
        -: 2931:        inline Impl::NSStringMatchers::Equals
        -: 2932:            Equals( NSString* substr ){ return Impl::NSStringMatchers::Equals( substr ); }
        -: 2933:
        -: 2934:        inline Impl::NSStringMatchers::Contains
        -: 2935:            Contains( NSString* substr ){ return Impl::NSStringMatchers::Contains( substr ); }
        -: 2936:
        -: 2937:        inline Impl::NSStringMatchers::StartsWith
        -: 2938:            StartsWith( NSString* substr ){ return Impl::NSStringMatchers::StartsWith( substr ); }
        -: 2939:
        -: 2940:        inline Impl::NSStringMatchers::EndsWith
        -: 2941:            EndsWith( NSString* substr ){ return Impl::NSStringMatchers::EndsWith( substr ); }
        -: 2942:
        -: 2943:    } // namespace Matchers
        -: 2944:
        -: 2945:    using namespace Matchers;
        -: 2946:
        -: 2947:#endif // CATCH_CONFIG_DISABLE_MATCHERS
        -: 2948:
        -: 2949:} // namespace Catch
        -: 2950:
        -: 2951:///////////////////////////////////////////////////////////////////////////////
        -: 2952:#define OC_MAKE_UNIQUE_NAME( root, uniqueSuffix ) root##uniqueSuffix
        -: 2953:#define OC_TEST_CASE2( name, desc, uniqueSuffix ) \
        -: 2954:+(NSString*) OC_MAKE_UNIQUE_NAME( Catch_Name_test_, uniqueSuffix ) \
        -: 2955:{ \
        -: 2956:return @ name; \
        -: 2957:} \
        -: 2958:+(NSString*) OC_MAKE_UNIQUE_NAME( Catch_Description_test_, uniqueSuffix ) \
        -: 2959:{ \
        -: 2960:return @ desc; \
        -: 2961:} \
        -: 2962:-(void) OC_MAKE_UNIQUE_NAME( Catch_TestCase_test_, uniqueSuffix )
        -: 2963:
        -: 2964:#define OC_TEST_CASE( name, desc ) OC_TEST_CASE2( name, desc, __LINE__ )
        -: 2965:
        -: 2966:// end catch_objc.hpp
        -: 2967:#endif
        -: 2968:
        -: 2969:#ifdef CATCH_CONFIG_EXTERNAL_INTERFACES
        -: 2970:// start catch_external_interfaces.h
        -: 2971:
        -: 2972:// start catch_reporter_bases.hpp
        -: 2973:
        -: 2974:// start catch_interfaces_reporter.h
        -: 2975:
        -: 2976:// start catch_config.hpp
        -: 2977:
        -: 2978:// start catch_test_spec_parser.h
        -: 2979:
        -: 2980:#ifdef __clang__
        -: 2981:#pragma clang diagnostic push
        -: 2982:#pragma clang diagnostic ignored "-Wpadded"
        -: 2983:#endif
        -: 2984:
        -: 2985:// start catch_test_spec.h
        -: 2986:
        -: 2987:#ifdef __clang__
        -: 2988:#pragma clang diagnostic push
        -: 2989:#pragma clang diagnostic ignored "-Wpadded"
        -: 2990:#endif
        -: 2991:
        -: 2992:// start catch_wildcard_pattern.h
        -: 2993:
        -: 2994:namespace Catch
        -: 2995:{
        -: 2996:    class WildcardPattern {
        -: 2997:        enum WildcardPosition {
        -: 2998:            NoWildcard = 0,
        -: 2999:            WildcardAtStart = 1,
        -: 3000:            WildcardAtEnd = 2,
        -: 3001:            WildcardAtBothEnds = WildcardAtStart | WildcardAtEnd
        -: 3002:        };
        -: 3003:
        -: 3004:    public:
        -: 3005:
        -: 3006:        WildcardPattern( std::string const& pattern, CaseSensitive::Choice caseSensitivity );
    #####: 3007:        virtual ~WildcardPattern() = default;
        -: 3008:        virtual bool matches( std::string const& str ) const;
        -: 3009:
        -: 3010:    private:
        -: 3011:        std::string adjustCase( std::string const& str ) const;
        -: 3012:        CaseSensitive::Choice m_caseSensitivity;
        -: 3013:        WildcardPosition m_wildcard = NoWildcard;
        -: 3014:        std::string m_pattern;
        -: 3015:    };
        -: 3016:}
        -: 3017:
        -: 3018:// end catch_wildcard_pattern.h
        -: 3019:#include <string>
        -: 3020:#include <vector>
        -: 3021:#include <memory>
        -: 3022:
        -: 3023:namespace Catch {
        -: 3024:
    #####: 3025:    class TestSpec {
    #####: 3026:        struct Pattern {
        -: 3027:            virtual ~Pattern();
        -: 3028:            virtual bool matches( TestCaseInfo const& testCase ) const = 0;
        -: 3029:        };
        -: 3030:        using PatternPtr = std::shared_ptr<Pattern>;
        -: 3031:
    #####: 3032:        class NamePattern : public Pattern {
        -: 3033:        public:
        -: 3034:            NamePattern( std::string const& name );
        -: 3035:            virtual ~NamePattern();
        -: 3036:            virtual bool matches( TestCaseInfo const& testCase ) const override;
        -: 3037:        private:
        -: 3038:            WildcardPattern m_wildcardPattern;
        -: 3039:        };
        -: 3040:
    #####: 3041:        class TagPattern : public Pattern {
        -: 3042:        public:
        -: 3043:            TagPattern( std::string const& tag );
        -: 3044:            virtual ~TagPattern();
        -: 3045:            virtual bool matches( TestCaseInfo const& testCase ) const override;
        -: 3046:        private:
        -: 3047:            std::string m_tag;
        -: 3048:        };
        -: 3049:
    #####: 3050:        class ExcludedPattern : public Pattern {
        -: 3051:        public:
        -: 3052:            ExcludedPattern( PatternPtr const& underlyingPattern );
        -: 3053:            virtual ~ExcludedPattern();
        -: 3054:            virtual bool matches( TestCaseInfo const& testCase ) const override;
        -: 3055:        private:
        -: 3056:            PatternPtr m_underlyingPattern;
        -: 3057:        };
        -: 3058:
    #####: 3059:        struct Filter {
        -: 3060:            std::vector<PatternPtr> m_patterns;
        -: 3061:
        -: 3062:            bool matches( TestCaseInfo const& testCase ) const;
        -: 3063:        };
        -: 3064:
        -: 3065:    public:
        -: 3066:        bool hasFilters() const;
        -: 3067:        bool matches( TestCaseInfo const& testCase ) const;
        -: 3068:
        -: 3069:    private:
        -: 3070:        std::vector<Filter> m_filters;
        -: 3071:
        -: 3072:        friend class TestSpecParser;
        -: 3073:    };
        -: 3074:}
        -: 3075:
        -: 3076:#ifdef __clang__
        -: 3077:#pragma clang diagnostic pop
        -: 3078:#endif
        -: 3079:
        -: 3080:// end catch_test_spec.h
        -: 3081:// start catch_interfaces_tag_alias_registry.h
        -: 3082:
        -: 3083:#include <string>
        -: 3084:
        -: 3085:namespace Catch {
        -: 3086:
        -: 3087:    struct TagAlias;
        -: 3088:
    #####: 3089:    struct ITagAliasRegistry {
        -: 3090:        virtual ~ITagAliasRegistry();
        -: 3091:        // Nullptr if not present
        -: 3092:        virtual TagAlias const* find( std::string const& alias ) const = 0;
        -: 3093:        virtual std::string expandAliases( std::string const& unexpandedTestSpec ) const = 0;
        -: 3094:
        -: 3095:        static ITagAliasRegistry const& get();
        -: 3096:    };
        -: 3097:
        -: 3098:} // end namespace Catch
        -: 3099:
        -: 3100:// end catch_interfaces_tag_alias_registry.h
        -: 3101:namespace Catch {
        -: 3102:
    #####: 3103:    class TestSpecParser {
        -: 3104:        enum Mode{ None, Name, QuotedName, Tag, EscapedName };
        -: 3105:        Mode m_mode = None;
        -: 3106:        bool m_exclusion = false;
        -: 3107:        std::size_t m_start = std::string::npos, m_pos = 0;
        -: 3108:        std::string m_arg;
        -: 3109:        std::vector<std::size_t> m_escapeChars;
        -: 3110:        TestSpec::Filter m_currentFilter;
        -: 3111:        TestSpec m_testSpec;
        -: 3112:        ITagAliasRegistry const* m_tagAliases = nullptr;
        -: 3113:
        -: 3114:    public:
        -: 3115:        TestSpecParser( ITagAliasRegistry const& tagAliases );
        -: 3116:
        -: 3117:        TestSpecParser& parse( std::string const& arg );
        -: 3118:        TestSpec testSpec();
        -: 3119:
        -: 3120:    private:
        -: 3121:        void visitChar( char c );
        -: 3122:        void startNewMode( Mode mode, std::size_t start );
        -: 3123:        void escape();
        -: 3124:        std::string subString() const;
        -: 3125:
        -: 3126:        template<typename T>
    #####: 3127:        void addPattern() {
    #####: 3128:            std::string token = subString();
    #####: 3129:            for( std::size_t i = 0; i < m_escapeChars.size(); ++i )
    #####: 3130:                token = token.substr( 0, m_escapeChars[i]-m_start-i ) + token.substr( m_escapeChars[i]-m_start-i+1 );
    #####: 3131:            m_escapeChars.clear();
    #####: 3132:            if( startsWith( token, "exclude:" ) ) {
    #####: 3133:                m_exclusion = true;
    #####: 3134:                token = token.substr( 8 );
        -: 3135:            }
    #####: 3136:            if( !token.empty() ) {
    #####: 3137:                TestSpec::PatternPtr pattern = std::make_shared<T>( token );
    #####: 3138:                if( m_exclusion )
    #####: 3139:                    pattern = std::make_shared<TestSpec::ExcludedPattern>( pattern );
    #####: 3140:                m_currentFilter.m_patterns.push_back( pattern );
        -: 3141:            }
    #####: 3142:            m_exclusion = false;
    #####: 3143:            m_mode = None;
    #####: 3144:        }
        -: 3145:
        -: 3146:        void addFilter();
        -: 3147:    };
        -: 3148:    TestSpec parseTestSpec( std::string const& arg );
        -: 3149:
        -: 3150:} // namespace Catch
        -: 3151:
        -: 3152:#ifdef __clang__
        -: 3153:#pragma clang diagnostic pop
        -: 3154:#endif
        -: 3155:
        -: 3156:// end catch_test_spec_parser.h
        -: 3157:// start catch_interfaces_config.h
        -: 3158:
        -: 3159:#include <iosfwd>
        -: 3160:#include <string>
        -: 3161:#include <vector>
        -: 3162:#include <memory>
        -: 3163:
        -: 3164:namespace Catch {
        -: 3165:
        -: 3166:    enum class Verbosity {
        -: 3167:        Quiet = 0,
        -: 3168:        Normal,
        -: 3169:        High
        -: 3170:    };
        -: 3171:
        -: 3172:    struct WarnAbout { enum What {
        -: 3173:        Nothing = 0x00,
        -: 3174:        NoAssertions = 0x01,
        -: 3175:        NoTests = 0x02
        -: 3176:    }; };
        -: 3177:
        -: 3178:    struct ShowDurations { enum OrNot {
        -: 3179:        DefaultForReporter,
        -: 3180:        Always,
        -: 3181:        Never
        -: 3182:    }; };
        -: 3183:    struct RunTests { enum InWhatOrder {
        -: 3184:        InDeclarationOrder,
        -: 3185:        InLexicographicalOrder,
        -: 3186:        InRandomOrder
        -: 3187:    }; };
        -: 3188:    struct UseColour { enum YesOrNo {
        -: 3189:        Auto,
        -: 3190:        Yes,
        -: 3191:        No
        -: 3192:    }; };
        -: 3193:    struct WaitForKeypress { enum When {
        -: 3194:        Never,
        -: 3195:        BeforeStart = 1,
        -: 3196:        BeforeExit = 2,
        -: 3197:        BeforeStartAndExit = BeforeStart | BeforeExit
        -: 3198:    }; };
        -: 3199:
        -: 3200:    class TestSpec;
        -: 3201:
    #####: 3202:    struct IConfig : NonCopyable {
        -: 3203:
        -: 3204:        virtual ~IConfig();
        -: 3205:
        -: 3206:        virtual bool allowThrows() const = 0;
        -: 3207:        virtual std::ostream& stream() const = 0;
        -: 3208:        virtual std::string name() const = 0;
        -: 3209:        virtual bool includeSuccessfulResults() const = 0;
        -: 3210:        virtual bool shouldDebugBreak() const = 0;
        -: 3211:        virtual bool warnAboutMissingAssertions() const = 0;
        -: 3212:        virtual bool warnAboutNoTests() const = 0;
        -: 3213:        virtual int abortAfter() const = 0;
        -: 3214:        virtual bool showInvisibles() const = 0;
        -: 3215:        virtual ShowDurations::OrNot showDurations() const = 0;
        -: 3216:        virtual TestSpec const& testSpec() const = 0;
        -: 3217:        virtual bool hasTestFilters() const = 0;
        -: 3218:        virtual RunTests::InWhatOrder runOrder() const = 0;
        -: 3219:        virtual unsigned int rngSeed() const = 0;
        -: 3220:        virtual int benchmarkResolutionMultiple() const = 0;
        -: 3221:        virtual UseColour::YesOrNo useColour() const = 0;
        -: 3222:        virtual std::vector<std::string> const& getSectionsToRun() const = 0;
        -: 3223:        virtual Verbosity verbosity() const = 0;
        -: 3224:    };
        -: 3225:
        -: 3226:    using IConfigPtr = std::shared_ptr<IConfig const>;
        -: 3227:}
        -: 3228:
        -: 3229:// end catch_interfaces_config.h
        -: 3230:// Libstdc++ doesn't like incomplete classes for unique_ptr
        -: 3231:
        -: 3232:#include <memory>
        -: 3233:#include <vector>
        -: 3234:#include <string>
        -: 3235:
        -: 3236:#ifndef CATCH_CONFIG_CONSOLE_WIDTH
        -: 3237:#define CATCH_CONFIG_CONSOLE_WIDTH 80
        -: 3238:#endif
        -: 3239:
        -: 3240:namespace Catch {
        -: 3241:
        -: 3242:    struct IStream;
        -: 3243:
    #####: 3244:    struct ConfigData {
        -: 3245:        bool listTests = false;
        -: 3246:        bool listTags = false;
        -: 3247:        bool listReporters = false;
        -: 3248:        bool listTestNamesOnly = false;
        -: 3249:
        -: 3250:        bool showSuccessfulTests = false;
        -: 3251:        bool shouldDebugBreak = false;
        -: 3252:        bool noThrow = false;
        -: 3253:        bool showHelp = false;
        -: 3254:        bool showInvisibles = false;
        -: 3255:        bool filenamesAsTags = false;
        -: 3256:        bool libIdentify = false;
        -: 3257:
        -: 3258:        int abortAfter = -1;
        -: 3259:        unsigned int rngSeed = 0;
        -: 3260:        int benchmarkResolutionMultiple = 100;
        -: 3261:
        -: 3262:        Verbosity verbosity = Verbosity::Normal;
        -: 3263:        WarnAbout::What warnings = WarnAbout::Nothing;
        -: 3264:        ShowDurations::OrNot showDurations = ShowDurations::DefaultForReporter;
        -: 3265:        RunTests::InWhatOrder runOrder = RunTests::InDeclarationOrder;
        -: 3266:        UseColour::YesOrNo useColour = UseColour::Auto;
        -: 3267:        WaitForKeypress::When waitForKeypress = WaitForKeypress::Never;
        -: 3268:
        -: 3269:        std::string outputFilename;
        -: 3270:        std::string name;
        -: 3271:        std::string processName;
        -: 3272:
        -: 3273:        std::vector<std::string> reporterNames;
        -: 3274:        std::vector<std::string> testsOrTags;
        -: 3275:        std::vector<std::string> sectionsToRun;
        -: 3276:    };
        -: 3277:
        -: 3278:    class Config : public IConfig {
        -: 3279:    public:
        -: 3280:
        -: 3281:        Config() = default;
        -: 3282:        Config( ConfigData const& data );
    #####: 3283:        virtual ~Config() = default;
        -: 3284:
        -: 3285:        std::string const& getFilename() const;
        -: 3286:
        -: 3287:        bool listTests() const;
        -: 3288:        bool listTestNamesOnly() const;
        -: 3289:        bool listTags() const;
        -: 3290:        bool listReporters() const;
        -: 3291:
        -: 3292:        std::string getProcessName() const;
        -: 3293:
        -: 3294:        std::vector<std::string> const& getReporterNames() const;
        -: 3295:        std::vector<std::string> const& getTestsOrTags() const;
        -: 3296:        std::vector<std::string> const& getSectionsToRun() const override;
        -: 3297:
        -: 3298:        virtual TestSpec const& testSpec() const override;
        -: 3299:        bool hasTestFilters() const override;
        -: 3300:
        -: 3301:        bool showHelp() const;
        -: 3302:
        -: 3303:        // IConfig interface
        -: 3304:        bool allowThrows() const override;
        -: 3305:        std::ostream& stream() const override;
        -: 3306:        std::string name() const override;
        -: 3307:        bool includeSuccessfulResults() const override;
        -: 3308:        bool warnAboutMissingAssertions() const override;
        -: 3309:        bool warnAboutNoTests() const override;
        -: 3310:        ShowDurations::OrNot showDurations() const override;
        -: 3311:        RunTests::InWhatOrder runOrder() const override;
        -: 3312:        unsigned int rngSeed() const override;
        -: 3313:        int benchmarkResolutionMultiple() const override;
        -: 3314:        UseColour::YesOrNo useColour() const override;
        -: 3315:        bool shouldDebugBreak() const override;
        -: 3316:        int abortAfter() const override;
        -: 3317:        bool showInvisibles() const override;
        -: 3318:        Verbosity verbosity() const override;
        -: 3319:
        -: 3320:    private:
        -: 3321:
        -: 3322:        IStream const* openStream();
        -: 3323:        ConfigData m_data;
        -: 3324:
        -: 3325:        std::unique_ptr<IStream const> m_stream;
        -: 3326:        TestSpec m_testSpec;
        -: 3327:        bool m_hasTestFilters = false;
        -: 3328:    };
        -: 3329:
        -: 3330:} // end namespace Catch
        -: 3331:
        -: 3332:// end catch_config.hpp
        -: 3333:// start catch_assertionresult.h
        -: 3334:
        -: 3335:#include <string>
        -: 3336:
        -: 3337:namespace Catch {
        -: 3338:
    #####: 3339:    struct AssertionResultData
        -: 3340:    {
        -: 3341:        AssertionResultData() = delete;
        -: 3342:
        -: 3343:        AssertionResultData( ResultWas::OfType _resultType, LazyExpression const& _lazyExpression );
        -: 3344:
        -: 3345:        std::string message;
        -: 3346:        mutable std::string reconstructedExpression;
        -: 3347:        LazyExpression lazyExpression;
        -: 3348:        ResultWas::OfType resultType;
        -: 3349:
        -: 3350:        std::string reconstructExpression() const;
        -: 3351:    };
        -: 3352:
    #####: 3353:    class AssertionResult {
        -: 3354:    public:
        -: 3355:        AssertionResult() = delete;
        -: 3356:        AssertionResult( AssertionInfo const& info, AssertionResultData const& data );
        -: 3357:
        -: 3358:        bool isOk() const;
        -: 3359:        bool succeeded() const;
        -: 3360:        ResultWas::OfType getResultType() const;
        -: 3361:        bool hasExpression() const;
        -: 3362:        bool hasMessage() const;
        -: 3363:        std::string getExpression() const;
        -: 3364:        std::string getExpressionInMacro() const;
        -: 3365:        bool hasExpandedExpression() const;
        -: 3366:        std::string getExpandedExpression() const;
        -: 3367:        std::string getMessage() const;
        -: 3368:        SourceLineInfo getSourceInfo() const;
        -: 3369:        StringRef getTestMacroName() const;
        -: 3370:
        -: 3371:    //protected:
        -: 3372:        AssertionInfo m_info;
        -: 3373:        AssertionResultData m_resultData;
        -: 3374:    };
        -: 3375:
        -: 3376:} // end namespace Catch
        -: 3377:
        -: 3378:// end catch_assertionresult.h
        -: 3379:// start catch_option.hpp
        -: 3380:
        -: 3381:namespace Catch {
        -: 3382:
        -: 3383:    // An optional type
        -: 3384:    template<typename T>
        -: 3385:    class Option {
        -: 3386:    public:
    #####: 3387:        Option() : nullableValue( nullptr ) {}
        -: 3388:        Option( T const& _value )
        -: 3389:        : nullableValue( new( storage ) T( _value ) )
        -: 3390:        {}
        -: 3391:        Option( Option const& _other )
        -: 3392:        : nullableValue( _other ? new( storage ) T( *_other ) : nullptr )
        -: 3393:        {}
        -: 3394:
    #####: 3395:        ~Option() {
    #####: 3396:            reset();
    #####: 3397:        }
        -: 3398:
        -: 3399:        Option& operator= ( Option const& _other ) {
        -: 3400:            if( &_other != this ) {
        -: 3401:                reset();
        -: 3402:                if( _other )
        -: 3403:                    nullableValue = new( storage ) T( *_other );
        -: 3404:            }
        -: 3405:            return *this;
        -: 3406:        }
    #####: 3407:        Option& operator = ( T const& _value ) {
    #####: 3408:            reset();
    #####: 3409:            nullableValue = new( storage ) T( _value );
    #####: 3410:            return *this;
        -: 3411:        }
        -: 3412:
    #####: 3413:        void reset() {
    #####: 3414:            if( nullableValue )
    #####: 3415:                nullableValue->~T();
    #####: 3416:            nullableValue = nullptr;
    #####: 3417:        }
        -: 3418:
    #####: 3419:        T& operator*() { return *nullableValue; }
    #####: 3420:        T const& operator*() const { return *nullableValue; }
    #####: 3421:        T* operator->() { return nullableValue; }
        -: 3422:        const T* operator->() const { return nullableValue; }
        -: 3423:
    #####: 3424:        T valueOr( T const& defaultValue ) const {
    #####: 3425:            return nullableValue ? *nullableValue : defaultValue;
        -: 3426:        }
        -: 3427:
    #####: 3428:        bool some() const { return nullableValue != nullptr; }
        -: 3429:        bool none() const { return nullableValue == nullptr; }
        -: 3430:
        -: 3431:        bool operator !() const { return nullableValue == nullptr; }
    #####: 3432:        explicit operator bool() const {
    #####: 3433:            return some();
        -: 3434:        }
        -: 3435:
        -: 3436:    private:
        -: 3437:        T *nullableValue;
        -: 3438:        alignas(alignof(T)) char storage[sizeof(T)];
        -: 3439:    };
        -: 3440:
        -: 3441:} // end namespace Catch
        -: 3442:
        -: 3443:// end catch_option.hpp
        -: 3444:#include <string>
        -: 3445:#include <iosfwd>
        -: 3446:#include <map>
        -: 3447:#include <set>
        -: 3448:#include <memory>
        -: 3449:
        -: 3450:namespace Catch {
        -: 3451:
    #####: 3452:    struct ReporterConfig {
        -: 3453:        explicit ReporterConfig( IConfigPtr const& _fullConfig );
        -: 3454:
        -: 3455:        ReporterConfig( IConfigPtr const& _fullConfig, std::ostream& _stream );
        -: 3456:
        -: 3457:        std::ostream& stream() const;
        -: 3458:        IConfigPtr fullConfig() const;
        -: 3459:
        -: 3460:    private:
        -: 3461:        std::ostream* m_stream;
        -: 3462:        IConfigPtr m_fullConfig;
        -: 3463:    };
        -: 3464:
    #####: 3465:    struct ReporterPreferences {
        -: 3466:        bool shouldRedirectStdOut = false;
        -: 3467:    };
        -: 3468:
        -: 3469:    template<typename T>
    #####: 3470:    struct LazyStat : Option<T> {
    #####: 3471:        LazyStat& operator=( T const& _value ) {
    #####: 3472:            Option<T>::operator=( _value );
    #####: 3473:            used = false;
    #####: 3474:            return *this;
        -: 3475:        }
    #####: 3476:        void reset() {
    #####: 3477:            Option<T>::reset();
    #####: 3478:            used = false;
    #####: 3479:        }
        -: 3480:        bool used = false;
        -: 3481:    };
        -: 3482:
    #####: 3483:    struct TestRunInfo {
        -: 3484:        TestRunInfo( std::string const& _name );
        -: 3485:        std::string name;
        -: 3486:    };
    #####: 3487:    struct GroupInfo {
        -: 3488:        GroupInfo(  std::string const& _name,
        -: 3489:                    std::size_t _groupIndex,
        -: 3490:                    std::size_t _groupsCount );
        -: 3491:
        -: 3492:        std::string name;
        -: 3493:        std::size_t groupIndex;
        -: 3494:        std::size_t groupsCounts;
        -: 3495:    };
        -: 3496:
    #####: 3497:    struct AssertionStats {
        -: 3498:        AssertionStats( AssertionResult const& _assertionResult,
        -: 3499:                        std::vector<MessageInfo> const& _infoMessages,
        -: 3500:                        Totals const& _totals );
        -: 3501:
    #####: 3502:        AssertionStats( AssertionStats const& )              = default;
        -: 3503:        AssertionStats( AssertionStats && )                  = default;
        -: 3504:        AssertionStats& operator = ( AssertionStats const& ) = default;
        -: 3505:        AssertionStats& operator = ( AssertionStats && )     = default;
        -: 3506:        virtual ~AssertionStats();
        -: 3507:
        -: 3508:        AssertionResult assertionResult;
        -: 3509:        std::vector<MessageInfo> infoMessages;
        -: 3510:        Totals totals;
        -: 3511:    };
        -: 3512:
    #####: 3513:    struct SectionStats {
        -: 3514:        SectionStats(   SectionInfo const& _sectionInfo,
        -: 3515:                        Counts const& _assertions,
        -: 3516:                        double _durationInSeconds,
        -: 3517:                        bool _missingAssertions );
    #####: 3518:        SectionStats( SectionStats const& )              = default;
        -: 3519:        SectionStats( SectionStats && )                  = default;
        -: 3520:        SectionStats& operator = ( SectionStats const& ) = default;
        -: 3521:        SectionStats& operator = ( SectionStats && )     = default;
        -: 3522:        virtual ~SectionStats();
        -: 3523:
        -: 3524:        SectionInfo sectionInfo;
        -: 3525:        Counts assertions;
        -: 3526:        double durationInSeconds;
        -: 3527:        bool missingAssertions;
        -: 3528:    };
        -: 3529:
    #####: 3530:    struct TestCaseStats {
        -: 3531:        TestCaseStats(  TestCaseInfo const& _testInfo,
        -: 3532:                        Totals const& _totals,
        -: 3533:                        std::string const& _stdOut,
        -: 3534:                        std::string const& _stdErr,
        -: 3535:                        bool _aborting );
        -: 3536:
    #####: 3537:        TestCaseStats( TestCaseStats const& )              = default;
        -: 3538:        TestCaseStats( TestCaseStats && )                  = default;
        -: 3539:        TestCaseStats& operator = ( TestCaseStats const& ) = default;
        -: 3540:        TestCaseStats& operator = ( TestCaseStats && )     = default;
        -: 3541:        virtual ~TestCaseStats();
        -: 3542:
        -: 3543:        TestCaseInfo testInfo;
        -: 3544:        Totals totals;
        -: 3545:        std::string stdOut;
        -: 3546:        std::string stdErr;
        -: 3547:        bool aborting;
        -: 3548:    };
        -: 3549:
    #####: 3550:    struct TestGroupStats {
        -: 3551:        TestGroupStats( GroupInfo const& _groupInfo,
        -: 3552:                        Totals const& _totals,
        -: 3553:                        bool _aborting );
        -: 3554:        TestGroupStats( GroupInfo const& _groupInfo );
        -: 3555:
    #####: 3556:        TestGroupStats( TestGroupStats const& )              = default;
        -: 3557:        TestGroupStats( TestGroupStats && )                  = default;
        -: 3558:        TestGroupStats& operator = ( TestGroupStats const& ) = default;
        -: 3559:        TestGroupStats& operator = ( TestGroupStats && )     = default;
        -: 3560:        virtual ~TestGroupStats();
        -: 3561:
        -: 3562:        GroupInfo groupInfo;
        -: 3563:        Totals totals;
        -: 3564:        bool aborting;
        -: 3565:    };
        -: 3566:
    #####: 3567:    struct TestRunStats {
        -: 3568:        TestRunStats(   TestRunInfo const& _runInfo,
        -: 3569:                        Totals const& _totals,
        -: 3570:                        bool _aborting );
        -: 3571:
    #####: 3572:        TestRunStats( TestRunStats const& )              = default;
        -: 3573:        TestRunStats( TestRunStats && )                  = default;
        -: 3574:        TestRunStats& operator = ( TestRunStats const& ) = default;
        -: 3575:        TestRunStats& operator = ( TestRunStats && )     = default;
        -: 3576:        virtual ~TestRunStats();
        -: 3577:
        -: 3578:        TestRunInfo runInfo;
        -: 3579:        Totals totals;
        -: 3580:        bool aborting;
        -: 3581:    };
        -: 3582:
    #####: 3583:    struct BenchmarkInfo {
        -: 3584:        std::string name;
        -: 3585:    };
    #####: 3586:    struct BenchmarkStats {
        -: 3587:        BenchmarkInfo info;
        -: 3588:        std::size_t iterations;
        -: 3589:        uint64_t elapsedTimeInNanoseconds;
        -: 3590:    };
        -: 3591:
    #####: 3592:    struct IStreamingReporter {
    #####: 3593:        virtual ~IStreamingReporter() = default;
        -: 3594:
        -: 3595:        // Implementing class must also provide the following static methods:
        -: 3596:        // static std::string getDescription();
        -: 3597:        // static std::set<Verbosity> getSupportedVerbosities()
        -: 3598:
        -: 3599:        virtual ReporterPreferences getPreferences() const = 0;
        -: 3600:
        -: 3601:        virtual void noMatchingTestCases( std::string const& spec ) = 0;
        -: 3602:
        -: 3603:        virtual void testRunStarting( TestRunInfo const& testRunInfo ) = 0;
        -: 3604:        virtual void testGroupStarting( GroupInfo const& groupInfo ) = 0;
        -: 3605:
        -: 3606:        virtual void testCaseStarting( TestCaseInfo const& testInfo ) = 0;
        -: 3607:        virtual void sectionStarting( SectionInfo const& sectionInfo ) = 0;
        -: 3608:
        -: 3609:        // *** experimental ***
    #####: 3610:        virtual void benchmarkStarting( BenchmarkInfo const& ) {}
        -: 3611:
        -: 3612:        virtual void assertionStarting( AssertionInfo const& assertionInfo ) = 0;
        -: 3613:
        -: 3614:        // The return value indicates if the messages buffer should be cleared:
        -: 3615:        virtual bool assertionEnded( AssertionStats const& assertionStats ) = 0;
        -: 3616:
        -: 3617:        // *** experimental ***
    #####: 3618:        virtual void benchmarkEnded( BenchmarkStats const& ) {}
        -: 3619:
        -: 3620:        virtual void sectionEnded( SectionStats const& sectionStats ) = 0;
        -: 3621:        virtual void testCaseEnded( TestCaseStats const& testCaseStats ) = 0;
        -: 3622:        virtual void testGroupEnded( TestGroupStats const& testGroupStats ) = 0;
        -: 3623:        virtual void testRunEnded( TestRunStats const& testRunStats ) = 0;
        -: 3624:
        -: 3625:        virtual void skipTest( TestCaseInfo const& testInfo ) = 0;
        -: 3626:
        -: 3627:        // Default empty implementation provided
        -: 3628:        virtual void fatalErrorEncountered( StringRef name );
        -: 3629:
        -: 3630:        virtual bool isMulti() const;
        -: 3631:    };
        -: 3632:    using IStreamingReporterPtr = std::unique_ptr<IStreamingReporter>;
        -: 3633:
    #####: 3634:    struct IReporterFactory {
        -: 3635:        virtual ~IReporterFactory();
        -: 3636:        virtual IStreamingReporterPtr create( ReporterConfig const& config ) const = 0;
        -: 3637:        virtual std::string getDescription() const = 0;
        -: 3638:    };
        -: 3639:    using IReporterFactoryPtr = std::shared_ptr<IReporterFactory>;
        -: 3640:
    #####: 3641:    struct IReporterRegistry {
        -: 3642:        using FactoryMap = std::map<std::string, IReporterFactoryPtr>;
        -: 3643:        using Listeners = std::vector<IReporterFactoryPtr>;
        -: 3644:
        -: 3645:        virtual ~IReporterRegistry();
        -: 3646:        virtual IStreamingReporterPtr create( std::string const& name, IConfigPtr const& config ) const = 0;
        -: 3647:        virtual FactoryMap const& getFactories() const = 0;
        -: 3648:        virtual Listeners const& getListeners() const = 0;
        -: 3649:    };
        -: 3650:
        -: 3651:    void addReporter( IStreamingReporterPtr& existingReporter, IStreamingReporterPtr&& additionalReporter );
        -: 3652:
        -: 3653:} // end namespace Catch
        -: 3654:
        -: 3655:// end catch_interfaces_reporter.h
        -: 3656:#include <algorithm>
        -: 3657:#include <cstring>
        -: 3658:#include <cfloat>
        -: 3659:#include <cstdio>
        -: 3660:#include <assert.h>
        -: 3661:#include <memory>
        -: 3662:#include <ostream>
        -: 3663:
        -: 3664:namespace Catch {
        -: 3665:    void prepareExpandedExpression(AssertionResult& result);
        -: 3666:
        -: 3667:    // Returns double formatted as %.3f (format expected on output)
        -: 3668:    std::string getFormattedDuration( double duration );
        -: 3669:
        -: 3670:    template<typename DerivedT>
        -: 3671:    struct StreamingReporterBase : IStreamingReporter {
        -: 3672:
    #####: 3673:        StreamingReporterBase( ReporterConfig const& _config )
        -: 3674:        :   m_config( _config.fullConfig() ),
    #####: 3675:            stream( _config.stream() )
        -: 3676:        {
    #####: 3677:            m_reporterPrefs.shouldRedirectStdOut = false;
    #####: 3678:            if( !DerivedT::getSupportedVerbosities().count( m_config->verbosity() ) )
    #####: 3679:                throw std::domain_error( "Verbosity level not supported by this reporter" );
    #####: 3680:        }
        -: 3681:
    #####: 3682:        ReporterPreferences getPreferences() const override {
    #####: 3683:            return m_reporterPrefs;
        -: 3684:        }
        -: 3685:
    #####: 3686:        static std::set<Verbosity> getSupportedVerbosities() {
    #####: 3687:            return { Verbosity::Normal };
        -: 3688:        }
        -: 3689:
    #####: 3690:        ~StreamingReporterBase() override = default;
        -: 3691:
    #####: 3692:        void noMatchingTestCases(std::string const&) override {}
        -: 3693:
    #####: 3694:        void testRunStarting(TestRunInfo const& _testRunInfo) override {
    #####: 3695:            currentTestRunInfo = _testRunInfo;
    #####: 3696:        }
    #####: 3697:        void testGroupStarting(GroupInfo const& _groupInfo) override {
    #####: 3698:            currentGroupInfo = _groupInfo;
    #####: 3699:        }
        -: 3700:
    #####: 3701:        void testCaseStarting(TestCaseInfo const& _testInfo) override  {
    #####: 3702:            currentTestCaseInfo = _testInfo;
    #####: 3703:        }
    #####: 3704:        void sectionStarting(SectionInfo const& _sectionInfo) override {
    #####: 3705:            m_sectionStack.push_back(_sectionInfo);
    #####: 3706:        }
        -: 3707:
    #####: 3708:        void sectionEnded(SectionStats const& /* _sectionStats */) override {
    #####: 3709:            m_sectionStack.pop_back();
    #####: 3710:        }
    #####: 3711:        void testCaseEnded(TestCaseStats const& /* _testCaseStats */) override {
    #####: 3712:            currentTestCaseInfo.reset();
    #####: 3713:        }
    #####: 3714:        void testGroupEnded(TestGroupStats const& /* _testGroupStats */) override {
    #####: 3715:            currentGroupInfo.reset();
    #####: 3716:        }
    #####: 3717:        void testRunEnded(TestRunStats const& /* _testRunStats */) override {
    #####: 3718:            currentTestCaseInfo.reset();
    #####: 3719:            currentGroupInfo.reset();
    #####: 3720:            currentTestRunInfo.reset();
    #####: 3721:        }
        -: 3722:
    #####: 3723:        void skipTest(TestCaseInfo const&) override {
        -: 3724:            // Don't do anything with this by default.
        -: 3725:            // It can optionally be overridden in the derived class.
    #####: 3726:        }
        -: 3727:
        -: 3728:        IConfigPtr m_config;
        -: 3729:        std::ostream& stream;
        -: 3730:
        -: 3731:        LazyStat<TestRunInfo> currentTestRunInfo;
        -: 3732:        LazyStat<GroupInfo> currentGroupInfo;
        -: 3733:        LazyStat<TestCaseInfo> currentTestCaseInfo;
        -: 3734:
        -: 3735:        std::vector<SectionInfo> m_sectionStack;
        -: 3736:        ReporterPreferences m_reporterPrefs;
        -: 3737:    };
        -: 3738:
        -: 3739:    template<typename DerivedT>
        -: 3740:    struct CumulativeReporterBase : IStreamingReporter {
        -: 3741:        template<typename T, typename ChildNodeT>
        -: 3742:        struct Node {
    #####: 3743:            explicit Node( T const& _value ) : value( _value ) {}
    #####: 3744:            virtual ~Node() {}
        -: 3745:
        -: 3746:            using ChildNodes = std::vector<std::shared_ptr<ChildNodeT>>;
        -: 3747:            T value;
        -: 3748:            ChildNodes children;
        -: 3749:        };
        -: 3750:        struct SectionNode {
    #####: 3751:            explicit SectionNode(SectionStats const& _stats) : stats(_stats) {}
    #####: 3752:            virtual ~SectionNode() = default;
        -: 3753:
        -: 3754:            bool operator == (SectionNode const& other) const {
        -: 3755:                return stats.sectionInfo.lineInfo == other.stats.sectionInfo.lineInfo;
        -: 3756:            }
        -: 3757:            bool operator == (std::shared_ptr<SectionNode> const& other) const {
        -: 3758:                return operator==(*other);
        -: 3759:            }
        -: 3760:
        -: 3761:            SectionStats stats;
        -: 3762:            using ChildSections = std::vector<std::shared_ptr<SectionNode>>;
        -: 3763:            using Assertions = std::vector<AssertionStats>;
        -: 3764:            ChildSections childSections;
        -: 3765:            Assertions assertions;
        -: 3766:            std::string stdOut;
        -: 3767:            std::string stdErr;
        -: 3768:        };
        -: 3769:
        -: 3770:        struct BySectionInfo {
    #####: 3771:            BySectionInfo( SectionInfo const& other ) : m_other( other ) {}
    #####: 3772:            BySectionInfo( BySectionInfo const& other ) : m_other( other.m_other ) {}
    #####: 3773:            bool operator() (std::shared_ptr<SectionNode> const& node) const {
    #####: 3774:                return ((node->stats.sectionInfo.name == m_other.name) &&
    #####: 3775:                        (node->stats.sectionInfo.lineInfo == m_other.lineInfo));
        -: 3776:            }
        -: 3777:            void operator=(BySectionInfo const&) = delete;
        -: 3778:
        -: 3779:        private:
        -: 3780:            SectionInfo const& m_other;
        -: 3781:        };
        -: 3782:
        -: 3783:        using TestCaseNode = Node<TestCaseStats, SectionNode>;
        -: 3784:        using TestGroupNode = Node<TestGroupStats, TestCaseNode>;
        -: 3785:        using TestRunNode = Node<TestRunStats, TestGroupNode>;
        -: 3786:
    #####: 3787:        CumulativeReporterBase( ReporterConfig const& _config )
        -: 3788:        :   m_config( _config.fullConfig() ),
    #####: 3789:            stream( _config.stream() )
        -: 3790:        {
    #####: 3791:            m_reporterPrefs.shouldRedirectStdOut = false;
    #####: 3792:            if( !DerivedT::getSupportedVerbosities().count( m_config->verbosity() ) )
    #####: 3793:                throw std::domain_error( "Verbosity level not supported by this reporter" );
    #####: 3794:        }
    #####: 3795:        ~CumulativeReporterBase() override = default;
        -: 3796:
    #####: 3797:        ReporterPreferences getPreferences() const override {
    #####: 3798:            return m_reporterPrefs;
        -: 3799:        }
        -: 3800:
    #####: 3801:        static std::set<Verbosity> getSupportedVerbosities() {
    #####: 3802:            return { Verbosity::Normal };
        -: 3803:        }
        -: 3804:
    #####: 3805:        void testRunStarting( TestRunInfo const& ) override {}
    #####: 3806:        void testGroupStarting( GroupInfo const& ) override {}
        -: 3807:
    #####: 3808:        void testCaseStarting( TestCaseInfo const& ) override {}
        -: 3809:
    #####: 3810:        void sectionStarting( SectionInfo const& sectionInfo ) override {
    #####: 3811:            SectionStats incompleteStats( sectionInfo, Counts(), 0, false );
    #####: 3812:            std::shared_ptr<SectionNode> node;
    #####: 3813:            if( m_sectionStack.empty() ) {
    #####: 3814:                if( !m_rootSection )
    #####: 3815:                    m_rootSection = std::make_shared<SectionNode>( incompleteStats );
    #####: 3816:                node = m_rootSection;
        -: 3817:            }
        -: 3818:            else {
    #####: 3819:                SectionNode& parentNode = *m_sectionStack.back();
        -: 3820:                auto it =
    #####: 3821:                    std::find_if(   parentNode.childSections.begin(),
        -: 3822:                                    parentNode.childSections.end(),
    #####: 3823:                                    BySectionInfo( sectionInfo ) );
    #####: 3824:                if( it == parentNode.childSections.end() ) {
    #####: 3825:                    node = std::make_shared<SectionNode>( incompleteStats );
    #####: 3826:                    parentNode.childSections.push_back( node );
        -: 3827:                }
        -: 3828:                else
    #####: 3829:                    node = *it;
        -: 3830:            }
    #####: 3831:            m_sectionStack.push_back( node );
    #####: 3832:            m_deepestSection = std::move(node);
    #####: 3833:        }
        -: 3834:
    #####: 3835:        void assertionStarting(AssertionInfo const&) override {}
        -: 3836:
    #####: 3837:        bool assertionEnded(AssertionStats const& assertionStats) override {
    #####: 3838:            assert(!m_sectionStack.empty());
        -: 3839:            // AssertionResult holds a pointer to a temporary DecomposedExpression,
        -: 3840:            // which getExpandedExpression() calls to build the expression string.
        -: 3841:            // Our section stack copy of the assertionResult will likely outlive the
        -: 3842:            // temporary, so it must be expanded or discarded now to avoid calling
        -: 3843:            // a destroyed object later.
    #####: 3844:            prepareExpandedExpression(const_cast<AssertionResult&>( assertionStats.assertionResult ) );
    #####: 3845:            SectionNode& sectionNode = *m_sectionStack.back();
    #####: 3846:            sectionNode.assertions.push_back(assertionStats);
    #####: 3847:            return true;
        -: 3848:        }
    #####: 3849:        void sectionEnded(SectionStats const& sectionStats) override {
    #####: 3850:            assert(!m_sectionStack.empty());
    #####: 3851:            SectionNode& node = *m_sectionStack.back();
    #####: 3852:            node.stats = sectionStats;
    #####: 3853:            m_sectionStack.pop_back();
    #####: 3854:        }
    #####: 3855:        void testCaseEnded(TestCaseStats const& testCaseStats) override {
    #####: 3856:            auto node = std::make_shared<TestCaseNode>(testCaseStats);
    #####: 3857:            assert(m_sectionStack.size() == 0);
    #####: 3858:            node->children.push_back(m_rootSection);
    #####: 3859:            m_testCases.push_back(node);
    #####: 3860:            m_rootSection.reset();
        -: 3861:
    #####: 3862:            assert(m_deepestSection);
    #####: 3863:            m_deepestSection->stdOut = testCaseStats.stdOut;
    #####: 3864:            m_deepestSection->stdErr = testCaseStats.stdErr;
    #####: 3865:        }
    #####: 3866:        void testGroupEnded(TestGroupStats const& testGroupStats) override {
    #####: 3867:            auto node = std::make_shared<TestGroupNode>(testGroupStats);
    #####: 3868:            node->children.swap(m_testCases);
    #####: 3869:            m_testGroups.push_back(node);
    #####: 3870:        }
    #####: 3871:        void testRunEnded(TestRunStats const& testRunStats) override {
    #####: 3872:            auto node = std::make_shared<TestRunNode>(testRunStats);
    #####: 3873:            node->children.swap(m_testGroups);
    #####: 3874:            m_testRuns.push_back(node);
    #####: 3875:            testRunEndedCumulative();
    #####: 3876:        }
        -: 3877:        virtual void testRunEndedCumulative() = 0;
        -: 3878:
    #####: 3879:        void skipTest(TestCaseInfo const&) override {}
        -: 3880:
        -: 3881:        IConfigPtr m_config;
        -: 3882:        std::ostream& stream;
        -: 3883:        std::vector<AssertionStats> m_assertions;
        -: 3884:        std::vector<std::vector<std::shared_ptr<SectionNode>>> m_sections;
        -: 3885:        std::vector<std::shared_ptr<TestCaseNode>> m_testCases;
        -: 3886:        std::vector<std::shared_ptr<TestGroupNode>> m_testGroups;
        -: 3887:
        -: 3888:        std::vector<std::shared_ptr<TestRunNode>> m_testRuns;
        -: 3889:
        -: 3890:        std::shared_ptr<SectionNode> m_rootSection;
        -: 3891:        std::shared_ptr<SectionNode> m_deepestSection;
        -: 3892:        std::vector<std::shared_ptr<SectionNode>> m_sectionStack;
        -: 3893:        ReporterPreferences m_reporterPrefs;
        -: 3894:    };
        -: 3895:
        -: 3896:    template<char C>
    #####: 3897:    char const* getLineOfChars() {
        -: 3898:        static char line[CATCH_CONFIG_CONSOLE_WIDTH] = {0};
    #####: 3899:        if( !*line ) {
    #####: 3900:            std::memset( line, C, CATCH_CONFIG_CONSOLE_WIDTH-1 );
    #####: 3901:            line[CATCH_CONFIG_CONSOLE_WIDTH-1] = 0;
        -: 3902:        }
    #####: 3903:        return line;
        -: 3904:    }
        -: 3905:
    #####: 3906:    struct TestEventListenerBase : StreamingReporterBase<TestEventListenerBase> {
        -: 3907:        TestEventListenerBase( ReporterConfig const& _config );
        -: 3908:
        -: 3909:        void assertionStarting(AssertionInfo const&) override;
        -: 3910:        bool assertionEnded(AssertionStats const&) override;
        -: 3911:    };
        -: 3912:
        -: 3913:} // end namespace Catch
        -: 3914:
        -: 3915:// end catch_reporter_bases.hpp
        -: 3916:// start catch_console_colour.h
        -: 3917:
        -: 3918:namespace Catch {
        -: 3919:
        -: 3920:    struct Colour {
        -: 3921:        enum Code {
        -: 3922:            None = 0,
        -: 3923:
        -: 3924:            White,
        -: 3925:            Red,
        -: 3926:            Green,
        -: 3927:            Blue,
        -: 3928:            Cyan,
        -: 3929:            Yellow,
        -: 3930:            Grey,
        -: 3931:
        -: 3932:            Bright = 0x10,
        -: 3933:
        -: 3934:            BrightRed = Bright | Red,
        -: 3935:            BrightGreen = Bright | Green,
        -: 3936:            LightGrey = Bright | Grey,
        -: 3937:            BrightWhite = Bright | White,
        -: 3938:            BrightYellow = Bright | Yellow,
        -: 3939:
        -: 3940:            // By intention
        -: 3941:            FileName = LightGrey,
        -: 3942:            Warning = BrightYellow,
        -: 3943:            ResultError = BrightRed,
        -: 3944:            ResultSuccess = BrightGreen,
        -: 3945:            ResultExpectedFailure = Warning,
        -: 3946:
        -: 3947:            Error = BrightRed,
        -: 3948:            Success = Green,
        -: 3949:
        -: 3950:            OriginalExpression = Cyan,
        -: 3951:            ReconstructedExpression = BrightYellow,
        -: 3952:
        -: 3953:            SecondaryText = LightGrey,
        -: 3954:            Headers = White
        -: 3955:        };
        -: 3956:
        -: 3957:        // Use constructed object for RAII guard
        -: 3958:        Colour( Code _colourCode );
        -: 3959:        Colour( Colour&& other ) noexcept;
        -: 3960:        Colour& operator=( Colour&& other ) noexcept;
        -: 3961:        ~Colour();
        -: 3962:
        -: 3963:        // Use static method for one-shot changes
        -: 3964:        static void use( Code _colourCode );
        -: 3965:
        -: 3966:    private:
        -: 3967:        bool m_moved = false;
        -: 3968:    };
        -: 3969:
        -: 3970:    std::ostream& operator << ( std::ostream& os, Colour const& );
        -: 3971:
        -: 3972:} // end namespace Catch
        -: 3973:
        -: 3974:// end catch_console_colour.h
        -: 3975:// start catch_reporter_registrars.hpp
        -: 3976:
        -: 3977:
        -: 3978:namespace Catch {
        -: 3979:
        -: 3980:    template<typename T>
        -: 3981:    class ReporterRegistrar {
        -: 3982:
    #####: 3983:        class ReporterFactory : public IReporterFactory {
        -: 3984:
    #####: 3985:            virtual IStreamingReporterPtr create( ReporterConfig const& config ) const override {
    #####: 3986:                return std::unique_ptr<T>( new T( config ) );
        -: 3987:            }
        -: 3988:
    #####: 3989:            virtual std::string getDescription() const override {
    #####: 3990:                return T::getDescription();
        -: 3991:            }
        -: 3992:        };
        -: 3993:
        -: 3994:    public:
        -: 3995:
    #####: 3996:        explicit ReporterRegistrar( std::string const& name ) {
    #####: 3997:            getMutableRegistryHub().registerReporter( name, std::make_shared<ReporterFactory>() );
    #####: 3998:        }
        -: 3999:    };
        -: 4000:
        -: 4001:    template<typename T>
        -: 4002:    class ListenerRegistrar {
        -: 4003:
        -: 4004:        class ListenerFactory : public IReporterFactory {
        -: 4005:
        -: 4006:            virtual IStreamingReporterPtr create( ReporterConfig const& config ) const override {
        -: 4007:                return std::unique_ptr<T>( new T( config ) );
        -: 4008:            }
        -: 4009:            virtual std::string getDescription() const override {
        -: 4010:                return std::string();
        -: 4011:            }
        -: 4012:        };
        -: 4013:
        -: 4014:    public:
        -: 4015:
        -: 4016:        ListenerRegistrar() {
        -: 4017:            getMutableRegistryHub().registerListener( std::make_shared<ListenerFactory>() );
        -: 4018:        }
        -: 4019:    };
        -: 4020:}
        -: 4021:
        -: 4022:#if !defined(CATCH_CONFIG_DISABLE)
        -: 4023:
        -: 4024:#define CATCH_REGISTER_REPORTER( name, reporterType ) \
        -: 4025:    CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS          \
        -: 4026:    namespace{ Catch::ReporterRegistrar<reporterType> catch_internal_RegistrarFor##reporterType( name ); } \
        -: 4027:    CATCH_INTERNAL_UNSUPPRESS_GLOBALS_WARNINGS
        -: 4028:
        -: 4029:#define CATCH_REGISTER_LISTENER( listenerType ) \
        -: 4030:     CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS   \
        -: 4031:     namespace{ Catch::ListenerRegistrar<listenerType> catch_internal_RegistrarFor##listenerType; } \
        -: 4032:     CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS
        -: 4033:#else // CATCH_CONFIG_DISABLE
        -: 4034:
        -: 4035:#define CATCH_REGISTER_REPORTER(name, reporterType)
        -: 4036:#define CATCH_REGISTER_LISTENER(listenerType)
        -: 4037:
        -: 4038:#endif // CATCH_CONFIG_DISABLE
        -: 4039:
        -: 4040:// end catch_reporter_registrars.hpp
        -: 4041:// Allow users to base their work off existing reporters
        -: 4042:// start catch_reporter_compact.h
        -: 4043:
        -: 4044:namespace Catch {
        -: 4045:
        -: 4046:    struct CompactReporter : StreamingReporterBase<CompactReporter> {
        -: 4047:
    #####: 4048:        using StreamingReporterBase::StreamingReporterBase;
        -: 4049:
        -: 4050:        ~CompactReporter() override;
        -: 4051:
        -: 4052:        static std::string getDescription();
        -: 4053:
        -: 4054:        ReporterPreferences getPreferences() const override;
        -: 4055:
        -: 4056:        void noMatchingTestCases(std::string const& spec) override;
        -: 4057:
        -: 4058:        void assertionStarting(AssertionInfo const&) override;
        -: 4059:
        -: 4060:        bool assertionEnded(AssertionStats const& _assertionStats) override;
        -: 4061:
        -: 4062:        void sectionEnded(SectionStats const& _sectionStats) override;
        -: 4063:
        -: 4064:        void testRunEnded(TestRunStats const& _testRunStats) override;
        -: 4065:
        -: 4066:    };
        -: 4067:
        -: 4068:} // end namespace Catch
        -: 4069:
        -: 4070:// end catch_reporter_compact.h
        -: 4071:// start catch_reporter_console.h
        -: 4072:
        -: 4073:#if defined(_MSC_VER)
        -: 4074:#pragma warning(push)
        -: 4075:#pragma warning(disable:4061) // Not all labels are EXPLICITLY handled in switch
        -: 4076:                              // Note that 4062 (not all labels are handled
        -: 4077:                              // and default is missing) is enabled
        -: 4078:#endif
        -: 4079:
        -: 4080:namespace Catch {
        -: 4081:    // Fwd decls
        -: 4082:    struct SummaryColumn;
        -: 4083:    class TablePrinter;
        -: 4084:
    #####: 4085:    struct ConsoleReporter : StreamingReporterBase<ConsoleReporter> {
        -: 4086:        std::unique_ptr<TablePrinter> m_tablePrinter;
        -: 4087:
        -: 4088:        ConsoleReporter(ReporterConfig const& config);
        -: 4089:        ~ConsoleReporter() override;
        -: 4090:        static std::string getDescription();
        -: 4091:
        -: 4092:        void noMatchingTestCases(std::string const& spec) override;
        -: 4093:
        -: 4094:        void assertionStarting(AssertionInfo const&) override;
        -: 4095:
        -: 4096:        bool assertionEnded(AssertionStats const& _assertionStats) override;
        -: 4097:
        -: 4098:        void sectionStarting(SectionInfo const& _sectionInfo) override;
        -: 4099:        void sectionEnded(SectionStats const& _sectionStats) override;
        -: 4100:
        -: 4101:        void benchmarkStarting(BenchmarkInfo const& info) override;
        -: 4102:        void benchmarkEnded(BenchmarkStats const& stats) override;
        -: 4103:
        -: 4104:        void testCaseEnded(TestCaseStats const& _testCaseStats) override;
        -: 4105:        void testGroupEnded(TestGroupStats const& _testGroupStats) override;
        -: 4106:        void testRunEnded(TestRunStats const& _testRunStats) override;
        -: 4107:
        -: 4108:    private:
        -: 4109:
        -: 4110:        void lazyPrint();
        -: 4111:
        -: 4112:        void lazyPrintWithoutClosingBenchmarkTable();
        -: 4113:        void lazyPrintRunInfo();
        -: 4114:        void lazyPrintGroupInfo();
        -: 4115:        void printTestCaseAndSectionHeader();
        -: 4116:
        -: 4117:        void printClosedHeader(std::string const& _name);
        -: 4118:        void printOpenHeader(std::string const& _name);
        -: 4119:
        -: 4120:        // if string has a : in first line will set indent to follow it on
        -: 4121:        // subsequent lines
        -: 4122:        void printHeaderString(std::string const& _string, std::size_t indent = 0);
        -: 4123:
        -: 4124:        void printTotals(Totals const& totals);
        -: 4125:        void printSummaryRow(std::string const& label, std::vector<SummaryColumn> const& cols, std::size_t row);
        -: 4126:
        -: 4127:        void printTotalsDivider(Totals const& totals);
        -: 4128:        void printSummaryDivider();
        -: 4129:
        -: 4130:    private:
        -: 4131:        bool m_headerPrinted = false;
        -: 4132:    };
        -: 4133:
        -: 4134:} // end namespace Catch
        -: 4135:
        -: 4136:#if defined(_MSC_VER)
        -: 4137:#pragma warning(pop)
        -: 4138:#endif
        -: 4139:
        -: 4140:// end catch_reporter_console.h
        -: 4141:// start catch_reporter_junit.h
        -: 4142:
        -: 4143:// start catch_xmlwriter.h
        -: 4144:
        -: 4145:#include <vector>
        -: 4146:
        -: 4147:namespace Catch {
        -: 4148:
    #####: 4149:    class XmlEncode {
        -: 4150:    public:
        -: 4151:        enum ForWhat { ForTextNodes, ForAttributes };
        -: 4152:
        -: 4153:        XmlEncode( std::string const& str, ForWhat forWhat = ForTextNodes );
        -: 4154:
        -: 4155:        void encodeTo( std::ostream& os ) const;
        -: 4156:
        -: 4157:        friend std::ostream& operator << ( std::ostream& os, XmlEncode const& xmlEncode );
        -: 4158:
        -: 4159:    private:
        -: 4160:        std::string m_str;
        -: 4161:        ForWhat m_forWhat;
        -: 4162:    };
        -: 4163:
        -: 4164:    class XmlWriter {
        -: 4165:    public:
        -: 4166:
        -: 4167:        class ScopedElement {
        -: 4168:        public:
        -: 4169:            ScopedElement( XmlWriter* writer );
        -: 4170:
        -: 4171:            ScopedElement( ScopedElement&& other ) noexcept;
        -: 4172:            ScopedElement& operator=( ScopedElement&& other ) noexcept;
        -: 4173:
        -: 4174:            ~ScopedElement();
        -: 4175:
        -: 4176:            ScopedElement& writeText( std::string const& text, bool indent = true );
        -: 4177:
        -: 4178:            template<typename T>
    #####: 4179:            ScopedElement& writeAttribute( std::string const& name, T const& attribute ) {
    #####: 4180:                m_writer->writeAttribute( name, attribute );
    #####: 4181:                return *this;
        -: 4182:            }
        -: 4183:
        -: 4184:        private:
        -: 4185:            mutable XmlWriter* m_writer = nullptr;
        -: 4186:        };
        -: 4187:
        -: 4188:        XmlWriter( std::ostream& os = Catch::cout() );
        -: 4189:        ~XmlWriter();
        -: 4190:
        -: 4191:        XmlWriter( XmlWriter const& ) = delete;
        -: 4192:        XmlWriter& operator=( XmlWriter const& ) = delete;
        -: 4193:
        -: 4194:        XmlWriter& startElement( std::string const& name );
        -: 4195:
        -: 4196:        ScopedElement scopedElement( std::string const& name );
        -: 4197:
        -: 4198:        XmlWriter& endElement();
        -: 4199:
        -: 4200:        XmlWriter& writeAttribute( std::string const& name, std::string const& attribute );
        -: 4201:
        -: 4202:        XmlWriter& writeAttribute( std::string const& name, bool attribute );
        -: 4203:
        -: 4204:        template<typename T>
    #####: 4205:        XmlWriter& writeAttribute( std::string const& name, T const& attribute ) {
    #####: 4206:            ReusableStringStream rss;
    #####: 4207:            rss << attribute;
    #####: 4208:            return writeAttribute( name, rss.str() );
        -: 4209:        }
        -: 4210:
        -: 4211:        XmlWriter& writeText( std::string const& text, bool indent = true );
        -: 4212:
        -: 4213:        XmlWriter& writeComment( std::string const& text );
        -: 4214:
        -: 4215:        void writeStylesheetRef( std::string const& url );
        -: 4216:
        -: 4217:        XmlWriter& writeBlankLine();
        -: 4218:
        -: 4219:        void ensureTagClosed();
        -: 4220:
        -: 4221:    private:
        -: 4222:
        -: 4223:        void writeDeclaration();
        -: 4224:
        -: 4225:        void newlineIfNecessary();
        -: 4226:
        -: 4227:        bool m_tagIsOpen = false;
        -: 4228:        bool m_needsNewline = false;
        -: 4229:        std::vector<std::string> m_tags;
        -: 4230:        std::string m_indent;
        -: 4231:        std::ostream& m_os;
        -: 4232:    };
        -: 4233:
        -: 4234:}
        -: 4235:
        -: 4236:// end catch_xmlwriter.h
        -: 4237:namespace Catch {
        -: 4238:
        -: 4239:    class JunitReporter : public CumulativeReporterBase<JunitReporter> {
        -: 4240:    public:
        -: 4241:        JunitReporter(ReporterConfig const& _config);
        -: 4242:
        -: 4243:        ~JunitReporter() override;
        -: 4244:
        -: 4245:        static std::string getDescription();
        -: 4246:
        -: 4247:        void noMatchingTestCases(std::string const& /*spec*/) override;
        -: 4248:
        -: 4249:        void testRunStarting(TestRunInfo const& runInfo) override;
        -: 4250:
        -: 4251:        void testGroupStarting(GroupInfo const& groupInfo) override;
        -: 4252:
        -: 4253:        void testCaseStarting(TestCaseInfo const& testCaseInfo) override;
        -: 4254:        bool assertionEnded(AssertionStats const& assertionStats) override;
        -: 4255:
        -: 4256:        void testCaseEnded(TestCaseStats const& testCaseStats) override;
        -: 4257:
        -: 4258:        void testGroupEnded(TestGroupStats const& testGroupStats) override;
        -: 4259:
        -: 4260:        void testRunEndedCumulative() override;
        -: 4261:
        -: 4262:        void writeGroup(TestGroupNode const& groupNode, double suiteTime);
        -: 4263:
        -: 4264:        void writeTestCase(TestCaseNode const& testCaseNode);
        -: 4265:
        -: 4266:        void writeSection(std::string const& className,
        -: 4267:                          std::string const& rootName,
        -: 4268:                          SectionNode const& sectionNode);
        -: 4269:
        -: 4270:        void writeAssertions(SectionNode const& sectionNode);
        -: 4271:        void writeAssertion(AssertionStats const& stats);
        -: 4272:
        -: 4273:        XmlWriter xml;
        -: 4274:        Timer suiteTimer;
        -: 4275:        std::string stdOutForSuite;
        -: 4276:        std::string stdErrForSuite;
        -: 4277:        unsigned int unexpectedExceptions = 0;
        -: 4278:        bool m_okToFail = false;
        -: 4279:    };
        -: 4280:
        -: 4281:} // end namespace Catch
        -: 4282:
        -: 4283:// end catch_reporter_junit.h
        -: 4284:// start catch_reporter_xml.h
        -: 4285:
        -: 4286:namespace Catch {
    #####: 4287:    class XmlReporter : public StreamingReporterBase<XmlReporter> {
        -: 4288:    public:
        -: 4289:        XmlReporter(ReporterConfig const& _config);
        -: 4290:
        -: 4291:        ~XmlReporter() override;
        -: 4292:
        -: 4293:        static std::string getDescription();
        -: 4294:
        -: 4295:        virtual std::string getStylesheetRef() const;
        -: 4296:
        -: 4297:        void writeSourceInfo(SourceLineInfo const& sourceInfo);
        -: 4298:
        -: 4299:    public: // StreamingReporterBase
        -: 4300:
        -: 4301:        void noMatchingTestCases(std::string const& s) override;
        -: 4302:
        -: 4303:        void testRunStarting(TestRunInfo const& testInfo) override;
        -: 4304:
        -: 4305:        void testGroupStarting(GroupInfo const& groupInfo) override;
        -: 4306:
        -: 4307:        void testCaseStarting(TestCaseInfo const& testInfo) override;
        -: 4308:
        -: 4309:        void sectionStarting(SectionInfo const& sectionInfo) override;
        -: 4310:
        -: 4311:        void assertionStarting(AssertionInfo const&) override;
        -: 4312:
        -: 4313:        bool assertionEnded(AssertionStats const& assertionStats) override;
        -: 4314:
        -: 4315:        void sectionEnded(SectionStats const& sectionStats) override;
        -: 4316:
        -: 4317:        void testCaseEnded(TestCaseStats const& testCaseStats) override;
        -: 4318:
        -: 4319:        void testGroupEnded(TestGroupStats const& testGroupStats) override;
        -: 4320:
        -: 4321:        void testRunEnded(TestRunStats const& testRunStats) override;
        -: 4322:
        -: 4323:    private:
        -: 4324:        Timer m_testCaseTimer;
        -: 4325:        XmlWriter m_xml;
        -: 4326:        int m_sectionDepth = 0;
        -: 4327:    };
        -: 4328:
        -: 4329:} // end namespace Catch
        -: 4330:
        -: 4331:// end catch_reporter_xml.h
        -: 4332:
        -: 4333:// end catch_external_interfaces.h
        -: 4334:#endif
        -: 4335:
        -: 4336:#endif // ! CATCH_CONFIG_IMPL_ONLY
        -: 4337:
        -: 4338:#ifdef CATCH_IMPL
        -: 4339:// start catch_impl.hpp
        -: 4340:
        -: 4341:#ifdef __clang__
        -: 4342:#pragma clang diagnostic push
        -: 4343:#pragma clang diagnostic ignored "-Wweak-vtables"
        -: 4344:#endif
        -: 4345:
        -: 4346:// Keep these here for external reporters
        -: 4347:// start catch_test_case_tracker.h
        -: 4348:
        -: 4349:#include <string>
        -: 4350:#include <vector>
        -: 4351:#include <memory>
        -: 4352:
        -: 4353:namespace Catch {
        -: 4354:namespace TestCaseTracking {
        -: 4355:
    #####: 4356:    struct NameAndLocation {
        -: 4357:        std::string name;
        -: 4358:        SourceLineInfo location;
        -: 4359:
        -: 4360:        NameAndLocation( std::string const& _name, SourceLineInfo const& _location );
        -: 4361:    };
        -: 4362:
        -: 4363:    struct ITracker;
        -: 4364:
        -: 4365:    using ITrackerPtr = std::shared_ptr<ITracker>;
        -: 4366:
    #####: 4367:    struct ITracker {
        -: 4368:        virtual ~ITracker();
        -: 4369:
        -: 4370:        // static queries
        -: 4371:        virtual NameAndLocation const& nameAndLocation() const = 0;
        -: 4372:
        -: 4373:        // dynamic queries
        -: 4374:        virtual bool isComplete() const = 0; // Successfully completed or failed
        -: 4375:        virtual bool isSuccessfullyCompleted() const = 0;
        -: 4376:        virtual bool isOpen() const = 0; // Started but not complete
        -: 4377:        virtual bool hasChildren() const = 0;
        -: 4378:
        -: 4379:        virtual ITracker& parent() = 0;
        -: 4380:
        -: 4381:        // actions
        -: 4382:        virtual void close() = 0; // Successfully complete
        -: 4383:        virtual void fail() = 0;
        -: 4384:        virtual void markAsNeedingAnotherRun() = 0;
        -: 4385:
        -: 4386:        virtual void addChild( ITrackerPtr const& child ) = 0;
        -: 4387:        virtual ITrackerPtr findChild( NameAndLocation const& nameAndLocation ) = 0;
        -: 4388:        virtual void openChild() = 0;
        -: 4389:
        -: 4390:        // Debug/ checking
        -: 4391:        virtual bool isSectionTracker() const = 0;
        -: 4392:        virtual bool isIndexTracker() const = 0;
        -: 4393:    };
        -: 4394:
    #####: 4395:    class TrackerContext {
        -: 4396:
        -: 4397:        enum RunState {
        -: 4398:            NotStarted,
        -: 4399:            Executing,
        -: 4400:            CompletedCycle
        -: 4401:        };
        -: 4402:
        -: 4403:        ITrackerPtr m_rootTracker;
        -: 4404:        ITracker* m_currentTracker = nullptr;
        -: 4405:        RunState m_runState = NotStarted;
        -: 4406:
        -: 4407:    public:
        -: 4408:
        -: 4409:        static TrackerContext& instance();
        -: 4410:
        -: 4411:        ITracker& startRun();
        -: 4412:        void endRun();
        -: 4413:
        -: 4414:        void startCycle();
        -: 4415:        void completeCycle();
        -: 4416:
        -: 4417:        bool completedCycle() const;
        -: 4418:        ITracker& currentTracker();
        -: 4419:        void setCurrentTracker( ITracker* tracker );
        -: 4420:    };
        -: 4421:
    #####: 4422:    class TrackerBase : public ITracker {
        -: 4423:    protected:
        -: 4424:        enum CycleState {
        -: 4425:            NotStarted,
        -: 4426:            Executing,
        -: 4427:            ExecutingChildren,
        -: 4428:            NeedsAnotherRun,
        -: 4429:            CompletedSuccessfully,
        -: 4430:            Failed
        -: 4431:        };
        -: 4432:
    #####: 4433:        class TrackerHasName {
        -: 4434:            NameAndLocation m_nameAndLocation;
        -: 4435:        public:
        -: 4436:            TrackerHasName( NameAndLocation const& nameAndLocation );
        -: 4437:            bool operator ()( ITrackerPtr const& tracker ) const;
        -: 4438:        };
        -: 4439:
        -: 4440:        using Children = std::vector<ITrackerPtr>;
        -: 4441:        NameAndLocation m_nameAndLocation;
        -: 4442:        TrackerContext& m_ctx;
        -: 4443:        ITracker* m_parent;
        -: 4444:        Children m_children;
        -: 4445:        CycleState m_runState = NotStarted;
        -: 4446:
        -: 4447:    public:
        -: 4448:        TrackerBase( NameAndLocation const& nameAndLocation, TrackerContext& ctx, ITracker* parent );
        -: 4449:
        -: 4450:        NameAndLocation const& nameAndLocation() const override;
        -: 4451:        bool isComplete() const override;
        -: 4452:        bool isSuccessfullyCompleted() const override;
        -: 4453:        bool isOpen() const override;
        -: 4454:        bool hasChildren() const override;
        -: 4455:
        -: 4456:        void addChild( ITrackerPtr const& child ) override;
        -: 4457:
        -: 4458:        ITrackerPtr findChild( NameAndLocation const& nameAndLocation ) override;
        -: 4459:        ITracker& parent() override;
        -: 4460:
        -: 4461:        void openChild() override;
        -: 4462:
        -: 4463:        bool isSectionTracker() const override;
        -: 4464:        bool isIndexTracker() const override;
        -: 4465:
        -: 4466:        void open();
        -: 4467:
        -: 4468:        void close() override;
        -: 4469:        void fail() override;
        -: 4470:        void markAsNeedingAnotherRun() override;
        -: 4471:
        -: 4472:    private:
        -: 4473:        void moveToParent();
        -: 4474:        void moveToThis();
        -: 4475:    };
        -: 4476:
    #####: 4477:    class SectionTracker : public TrackerBase {
        -: 4478:        std::vector<std::string> m_filters;
        -: 4479:    public:
        -: 4480:        SectionTracker( NameAndLocation const& nameAndLocation, TrackerContext& ctx, ITracker* parent );
        -: 4481:
        -: 4482:        bool isSectionTracker() const override;
        -: 4483:
        -: 4484:        static SectionTracker& acquire( TrackerContext& ctx, NameAndLocation const& nameAndLocation );
        -: 4485:
        -: 4486:        void tryOpen();
        -: 4487:
        -: 4488:        void addInitialFilters( std::vector<std::string> const& filters );
        -: 4489:        void addNextFilters( std::vector<std::string> const& filters );
        -: 4490:    };
        -: 4491:
    #####: 4492:    class IndexTracker : public TrackerBase {
        -: 4493:        int m_size;
        -: 4494:        int m_index = -1;
        -: 4495:    public:
        -: 4496:        IndexTracker( NameAndLocation const& nameAndLocation, TrackerContext& ctx, ITracker* parent, int size );
        -: 4497:
        -: 4498:        bool isIndexTracker() const override;
        -: 4499:        void close() override;
        -: 4500:
        -: 4501:        static IndexTracker& acquire( TrackerContext& ctx, NameAndLocation const& nameAndLocation, int size );
        -: 4502:
        -: 4503:        int index() const;
        -: 4504:
        -: 4505:        void moveNext();
        -: 4506:    };
        -: 4507:
        -: 4508:} // namespace TestCaseTracking
        -: 4509:
        -: 4510:using TestCaseTracking::ITracker;
        -: 4511:using TestCaseTracking::TrackerContext;
        -: 4512:using TestCaseTracking::SectionTracker;
        -: 4513:using TestCaseTracking::IndexTracker;
        -: 4514:
        -: 4515:} // namespace Catch
        -: 4516:
        -: 4517:// end catch_test_case_tracker.h
        -: 4518:
        -: 4519:// start catch_leak_detector.h
        -: 4520:
        -: 4521:namespace Catch {
        -: 4522:
        -: 4523:    struct LeakDetector {
        -: 4524:        LeakDetector();
        -: 4525:    };
        -: 4526:
        -: 4527:}
        -: 4528:// end catch_leak_detector.h
        -: 4529:// Cpp files will be included in the single-header file here
        -: 4530:// start catch_approx.cpp
        -: 4531:
        -: 4532:#include <cmath>
        -: 4533:#include <limits>
        -: 4534:
        -: 4535:namespace {
        -: 4536:
        -: 4537:// Performs equivalent check of std::fabs(lhs - rhs) <= margin
        -: 4538:// But without the subtraction to allow for INFINITY in comparison
    #####: 4539:bool marginComparison(double lhs, double rhs, double margin) {
    #####: 4540:    return (lhs + margin >= rhs) && (rhs + margin >= lhs);
        -: 4541:}
        -: 4542:
        -: 4543:}
        -: 4544:
        -: 4545:namespace Catch {
        -: 4546:namespace Detail {
        -: 4547:
    #####: 4548:    Approx::Approx ( double value )
    #####: 4549:    :   m_epsilon( std::numeric_limits<float>::epsilon()*100 ),
        -: 4550:        m_margin( 0.0 ),
        -: 4551:        m_scale( 0.0 ),
    #####: 4552:        m_value( value )
    #####: 4553:    {}
        -: 4554:
    #####: 4555:    Approx Approx::custom() {
    #####: 4556:        return Approx( 0 );
        -: 4557:    }
        -: 4558:
    #####: 4559:    std::string Approx::toString() const {
    #####: 4560:        ReusableStringStream rss;
    #####: 4561:        rss << "Approx( " << ::Catch::Detail::stringify( m_value ) << " )";
    #####: 4562:        return rss.str();
        -: 4563:    }
        -: 4564:
    #####: 4565:    bool Approx::equalityComparisonImpl(const double other) const {
        -: 4566:        // First try with fixed margin, then compute margin based on epsilon, scale and Approx's value
        -: 4567:        // Thanks to Richard Harris for his help refining the scaled margin value
    #####: 4568:        return marginComparison(m_value, other, m_margin) || marginComparison(m_value, other, m_epsilon * (m_scale + std::fabs(m_value)));
        -: 4569:    }
        -: 4570:
        -: 4571:} // end namespace Detail
        -: 4572:
    #####: 4573:std::string StringMaker<Catch::Detail::Approx>::convert(Catch::Detail::Approx const& value) {
    #####: 4574:    return value.toString();
        -: 4575:}
        -: 4576:
        -: 4577:} // end namespace Catch
        -: 4578:// end catch_approx.cpp
        -: 4579:// start catch_assertionhandler.cpp
        -: 4580:
        -: 4581:// start catch_context.h
        -: 4582:
        -: 4583:#include <memory>
        -: 4584:
        -: 4585:namespace Catch {
        -: 4586:
        -: 4587:    struct IResultCapture;
        -: 4588:    struct IRunner;
        -: 4589:    struct IConfig;
        -: 4590:    struct IMutableContext;
        -: 4591:
        -: 4592:    using IConfigPtr = std::shared_ptr<IConfig const>;
        -: 4593:
    #####: 4594:    struct IContext
        -: 4595:    {
        -: 4596:        virtual ~IContext();
        -: 4597:
        -: 4598:        virtual IResultCapture* getResultCapture() = 0;
        -: 4599:        virtual IRunner* getRunner() = 0;
        -: 4600:        virtual IConfigPtr const& getConfig() const = 0;
        -: 4601:    };
        -: 4602:
    #####: 4603:    struct IMutableContext : IContext
        -: 4604:    {
        -: 4605:        virtual ~IMutableContext();
        -: 4606:        virtual void setResultCapture( IResultCapture* resultCapture ) = 0;
        -: 4607:        virtual void setRunner( IRunner* runner ) = 0;
        -: 4608:        virtual void setConfig( IConfigPtr const& config ) = 0;
        -: 4609:
        -: 4610:    private:
        -: 4611:        static IMutableContext *currentContext;
        -: 4612:        friend IMutableContext& getCurrentMutableContext();
        -: 4613:        friend void cleanUpContext();
        -: 4614:        static void createContext();
        -: 4615:    };
        -: 4616:
    #####: 4617:    inline IMutableContext& getCurrentMutableContext()
        -: 4618:    {
    #####: 4619:        if( !IMutableContext::currentContext )
    #####: 4620:            IMutableContext::createContext();
    #####: 4621:        return *IMutableContext::currentContext;
        -: 4622:    }
        -: 4623:
    #####: 4624:    inline IContext& getCurrentContext()
        -: 4625:    {
    #####: 4626:        return getCurrentMutableContext();
        -: 4627:    }
        -: 4628:
        -: 4629:    void cleanUpContext();
        -: 4630:}
        -: 4631:
        -: 4632:// end catch_context.h
        -: 4633:// start catch_debugger.h
        -: 4634:
        -: 4635:namespace Catch {
        -: 4636:    bool isDebuggerActive();
        -: 4637:}
        -: 4638:
        -: 4639:#ifdef CATCH_PLATFORM_MAC
        -: 4640:
        -: 4641:    #define CATCH_TRAP() __asm__("int $3\n" : : ) /* NOLINT */
        -: 4642:
        -: 4643:#elif defined(CATCH_PLATFORM_LINUX)
        -: 4644:    // If we can use inline assembler, do it because this allows us to break
        -: 4645:    // directly at the location of the failing check instead of breaking inside
        -: 4646:    // raise() called from it, i.e. one stack frame below.
        -: 4647:    #if defined(__GNUC__) && (defined(__i386) || defined(__x86_64))
        -: 4648:        #define CATCH_TRAP() asm volatile ("int $3") /* NOLINT */
        -: 4649:    #else // Fall back to the generic way.
        -: 4650:        #include <signal.h>
        -: 4651:
        -: 4652:        #define CATCH_TRAP() raise(SIGTRAP)
        -: 4653:    #endif
        -: 4654:#elif defined(_MSC_VER)
        -: 4655:    #define CATCH_TRAP() __debugbreak()
        -: 4656:#elif defined(__MINGW32__)
        -: 4657:    extern "C" __declspec(dllimport) void __stdcall DebugBreak();
        -: 4658:    #define CATCH_TRAP() DebugBreak()
        -: 4659:#endif
        -: 4660:
        -: 4661:#ifdef CATCH_TRAP
        -: 4662:    #define CATCH_BREAK_INTO_DEBUGGER() if( Catch::isDebuggerActive() ) { CATCH_TRAP(); }
        -: 4663:#else
        -: 4664:    namespace Catch {
        -: 4665:        inline void doNothing() {}
        -: 4666:    }
        -: 4667:    #define CATCH_BREAK_INTO_DEBUGGER() Catch::doNothing()
        -: 4668:#endif
        -: 4669:
        -: 4670:// end catch_debugger.h
        -: 4671:// start catch_run_context.h
        -: 4672:
        -: 4673:// start catch_fatal_condition.h
        -: 4674:
        -: 4675:// start catch_windows_h_proxy.h
        -: 4676:
        -: 4677:
        -: 4678:#if defined(CATCH_PLATFORM_WINDOWS)
        -: 4679:
        -: 4680:#if !defined(NOMINMAX) && !defined(CATCH_CONFIG_NO_NOMINMAX)
        -: 4681:#  define CATCH_DEFINED_NOMINMAX
        -: 4682:#  define NOMINMAX
        -: 4683:#endif
        -: 4684:#if !defined(WIN32_LEAN_AND_MEAN) && !defined(CATCH_CONFIG_NO_WIN32_LEAN_AND_MEAN)
        -: 4685:#  define CATCH_DEFINED_WIN32_LEAN_AND_MEAN
        -: 4686:#  define WIN32_LEAN_AND_MEAN
        -: 4687:#endif
        -: 4688:
        -: 4689:#ifdef __AFXDLL
        -: 4690:#include <AfxWin.h>
        -: 4691:#else
        -: 4692:#include <windows.h>
        -: 4693:#endif
        -: 4694:
        -: 4695:#ifdef CATCH_DEFINED_NOMINMAX
        -: 4696:#  undef NOMINMAX
        -: 4697:#endif
        -: 4698:#ifdef CATCH_DEFINED_WIN32_LEAN_AND_MEAN
        -: 4699:#  undef WIN32_LEAN_AND_MEAN
        -: 4700:#endif
        -: 4701:
        -: 4702:#endif // defined(CATCH_PLATFORM_WINDOWS)
        -: 4703:
        -: 4704:// end catch_windows_h_proxy.h
        -: 4705:#if defined( CATCH_CONFIG_WINDOWS_SEH )
        -: 4706:
        -: 4707:namespace Catch {
        -: 4708:
        -: 4709:    struct FatalConditionHandler {
        -: 4710:
        -: 4711:        static LONG CALLBACK handleVectoredException(PEXCEPTION_POINTERS ExceptionInfo);
        -: 4712:        FatalConditionHandler();
        -: 4713:        static void reset();
        -: 4714:        ~FatalConditionHandler();
        -: 4715:
        -: 4716:    private:
        -: 4717:        static bool isSet;
        -: 4718:        static ULONG guaranteeSize;
        -: 4719:        static PVOID exceptionHandlerHandle;
        -: 4720:    };
        -: 4721:
        -: 4722:} // namespace Catch
        -: 4723:
        -: 4724:#elif defined ( CATCH_CONFIG_POSIX_SIGNALS )
        -: 4725:
        -: 4726:#include <signal.h>
        -: 4727:
        -: 4728:namespace Catch {
        -: 4729:
        -: 4730:    struct FatalConditionHandler {
        -: 4731:
        -: 4732:        static bool isSet;
        -: 4733:        static struct sigaction oldSigActions[];
        -: 4734:        static stack_t oldSigStack;
        -: 4735:        static char altStackMem[];
        -: 4736:
        -: 4737:        static void handleSignal( int sig );
        -: 4738:
        -: 4739:        FatalConditionHandler();
        -: 4740:        ~FatalConditionHandler();
        -: 4741:        static void reset();
        -: 4742:    };
        -: 4743:
        -: 4744:} // namespace Catch
        -: 4745:
        -: 4746:#else
        -: 4747:
        -: 4748:namespace Catch {
        -: 4749:    struct FatalConditionHandler {
        -: 4750:        void reset();
        -: 4751:    };
        -: 4752:}
        -: 4753:
        -: 4754:#endif
        -: 4755:
        -: 4756:// end catch_fatal_condition.h
        -: 4757:#include <string>
        -: 4758:
        -: 4759:namespace Catch {
        -: 4760:
        -: 4761:    struct IMutableContext;
        -: 4762:
        -: 4763:    ///////////////////////////////////////////////////////////////////////////
        -: 4764:
        -: 4765:    class RunContext : public IResultCapture, public IRunner {
        -: 4766:
        -: 4767:    public:
        -: 4768:        RunContext( RunContext const& ) = delete;
        -: 4769:        RunContext& operator =( RunContext const& ) = delete;
        -: 4770:
        -: 4771:        explicit RunContext( IConfigPtr const& _config, IStreamingReporterPtr&& reporter );
        -: 4772:
        -: 4773:        ~RunContext() override;
        -: 4774:
        -: 4775:        void testGroupStarting( std::string const& testSpec, std::size_t groupIndex, std::size_t groupsCount );
        -: 4776:        void testGroupEnded( std::string const& testSpec, Totals const& totals, std::size_t groupIndex, std::size_t groupsCount );
        -: 4777:
        -: 4778:        Totals runTest(TestCase const& testCase);
        -: 4779:
        -: 4780:        IConfigPtr config() const;
        -: 4781:        IStreamingReporter& reporter() const;
        -: 4782:
        -: 4783:    public: // IResultCapture
        -: 4784:
        -: 4785:        // Assertion handlers
        -: 4786:        void handleExpr
        -: 4787:                (   AssertionInfo const& info,
        -: 4788:                    ITransientExpression const& expr,
        -: 4789:                    AssertionReaction& reaction ) override;
        -: 4790:        void handleMessage
        -: 4791:                (   AssertionInfo const& info,
        -: 4792:                    ResultWas::OfType resultType,
        -: 4793:                    StringRef const& message,
        -: 4794:                    AssertionReaction& reaction ) override;
        -: 4795:        void handleUnexpectedExceptionNotThrown
        -: 4796:                (   AssertionInfo const& info,
        -: 4797:                    AssertionReaction& reaction ) override;
        -: 4798:        void handleUnexpectedInflightException
        -: 4799:                (   AssertionInfo const& info,
        -: 4800:                    std::string const& message,
        -: 4801:                    AssertionReaction& reaction ) override;
        -: 4802:        void handleIncomplete
        -: 4803:                (   AssertionInfo const& info ) override;
        -: 4804:        void handleNonExpr
        -: 4805:                (   AssertionInfo const &info,
        -: 4806:                    ResultWas::OfType resultType,
        -: 4807:                    AssertionReaction &reaction ) override;
        -: 4808:
        -: 4809:        bool sectionStarted( SectionInfo const& sectionInfo, Counts& assertions ) override;
        -: 4810:
        -: 4811:        void sectionEnded( SectionEndInfo const& endInfo ) override;
        -: 4812:        void sectionEndedEarly( SectionEndInfo const& endInfo ) override;
        -: 4813:
        -: 4814:        void benchmarkStarting( BenchmarkInfo const& info ) override;
        -: 4815:        void benchmarkEnded( BenchmarkStats const& stats ) override;
        -: 4816:
        -: 4817:        void pushScopedMessage( MessageInfo const& message ) override;
        -: 4818:        void popScopedMessage( MessageInfo const& message ) override;
        -: 4819:
        -: 4820:        std::string getCurrentTestName() const override;
        -: 4821:
        -: 4822:        const AssertionResult* getLastResult() const override;
        -: 4823:
        -: 4824:        void exceptionEarlyReported() override;
        -: 4825:
        -: 4826:        void handleFatalErrorCondition( StringRef message ) override;
        -: 4827:
        -: 4828:        bool lastAssertionPassed() override;
        -: 4829:
        -: 4830:        void assertionPassed() override;
        -: 4831:
        -: 4832:    public:
        -: 4833:        // !TBD We need to do this another way!
        -: 4834:        bool aborting() const override;
        -: 4835:
        -: 4836:    private:
        -: 4837:
        -: 4838:        void runCurrentTest( std::string& redirectedCout, std::string& redirectedCerr );
        -: 4839:        void invokeActiveTestCase();
        -: 4840:
        -: 4841:        void resetAssertionInfo();
        -: 4842:        bool testForMissingAssertions( Counts& assertions );
        -: 4843:
        -: 4844:        void assertionEnded( AssertionResult const& result );
        -: 4845:        void reportExpr
        -: 4846:                (   AssertionInfo const &info,
        -: 4847:                    ResultWas::OfType resultType,
        -: 4848:                    ITransientExpression const *expr,
        -: 4849:                    bool negated );
        -: 4850:
        -: 4851:        void populateReaction( AssertionReaction& reaction );
        -: 4852:
        -: 4853:    private:
        -: 4854:
        -: 4855:        void handleUnfinishedSections();
        -: 4856:
        -: 4857:        TestRunInfo m_runInfo;
        -: 4858:        IMutableContext& m_context;
        -: 4859:        TestCase const* m_activeTestCase = nullptr;
        -: 4860:        ITracker* m_testCaseTracker;
        -: 4861:        Option<AssertionResult> m_lastResult;
        -: 4862:
        -: 4863:        IConfigPtr m_config;
        -: 4864:        Totals m_totals;
        -: 4865:        IStreamingReporterPtr m_reporter;
        -: 4866:        std::vector<MessageInfo> m_messages;
        -: 4867:        AssertionInfo m_lastAssertionInfo;
        -: 4868:        std::vector<SectionEndInfo> m_unfinishedSections;
        -: 4869:        std::vector<ITracker*> m_activeSections;
        -: 4870:        TrackerContext m_trackerContext;
        -: 4871:        bool m_lastAssertionPassed = false;
        -: 4872:        bool m_shouldReportUnexpected = true;
        -: 4873:        bool m_includeSuccessfulResults;
        -: 4874:    };
        -: 4875:
        -: 4876:} // end namespace Catch
        -: 4877:
        -: 4878:// end catch_run_context.h
        -: 4879:namespace Catch {
        -: 4880:
    #####: 4881:    auto operator <<( std::ostream& os, ITransientExpression const& expr ) -> std::ostream& {
    #####: 4882:        expr.streamReconstructedExpression( os );
    #####: 4883:        return os;
        -: 4884:    }
        -: 4885:
    #####: 4886:    LazyExpression::LazyExpression( bool isNegated )
    #####: 4887:    :   m_isNegated( isNegated )
    #####: 4888:    {}
        -: 4889:
    #####: 4890:    LazyExpression::LazyExpression( LazyExpression const& other ) : m_isNegated( other.m_isNegated ) {}
        -: 4891:
    #####: 4892:    LazyExpression::operator bool() const {
    #####: 4893:        return m_transientExpression != nullptr;
        -: 4894:    }
        -: 4895:
    #####: 4896:    auto operator << ( std::ostream& os, LazyExpression const& lazyExpr ) -> std::ostream& {
    #####: 4897:        if( lazyExpr.m_isNegated )
    #####: 4898:            os << "!";
        -: 4899:
    #####: 4900:        if( lazyExpr ) {
    #####: 4901:            if( lazyExpr.m_isNegated && lazyExpr.m_transientExpression->isBinaryExpression() )
    #####: 4902:                os << "(" << *lazyExpr.m_transientExpression << ")";
        -: 4903:            else
    #####: 4904:                os << *lazyExpr.m_transientExpression;
        -: 4905:        }
        -: 4906:        else {
    #####: 4907:            os << "{** error - unchecked empty expression requested **}";
        -: 4908:        }
    #####: 4909:        return os;
        -: 4910:    }
        -: 4911:
    #####: 4912:    AssertionHandler::AssertionHandler
        -: 4913:        (   StringRef macroName,
        -: 4914:            SourceLineInfo const& lineInfo,
        -: 4915:            StringRef capturedExpression,
    #####: 4916:            ResultDisposition::Flags resultDisposition )
        -: 4917:    :   m_assertionInfo{ macroName, lineInfo, capturedExpression, resultDisposition },
    #####: 4918:        m_resultCapture( getResultCapture() )
    #####: 4919:    {}
        -: 4920:
    #####: 4921:    void AssertionHandler::handleExpr( ITransientExpression const& expr ) {
    #####: 4922:        m_resultCapture.handleExpr( m_assertionInfo, expr, m_reaction );
    #####: 4923:    }
    #####: 4924:    void AssertionHandler::handleMessage(ResultWas::OfType resultType, StringRef const& message) {
    #####: 4925:        m_resultCapture.handleMessage( m_assertionInfo, resultType, message, m_reaction );
    #####: 4926:    }
        -: 4927:
    #####: 4928:    auto AssertionHandler::allowThrows() const -> bool {
    #####: 4929:        return getCurrentContext().getConfig()->allowThrows();
        -: 4930:    }
        -: 4931:
    #####: 4932:    void AssertionHandler::complete() {
    #####: 4933:        setCompleted();
    #####: 4934:        if( m_reaction.shouldDebugBreak ) {
        -: 4935:
        -: 4936:            // If you find your debugger stopping you here then go one level up on the
        -: 4937:            // call-stack for the code that caused it (typically a failed assertion)
        -: 4938:
        -: 4939:            // (To go back to the test and change execution, jump over the throw, next)
    #####: 4940:            CATCH_BREAK_INTO_DEBUGGER();
        -: 4941:        }
    #####: 4942:        if( m_reaction.shouldThrow )
    #####: 4943:            throw Catch::TestFailureException();
    #####: 4944:    }
    #####: 4945:    void AssertionHandler::setCompleted() {
    #####: 4946:        m_completed = true;
    #####: 4947:    }
        -: 4948:
    #####: 4949:    void AssertionHandler::handleUnexpectedInflightException() {
    #####: 4950:        m_resultCapture.handleUnexpectedInflightException( m_assertionInfo, Catch::translateActiveException(), m_reaction );
    #####: 4951:    }
        -: 4952:
    #####: 4953:    void AssertionHandler::handleExceptionThrownAsExpected() {
    #####: 4954:        m_resultCapture.handleNonExpr(m_assertionInfo, ResultWas::Ok, m_reaction);
    #####: 4955:    }
    #####: 4956:    void AssertionHandler::handleExceptionNotThrownAsExpected() {
    #####: 4957:        m_resultCapture.handleNonExpr(m_assertionInfo, ResultWas::Ok, m_reaction);
    #####: 4958:    }
        -: 4959:
    #####: 4960:    void AssertionHandler::handleUnexpectedExceptionNotThrown() {
    #####: 4961:        m_resultCapture.handleUnexpectedExceptionNotThrown( m_assertionInfo, m_reaction );
    #####: 4962:    }
        -: 4963:
    #####: 4964:    void AssertionHandler::handleThrowingCallSkipped() {
    #####: 4965:        m_resultCapture.handleNonExpr(m_assertionInfo, ResultWas::Ok, m_reaction);
    #####: 4966:    }
        -: 4967:
        -: 4968:    // This is the overload that takes a string and infers the Equals matcher from it
        -: 4969:    // The more general overload, that takes any string matcher, is in catch_capture_matchers.cpp
    #####: 4970:    void handleExceptionMatchExpr( AssertionHandler& handler, std::string const& str, StringRef matcherString  ) {
    #####: 4971:        handleExceptionMatchExpr( handler, Matchers::Equals( str ), matcherString );
    #####: 4972:    }
        -: 4973:
        -: 4974:} // namespace Catch
        -: 4975:// end catch_assertionhandler.cpp
        -: 4976:// start catch_assertionresult.cpp
        -: 4977:
        -: 4978:namespace Catch {
    #####: 4979:    AssertionResultData::AssertionResultData(ResultWas::OfType _resultType, LazyExpression const & _lazyExpression):
        -: 4980:        lazyExpression(_lazyExpression),
    #####: 4981:        resultType(_resultType) {}
        -: 4982:
    #####: 4983:    std::string AssertionResultData::reconstructExpression() const {
        -: 4984:
    #####: 4985:        if( reconstructedExpression.empty() ) {
    #####: 4986:            if( lazyExpression ) {
    #####: 4987:                ReusableStringStream rss;
    #####: 4988:                rss << lazyExpression;
    #####: 4989:                reconstructedExpression = rss.str();
        -: 4990:            }
        -: 4991:        }
    #####: 4992:        return reconstructedExpression;
        -: 4993:    }
        -: 4994:
    #####: 4995:    AssertionResult::AssertionResult( AssertionInfo const& info, AssertionResultData const& data )
        -: 4996:    :   m_info( info ),
    #####: 4997:        m_resultData( data )
    #####: 4998:    {}
        -: 4999:
        -: 5000:    // Result was a success
    #####: 5001:    bool AssertionResult::succeeded() const {
    #####: 5002:        return Catch::isOk( m_resultData.resultType );
        -: 5003:    }
        -: 5004:
        -: 5005:    // Result was a success, or failure is suppressed
    #####: 5006:    bool AssertionResult::isOk() const {
    #####: 5007:        return Catch::isOk( m_resultData.resultType ) || shouldSuppressFailure( m_info.resultDisposition );
        -: 5008:    }
        -: 5009:
    #####: 5010:    ResultWas::OfType AssertionResult::getResultType() const {
    #####: 5011:        return m_resultData.resultType;
        -: 5012:    }
        -: 5013:
    #####: 5014:    bool AssertionResult::hasExpression() const {
    #####: 5015:        return m_info.capturedExpression[0] != 0;
        -: 5016:    }
        -: 5017:
    #####: 5018:    bool AssertionResult::hasMessage() const {
    #####: 5019:        return !m_resultData.message.empty();
        -: 5020:    }
        -: 5021:
    #####: 5022:    std::string AssertionResult::getExpression() const {
    #####: 5023:        if( isFalseTest( m_info.resultDisposition ) )
    #####: 5024:            return "!(" + m_info.capturedExpression + ")";
        -: 5025:        else
    #####: 5026:            return m_info.capturedExpression;
        -: 5027:    }
        -: 5028:
    #####: 5029:    std::string AssertionResult::getExpressionInMacro() const {
    #####: 5030:        std::string expr;
    #####: 5031:        if( m_info.macroName[0] == 0 )
    #####: 5032:            expr = m_info.capturedExpression;
        -: 5033:        else {
    #####: 5034:            expr.reserve( m_info.macroName.size() + m_info.capturedExpression.size() + 4 );
    #####: 5035:            expr += m_info.macroName;
    #####: 5036:            expr += "( ";
    #####: 5037:            expr += m_info.capturedExpression;
    #####: 5038:            expr += " )";
        -: 5039:        }
    #####: 5040:        return expr;
        -: 5041:    }
        -: 5042:
    #####: 5043:    bool AssertionResult::hasExpandedExpression() const {
    #####: 5044:        return hasExpression() && getExpandedExpression() != getExpression();
        -: 5045:    }
        -: 5046:
    #####: 5047:    std::string AssertionResult::getExpandedExpression() const {
    #####: 5048:        std::string expr = m_resultData.reconstructExpression();
    #####: 5049:        return expr.empty()
        -: 5050:                ? getExpression()
    #####: 5051:                : expr;
        -: 5052:    }
        -: 5053:
    #####: 5054:    std::string AssertionResult::getMessage() const {
    #####: 5055:        return m_resultData.message;
        -: 5056:    }
    #####: 5057:    SourceLineInfo AssertionResult::getSourceInfo() const {
    #####: 5058:        return m_info.lineInfo;
        -: 5059:    }
        -: 5060:
    #####: 5061:    StringRef AssertionResult::getTestMacroName() const {
    #####: 5062:        return m_info.macroName;
        -: 5063:    }
        -: 5064:
        -: 5065:} // end namespace Catch
        -: 5066:// end catch_assertionresult.cpp
        -: 5067:// start catch_benchmark.cpp
        -: 5068:
        -: 5069:namespace Catch {
        -: 5070:
    #####: 5071:    auto BenchmarkLooper::getResolution() -> uint64_t {
    #####: 5072:        return getEstimatedClockResolution() * getCurrentContext().getConfig()->benchmarkResolutionMultiple();
        -: 5073:    }
        -: 5074:
    #####: 5075:    void BenchmarkLooper::reportStart() {
    #####: 5076:        getResultCapture().benchmarkStarting( { m_name } );
    #####: 5077:    }
    #####: 5078:    auto BenchmarkLooper::needsMoreIterations() -> bool {
    #####: 5079:        auto elapsed = m_timer.getElapsedNanoseconds();
        -: 5080:
        -: 5081:        // Exponentially increasing iterations until we're confident in our timer resolution
    #####: 5082:        if( elapsed < m_resolution ) {
    #####: 5083:            m_iterationsToRun *= 10;
    #####: 5084:            return true;
        -: 5085:        }
        -: 5086:
    #####: 5087:        getResultCapture().benchmarkEnded( { { m_name }, m_count, elapsed } );
    #####: 5088:        return false;
        -: 5089:    }
        -: 5090:
        -: 5091:} // end namespace Catch
        -: 5092:// end catch_benchmark.cpp
        -: 5093:// start catch_capture_matchers.cpp
        -: 5094:
        -: 5095:namespace Catch {
        -: 5096:
        -: 5097:    using StringMatcher = Matchers::Impl::MatcherBase<std::string>;
        -: 5098:
        -: 5099:    // This is the general overload that takes a any string matcher
        -: 5100:    // There is another overload, in catch_assertionhandler.h/.cpp, that only takes a string and infers
        -: 5101:    // the Equals matcher (so the header does not mention matchers)
    #####: 5102:    void handleExceptionMatchExpr( AssertionHandler& handler, StringMatcher const& matcher, StringRef matcherString  ) {
    #####: 5103:        std::string exceptionMessage = Catch::translateActiveException();
    #####: 5104:        MatchExpr<std::string, StringMatcher const&> expr( exceptionMessage, matcher, matcherString );
    #####: 5105:        handler.handleExpr( expr );
    #####: 5106:    }
        -: 5107:
        -: 5108:} // namespace Catch
        -: 5109:// end catch_capture_matchers.cpp
        -: 5110:// start catch_commandline.cpp
        -: 5111:
        -: 5112:// start catch_commandline.h
        -: 5113:
        -: 5114:// start catch_clara.h
        -: 5115:
        -: 5116:// Use Catch's value for console width (store Clara's off to the side, if present)
        -: 5117:#ifdef CLARA_CONFIG_CONSOLE_WIDTH
        -: 5118:#define CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH
        -: 5119:#undef CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH
        -: 5120:#endif
        -: 5121:#define CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH CATCH_CONFIG_CONSOLE_WIDTH-1
        -: 5122:
        -: 5123:#ifdef __clang__
        -: 5124:#pragma clang diagnostic push
        -: 5125:#pragma clang diagnostic ignored "-Wweak-vtables"
        -: 5126:#pragma clang diagnostic ignored "-Wexit-time-destructors"
        -: 5127:#pragma clang diagnostic ignored "-Wshadow"
        -: 5128:#endif
        -: 5129:
        -: 5130:// start clara.hpp
        -: 5131:// Copyright 2017 Two Blue Cubes Ltd. All rights reserved.
        -: 5132://
        -: 5133:// Distributed under the Boost Software License, Version 1.0. (See accompanying
        -: 5134:// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
        -: 5135://
        -: 5136:// See https://github.com/philsquared/Clara for more details
        -: 5137:
        -: 5138:// Clara v1.1.4
        -: 5139:
        -: 5140:
        -: 5141:#ifndef CATCH_CLARA_CONFIG_CONSOLE_WIDTH
        -: 5142:#define CATCH_CLARA_CONFIG_CONSOLE_WIDTH 80
        -: 5143:#endif
        -: 5144:
        -: 5145:#ifndef CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH
        -: 5146:#define CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH CATCH_CLARA_CONFIG_CONSOLE_WIDTH
        -: 5147:#endif
        -: 5148:
        -: 5149:#ifndef CLARA_CONFIG_OPTIONAL_TYPE
        -: 5150:#ifdef __has_include
        -: 5151:#if __has_include(<optional>) && __cplusplus >= 201703L
        -: 5152:#include <optional>
        -: 5153:#define CLARA_CONFIG_OPTIONAL_TYPE std::optional
        -: 5154:#endif
        -: 5155:#endif
        -: 5156:#endif
        -: 5157:
        -: 5158:// ----------- #included from clara_textflow.hpp -----------
        -: 5159:
        -: 5160:// TextFlowCpp
        -: 5161://
        -: 5162:// A single-header library for wrapping and laying out basic text, by Phil Nash
        -: 5163://
        -: 5164:// This work is licensed under the BSD 2-Clause license.
        -: 5165:// See the accompanying LICENSE file, or the one at https://opensource.org/licenses/BSD-2-Clause
        -: 5166://
        -: 5167:// This project is hosted at https://github.com/philsquared/textflowcpp
        -: 5168:
        -: 5169:
        -: 5170:#include <cassert>
        -: 5171:#include <ostream>
        -: 5172:#include <sstream>
        -: 5173:#include <vector>
        -: 5174:
        -: 5175:#ifndef CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH
        -: 5176:#define CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH 80
        -: 5177:#endif
        -: 5178:
        -: 5179:namespace Catch { namespace clara { namespace TextFlow {
        -: 5180:
    #####: 5181:    inline auto isWhitespace( char c ) -> bool {
    #####: 5182:        static std::string chars = " \t\n\r";
    #####: 5183:        return chars.find( c ) != std::string::npos;
        -: 5184:    }
    #####: 5185:    inline auto isBreakableBefore( char c ) -> bool {
    #####: 5186:        static std::string chars = "[({<|";
    #####: 5187:        return chars.find( c ) != std::string::npos;
        -: 5188:    }
    #####: 5189:    inline auto isBreakableAfter( char c ) -> bool {
    #####: 5190:        static std::string chars = "])}>.,:;*+-=&/\\";
    #####: 5191:        return chars.find( c ) != std::string::npos;
        -: 5192:    }
        -: 5193:
        -: 5194:    class Columns;
        -: 5195:
    #####: 5196:    class Column {
        -: 5197:        std::vector<std::string> m_strings;
        -: 5198:        size_t m_width = CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH;
        -: 5199:        size_t m_indent = 0;
        -: 5200:        size_t m_initialIndent = std::string::npos;
        -: 5201:
        -: 5202:    public:
        -: 5203:        class iterator {
        -: 5204:            friend Column;
        -: 5205:
        -: 5206:            Column const& m_column;
        -: 5207:            size_t m_stringIndex = 0;
        -: 5208:            size_t m_pos = 0;
        -: 5209:
        -: 5210:            size_t m_len = 0;
        -: 5211:            size_t m_end = 0;
        -: 5212:            bool m_suffix = false;
        -: 5213:
    #####: 5214:            iterator( Column const& column, size_t stringIndex )
    #####: 5215:            :   m_column( column ),
    #####: 5216:                m_stringIndex( stringIndex )
    #####: 5217:            {}
        -: 5218:
    #####: 5219:            auto line() const -> std::string const& { return m_column.m_strings[m_stringIndex]; }
        -: 5220:
    #####: 5221:            auto isBoundary( size_t at ) const -> bool {
    #####: 5222:                assert( at > 0 );
    #####: 5223:                assert( at <= line().size() );
        -: 5224:
    #####: 5225:                return at == line().size() ||
    #####: 5226:                       ( isWhitespace( line()[at] ) && !isWhitespace( line()[at-1] ) ) ||
    #####: 5227:                       isBreakableBefore( line()[at] ) ||
    #####: 5228:                       isBreakableAfter( line()[at-1] );
        -: 5229:            }
        -: 5230:
    #####: 5231:            void calcLength() {
    #####: 5232:                assert( m_stringIndex < m_column.m_strings.size() );
        -: 5233:
    #####: 5234:                m_suffix = false;
    #####: 5235:                auto width = m_column.m_width-indent();
    #####: 5236:                m_end = m_pos;
    #####: 5237:                while( m_end < line().size() && line()[m_end] != '\n' )
    #####: 5238:                    ++m_end;
        -: 5239:
    #####: 5240:                if( m_end < m_pos + width ) {
    #####: 5241:                    m_len = m_end - m_pos;
        -: 5242:                }
        -: 5243:                else {
    #####: 5244:                    size_t len = width;
    #####: 5245:                    while (len > 0 && !isBoundary(m_pos + len))
    #####: 5246:                        --len;
    #####: 5247:                    while (len > 0 && isWhitespace( line()[m_pos + len - 1] ))
    #####: 5248:                        --len;
        -: 5249:
    #####: 5250:                    if (len > 0) {
    #####: 5251:                        m_len = len;
        -: 5252:                    } else {
    #####: 5253:                        m_suffix = true;
    #####: 5254:                        m_len = width - 1;
        -: 5255:                    }
        -: 5256:                }
    #####: 5257:            }
        -: 5258:
    #####: 5259:            auto indent() const -> size_t {
    #####: 5260:                auto initial = m_pos == 0 && m_stringIndex == 0 ? m_column.m_initialIndent : std::string::npos;
    #####: 5261:                return initial == std::string::npos ? m_column.m_indent : initial;
        -: 5262:            }
        -: 5263:
    #####: 5264:            auto addIndentAndSuffix(std::string const &plain) const -> std::string {
    #####: 5265:                return std::string( indent(), ' ' ) + (m_suffix ? plain + "-" : plain);
        -: 5266:            }
        -: 5267:
        -: 5268:        public:
    #####: 5269:            explicit iterator( Column const& column ) : m_column( column ) {
    #####: 5270:                assert( m_column.m_width > m_column.m_indent );
    #####: 5271:                assert( m_column.m_initialIndent == std::string::npos || m_column.m_width > m_column.m_initialIndent );
    #####: 5272:                calcLength();
    #####: 5273:                if( m_len == 0 )
    #####: 5274:                    m_stringIndex++; // Empty string
    #####: 5275:            }
        -: 5276:
    #####: 5277:            auto operator *() const -> std::string {
    #####: 5278:                assert( m_stringIndex < m_column.m_strings.size() );
    #####: 5279:                assert( m_pos <= m_end );
    #####: 5280:                if( m_pos + m_column.m_width < m_end )
    #####: 5281:                    return addIndentAndSuffix(line().substr(m_pos, m_len));
        -: 5282:                else
    #####: 5283:                    return addIndentAndSuffix(line().substr(m_pos, m_end - m_pos));
        -: 5284:            }
        -: 5285:
    #####: 5286:            auto operator ++() -> iterator& {
    #####: 5287:                m_pos += m_len;
    #####: 5288:                if( m_pos < line().size() && line()[m_pos] == '\n' )
    #####: 5289:                    m_pos += 1;
        -: 5290:                else
    #####: 5291:                    while( m_pos < line().size() && isWhitespace( line()[m_pos] ) )
    #####: 5292:                        ++m_pos;
        -: 5293:
    #####: 5294:                if( m_pos == line().size() ) {
    #####: 5295:                    m_pos = 0;
    #####: 5296:                    ++m_stringIndex;
        -: 5297:                }
    #####: 5298:                if( m_stringIndex < m_column.m_strings.size() )
    #####: 5299:                    calcLength();
    #####: 5300:                return *this;
        -: 5301:            }
        -: 5302:            auto operator ++(int) -> iterator {
        -: 5303:                iterator prev( *this );
        -: 5304:                operator++();
        -: 5305:                return prev;
        -: 5306:            }
        -: 5307:
    #####: 5308:            auto operator ==( iterator const& other ) const -> bool {
        -: 5309:                return
    #####: 5310:                    m_pos == other.m_pos &&
    #####: 5311:                    m_stringIndex == other.m_stringIndex &&
    #####: 5312:                    &m_column == &other.m_column;
        -: 5313:            }
    #####: 5314:            auto operator !=( iterator const& other ) const -> bool {
    #####: 5315:                return !operator==( other );
        -: 5316:            }
        -: 5317:        };
        -: 5318:        using const_iterator = iterator;
        -: 5319:
    #####: 5320:        explicit Column( std::string const& text ) { m_strings.push_back( text ); }
        -: 5321:
    #####: 5322:        auto width( size_t newWidth ) -> Column& {
    #####: 5323:            assert( newWidth > 0 );
    #####: 5324:            m_width = newWidth;
    #####: 5325:            return *this;
        -: 5326:        }
    #####: 5327:        auto indent( size_t newIndent ) -> Column& {
    #####: 5328:            m_indent = newIndent;
    #####: 5329:            return *this;
        -: 5330:        }
    #####: 5331:        auto initialIndent( size_t newIndent ) -> Column& {
    #####: 5332:            m_initialIndent = newIndent;
    #####: 5333:            return *this;
        -: 5334:        }
        -: 5335:
    #####: 5336:        auto width() const -> size_t { return m_width; }
    #####: 5337:        auto begin() const -> iterator { return iterator( *this ); }
    #####: 5338:        auto end() const -> iterator { return { *this, m_strings.size() }; }
        -: 5339:
    #####: 5340:        inline friend std::ostream& operator << ( std::ostream& os, Column const& col ) {
    #####: 5341:            bool first = true;
    #####: 5342:            for( auto line : col ) {
    #####: 5343:                if( first )
    #####: 5344:                    first = false;
        -: 5345:                else
    #####: 5346:                    os << "\n";
    #####: 5347:                os <<  line;
        -: 5348:            }
    #####: 5349:            return os;
        -: 5350:        }
        -: 5351:
        -: 5352:        auto operator + ( Column const& other ) -> Columns;
        -: 5353:
        -: 5354:        auto toString() const -> std::string {
        -: 5355:            std::ostringstream oss;
        -: 5356:            oss << *this;
        -: 5357:            return oss.str();
        -: 5358:        }
        -: 5359:    };
        -: 5360:
    #####: 5361:    class Spacer : public Column {
        -: 5362:
        -: 5363:    public:
    #####: 5364:        explicit Spacer( size_t spaceWidth ) : Column( "" ) {
    #####: 5365:            width( spaceWidth );
    #####: 5366:        }
        -: 5367:    };
        -: 5368:
    #####: 5369:    class Columns {
        -: 5370:        std::vector<Column> m_columns;
        -: 5371:
        -: 5372:    public:
        -: 5373:
    #####: 5374:        class iterator {
        -: 5375:            friend Columns;
        -: 5376:            struct EndTag {};
        -: 5377:
        -: 5378:            std::vector<Column> const& m_columns;
        -: 5379:            std::vector<Column::iterator> m_iterators;
        -: 5380:            size_t m_activeIterators;
        -: 5381:
    #####: 5382:            iterator( Columns const& columns, EndTag )
    #####: 5383:            :   m_columns( columns.m_columns ),
    #####: 5384:                m_activeIterators( 0 )
        -: 5385:            {
    #####: 5386:                m_iterators.reserve( m_columns.size() );
        -: 5387:
    #####: 5388:                for( auto const& col : m_columns )
    #####: 5389:                    m_iterators.push_back( col.end() );
    #####: 5390:            }
        -: 5391:
        -: 5392:        public:
    #####: 5393:            explicit iterator( Columns const& columns )
    #####: 5394:            :   m_columns( columns.m_columns ),
    #####: 5395:                m_activeIterators( m_columns.size() )
        -: 5396:            {
    #####: 5397:                m_iterators.reserve( m_columns.size() );
        -: 5398:
    #####: 5399:                for( auto const& col : m_columns )
    #####: 5400:                    m_iterators.push_back( col.begin() );
    #####: 5401:            }
        -: 5402:
        -: 5403:            auto operator ==( iterator const& other ) const -> bool {
        -: 5404:                return m_iterators == other.m_iterators;
        -: 5405:            }
    #####: 5406:            auto operator !=( iterator const& other ) const -> bool {
    #####: 5407:                return m_iterators != other.m_iterators;
        -: 5408:            }
    #####: 5409:            auto operator *() const -> std::string {
    #####: 5410:                std::string row, padding;
        -: 5411:
    #####: 5412:                for( size_t i = 0; i < m_columns.size(); ++i ) {
    #####: 5413:                    auto width = m_columns[i].width();
    #####: 5414:                    if( m_iterators[i] != m_columns[i].end() ) {
    #####: 5415:                        std::string col = *m_iterators[i];
    #####: 5416:                        row += padding + col;
    #####: 5417:                        if( col.size() < width )
    #####: 5418:                            padding = std::string( width - col.size(), ' ' );
        -: 5419:                        else
    #####: 5420:                            padding = "";
        -: 5421:                    }
        -: 5422:                    else {
    #####: 5423:                        padding += std::string( width, ' ' );
        -: 5424:                    }
        -: 5425:                }
    #####: 5426:                return row;
        -: 5427:            }
    #####: 5428:            auto operator ++() -> iterator& {
    #####: 5429:                for( size_t i = 0; i < m_columns.size(); ++i ) {
    #####: 5430:                    if (m_iterators[i] != m_columns[i].end())
    #####: 5431:                        ++m_iterators[i];
        -: 5432:                }
    #####: 5433:                return *this;
        -: 5434:            }
        -: 5435:            auto operator ++(int) -> iterator {
        -: 5436:                iterator prev( *this );
        -: 5437:                operator++();
        -: 5438:                return prev;
        -: 5439:            }
        -: 5440:        };
        -: 5441:        using const_iterator = iterator;
        -: 5442:
    #####: 5443:        auto begin() const -> iterator { return iterator( *this ); }
    #####: 5444:        auto end() const -> iterator { return { *this, iterator::EndTag() }; }
        -: 5445:
    #####: 5446:        auto operator += ( Column const& col ) -> Columns& {
    #####: 5447:            m_columns.push_back( col );
    #####: 5448:            return *this;
        -: 5449:        }
    #####: 5450:        auto operator + ( Column const& col ) -> Columns {
    #####: 5451:            Columns combined = *this;
    #####: 5452:            combined += col;
    #####: 5453:            return combined;
        -: 5454:        }
        -: 5455:
    #####: 5456:        inline friend std::ostream& operator << ( std::ostream& os, Columns const& cols ) {
        -: 5457:
    #####: 5458:            bool first = true;
    #####: 5459:            for( auto line : cols ) {
    #####: 5460:                if( first )
    #####: 5461:                    first = false;
        -: 5462:                else
    #####: 5463:                    os << "\n";
    #####: 5464:                os << line;
        -: 5465:            }
    #####: 5466:            return os;
        -: 5467:        }
        -: 5468:
        -: 5469:        auto toString() const -> std::string {
        -: 5470:            std::ostringstream oss;
        -: 5471:            oss << *this;
        -: 5472:            return oss.str();
        -: 5473:        }
        -: 5474:    };
        -: 5475:
    #####: 5476:    inline auto Column::operator + ( Column const& other ) -> Columns {
    #####: 5477:        Columns cols;
    #####: 5478:        cols += *this;
    #####: 5479:        cols += other;
    #####: 5480:        return cols;
        -: 5481:    }
        -: 5482:}}} // namespace Catch::clara::TextFlow
        -: 5483:
        -: 5484:// ----------- end of #include from clara_textflow.hpp -----------
        -: 5485:// ........... back in clara.hpp
        -: 5486:
        -: 5487:#include <memory>
        -: 5488:#include <set>
        -: 5489:#include <algorithm>
        -: 5490:
        -: 5491:#if !defined(CATCH_PLATFORM_WINDOWS) && ( defined(WIN32) || defined(__WIN32__) || defined(_WIN32) || defined(_MSC_VER) )
        -: 5492:#define CATCH_PLATFORM_WINDOWS
        -: 5493:#endif
        -: 5494:
        -: 5495:namespace Catch { namespace clara {
        -: 5496:namespace detail {
        -: 5497:
        -: 5498:    // Traits for extracting arg and return type of lambdas (for single argument lambdas)
        -: 5499:    template<typename L>
        -: 5500:    struct UnaryLambdaTraits : UnaryLambdaTraits<decltype( &L::operator() )> {};
        -: 5501:
        -: 5502:    template<typename ClassT, typename ReturnT, typename... Args>
        -: 5503:    struct UnaryLambdaTraits<ReturnT( ClassT::* )( Args... ) const> {
        -: 5504:        static const bool isValid = false;
        -: 5505:    };
        -: 5506:
        -: 5507:    template<typename ClassT, typename ReturnT, typename ArgT>
        -: 5508:    struct UnaryLambdaTraits<ReturnT( ClassT::* )( ArgT ) const> {
        -: 5509:        static const bool isValid = true;
        -: 5510:        using ArgType = typename std::remove_const<typename std::remove_reference<ArgT>::type>::type;
        -: 5511:        using ReturnType = ReturnT;
        -: 5512:    };
        -: 5513:
        -: 5514:    class TokenStream;
        -: 5515:
        -: 5516:    // Transport for raw args (copied from main args, or supplied via init list for testing)
    #####: 5517:    class Args {
        -: 5518:        friend TokenStream;
        -: 5519:        std::string m_exeName;
        -: 5520:        std::vector<std::string> m_args;
        -: 5521:
        -: 5522:    public:
    #####: 5523:        Args( int argc, char const* const* argv )
    #####: 5524:            : m_exeName(argv[0]),
    #####: 5525:              m_args(argv + 1, argv + argc) {}
        -: 5526:
        -: 5527:        Args( std::initializer_list<std::string> args )
        -: 5528:        :   m_exeName( *args.begin() ),
        -: 5529:            m_args( args.begin()+1, args.end() )
        -: 5530:        {}
        -: 5531:
    #####: 5532:        auto exeName() const -> std::string {
    #####: 5533:            return m_exeName;
        -: 5534:        }
        -: 5535:    };
        -: 5536:
        -: 5537:    // Wraps a token coming from a token stream. These may not directly correspond to strings as a single string
        -: 5538:    // may encode an option + its argument if the : or = form is used
        -: 5539:    enum class TokenType {
        -: 5540:        Option, Argument
        -: 5541:    };
    #####: 5542:    struct Token {
        -: 5543:        TokenType type;
        -: 5544:        std::string token;
        -: 5545:    };
        -: 5546:
    #####: 5547:    inline auto isOptPrefix( char c ) -> bool {
    #####: 5548:        return c == '-'
        -: 5549:#ifdef CATCH_PLATFORM_WINDOWS
        -: 5550:            || c == '/'
        -: 5551:#endif
        -: 5552:        ;
        -: 5553:    }
        -: 5554:
        -: 5555:    // Abstracts iterators into args as a stream of tokens, with option arguments uniformly handled
    #####: 5556:    class TokenStream {
        -: 5557:        using Iterator = std::vector<std::string>::const_iterator;
        -: 5558:        Iterator it;
        -: 5559:        Iterator itEnd;
        -: 5560:        std::vector<Token> m_tokenBuffer;
        -: 5561:
    #####: 5562:        void loadBuffer() {
    #####: 5563:            m_tokenBuffer.resize( 0 );
        -: 5564:
        -: 5565:            // Skip any empty strings
    #####: 5566:            while( it != itEnd && it->empty() )
    #####: 5567:                ++it;
        -: 5568:
    #####: 5569:            if( it != itEnd ) {
    #####: 5570:                auto const &next = *it;
    #####: 5571:                if( isOptPrefix( next[0] ) ) {
    #####: 5572:                    auto delimiterPos = next.find_first_of( " :=" );
    #####: 5573:                    if( delimiterPos != std::string::npos ) {
    #####: 5574:                        m_tokenBuffer.push_back( { TokenType::Option, next.substr( 0, delimiterPos ) } );
    #####: 5575:                        m_tokenBuffer.push_back( { TokenType::Argument, next.substr( delimiterPos + 1 ) } );
        -: 5576:                    } else {
    #####: 5577:                        if( next[1] != '-' && next.size() > 2 ) {
    #####: 5578:                            std::string opt = "- ";
    #####: 5579:                            for( size_t i = 1; i < next.size(); ++i ) {
    #####: 5580:                                opt[1] = next[i];
    #####: 5581:                                m_tokenBuffer.push_back( { TokenType::Option, opt } );
        -: 5582:                            }
        -: 5583:                        } else {
    #####: 5584:                            m_tokenBuffer.push_back( { TokenType::Option, next } );
        -: 5585:                        }
        -: 5586:                    }
        -: 5587:                } else {
    #####: 5588:                    m_tokenBuffer.push_back( { TokenType::Argument, next } );
        -: 5589:                }
        -: 5590:            }
    #####: 5591:        }
        -: 5592:
        -: 5593:    public:
    #####: 5594:        explicit TokenStream( Args const &args ) : TokenStream( args.m_args.begin(), args.m_args.end() ) {}
        -: 5595:
    #####: 5596:        TokenStream( Iterator it, Iterator itEnd ) : it( it ), itEnd( itEnd ) {
    #####: 5597:            loadBuffer();
    #####: 5598:        }
        -: 5599:
    #####: 5600:        explicit operator bool() const {
    #####: 5601:            return !m_tokenBuffer.empty() || it != itEnd;
        -: 5602:        }
        -: 5603:
        -: 5604:        auto count() const -> size_t { return m_tokenBuffer.size() + (itEnd - it); }
        -: 5605:
    #####: 5606:        auto operator*() const -> Token {
    #####: 5607:            assert( !m_tokenBuffer.empty() );
    #####: 5608:            return m_tokenBuffer.front();
        -: 5609:        }
        -: 5610:
    #####: 5611:        auto operator->() const -> Token const * {
    #####: 5612:            assert( !m_tokenBuffer.empty() );
    #####: 5613:            return &m_tokenBuffer.front();
        -: 5614:        }
        -: 5615:
    #####: 5616:        auto operator++() -> TokenStream & {
    #####: 5617:            if( m_tokenBuffer.size() >= 2 ) {
    #####: 5618:                m_tokenBuffer.erase( m_tokenBuffer.begin() );
        -: 5619:            } else {
    #####: 5620:                if( it != itEnd )
    #####: 5621:                    ++it;
    #####: 5622:                loadBuffer();
        -: 5623:            }
    #####: 5624:            return *this;
        -: 5625:        }
        -: 5626:    };
        -: 5627:
    #####: 5628:    class ResultBase {
        -: 5629:    public:
        -: 5630:        enum Type {
        -: 5631:            Ok, LogicError, RuntimeError
        -: 5632:        };
        -: 5633:
        -: 5634:    protected:
    #####: 5635:        ResultBase( Type type ) : m_type( type ) {}
    #####: 5636:        virtual ~ResultBase() = default;
        -: 5637:
        -: 5638:        virtual void enforceOk() const = 0;
        -: 5639:
        -: 5640:        Type m_type;
        -: 5641:    };
        -: 5642:
        -: 5643:    template<typename T>
        -: 5644:    class ResultValueBase : public ResultBase {
        -: 5645:    public:
    #####: 5646:        auto value() const -> T const & {
    #####: 5647:            enforceOk();
    #####: 5648:            return m_value;
        -: 5649:        }
        -: 5650:
        -: 5651:    protected:
    #####: 5652:        ResultValueBase( Type type ) : ResultBase( type ) {}
        -: 5653:
    #####: 5654:        ResultValueBase( ResultValueBase const &other ) : ResultBase( other ) {
    #####: 5655:            if( m_type == ResultBase::Ok )
    #####: 5656:                new( &m_value ) T( other.m_value );
    #####: 5657:        }
        -: 5658:
    #####: 5659:        ResultValueBase( Type, T const &value ) : ResultBase( Ok ) {
    #####: 5660:            new( &m_value ) T( value );
    #####: 5661:        }
        -: 5662:
    #####: 5663:        auto operator=( ResultValueBase const &other ) -> ResultValueBase & {
    #####: 5664:            if( m_type == ResultBase::Ok )
    #####: 5665:                m_value.~T();
    #####: 5666:            ResultBase::operator=(other);
    #####: 5667:            if( m_type == ResultBase::Ok )
    #####: 5668:                new( &m_value ) T( other.m_value );
    #####: 5669:            return *this;
        -: 5670:        }
        -: 5671:
    #####: 5672:        ~ResultValueBase() override {
    #####: 5673:            if( m_type == Ok )
    #####: 5674:                m_value.~T();
    #####: 5675:        }
        -: 5676:
        -: 5677:        union {
        -: 5678:            T m_value;
        -: 5679:        };
        -: 5680:    };
        -: 5681:
        -: 5682:    template<>
    #####: 5683:    class ResultValueBase<void> : public ResultBase {
        -: 5684:    protected:
    #####: 5685:        using ResultBase::ResultBase;
        -: 5686:    };
        -: 5687:
        -: 5688:    template<typename T = void>
    #####: 5689:    class BasicResult : public ResultValueBase<T> {
        -: 5690:    public:
        -: 5691:        template<typename U>
    #####: 5692:        explicit BasicResult( BasicResult<U> const &other )
        -: 5693:        :   ResultValueBase<T>( other.type() ),
    #####: 5694:            m_errorMessage( other.errorMessage() )
        -: 5695:        {
    #####: 5696:            assert( type() != ResultBase::Ok );
    #####: 5697:        }
        -: 5698:
        -: 5699:        template<typename U>
    #####: 5700:        static auto ok( U const &value ) -> BasicResult { return { ResultBase::Ok, value }; }
    #####: 5701:        static auto ok() -> BasicResult { return { ResultBase::Ok }; }
    #####: 5702:        static auto logicError( std::string const &message ) -> BasicResult { return { ResultBase::LogicError, message }; }
    #####: 5703:        static auto runtimeError( std::string const &message ) -> BasicResult { return { ResultBase::RuntimeError, message }; }
        -: 5704:
    #####: 5705:        explicit operator bool() const { return m_type == ResultBase::Ok; }
    #####: 5706:        auto type() const -> ResultBase::Type { return m_type; }
    #####: 5707:        auto errorMessage() const -> std::string { return m_errorMessage; }
        -: 5708:
        -: 5709:    protected:
    #####: 5710:        void enforceOk() const override {
        -: 5711:
        -: 5712:            // Errors shouldn't reach this point, but if they do
        -: 5713:            // the actual error message will be in m_errorMessage
    #####: 5714:            assert( m_type != ResultBase::LogicError );
    #####: 5715:            assert( m_type != ResultBase::RuntimeError );
    #####: 5716:            if( m_type != ResultBase::Ok )
    #####: 5717:                std::abort();
    #####: 5718:        }
        -: 5719:
        -: 5720:        std::string m_errorMessage; // Only populated if resultType is an error
        -: 5721:
    #####: 5722:        BasicResult( ResultBase::Type type, std::string const &message )
        -: 5723:        :   ResultValueBase<T>(type),
    #####: 5724:            m_errorMessage(message)
        -: 5725:        {
    #####: 5726:            assert( m_type != ResultBase::Ok );
    #####: 5727:        }
        -: 5728:
    #####: 5729:        using ResultValueBase<T>::ResultValueBase;
        -: 5730:        using ResultBase::m_type;
        -: 5731:    };
        -: 5732:
        -: 5733:    enum class ParseResultType {
        -: 5734:        Matched, NoMatch, ShortCircuitAll, ShortCircuitSame
        -: 5735:    };
        -: 5736:
    #####: 5737:    class ParseState {
        -: 5738:    public:
        -: 5739:
    #####: 5740:        ParseState( ParseResultType type, TokenStream const &remainingTokens )
    #####: 5741:        : m_type(type),
    #####: 5742:          m_remainingTokens( remainingTokens )
    #####: 5743:        {}
        -: 5744:
    #####: 5745:        auto type() const -> ParseResultType { return m_type; }
    #####: 5746:        auto remainingTokens() const -> TokenStream { return m_remainingTokens; }
        -: 5747:
        -: 5748:    private:
        -: 5749:        ParseResultType m_type;
        -: 5750:        TokenStream m_remainingTokens;
        -: 5751:    };
        -: 5752:
        -: 5753:    using Result = BasicResult<void>;
        -: 5754:    using ParserResult = BasicResult<ParseResultType>;
        -: 5755:    using InternalParseResult = BasicResult<ParseState>;
        -: 5756:
    #####: 5757:    struct HelpColumns {
        -: 5758:        std::string left;
        -: 5759:        std::string right;
        -: 5760:    };
        -: 5761:
        -: 5762:    template<typename T>
    #####: 5763:    inline auto convertInto( std::string const &source, T& target ) -> ParserResult {
    #####: 5764:        std::stringstream ss;
    #####: 5765:        ss << source;
    #####: 5766:        ss >> target;
    #####: 5767:        if( ss.fail() )
    #####: 5768:            return ParserResult::runtimeError( "Unable to convert '" + source + "' to destination type" );
        -: 5769:        else
    #####: 5770:            return ParserResult::ok( ParseResultType::Matched );
        -: 5771:    }
    #####: 5772:    inline auto convertInto( std::string const &source, std::string& target ) -> ParserResult {
    #####: 5773:        target = source;
    #####: 5774:        return ParserResult::ok( ParseResultType::Matched );
        -: 5775:    }
    #####: 5776:    inline auto convertInto( std::string const &source, bool &target ) -> ParserResult {
    #####: 5777:        std::string srcLC = source;
    #####: 5778:        std::transform( srcLC.begin(), srcLC.end(), srcLC.begin(), []( char c ) { return static_cast<char>( ::tolower(c) ); } );
    #####: 5779:        if (srcLC == "y" || srcLC == "1" || srcLC == "true" || srcLC == "yes" || srcLC == "on")
    #####: 5780:            target = true;
    #####: 5781:        else if (srcLC == "n" || srcLC == "0" || srcLC == "false" || srcLC == "no" || srcLC == "off")
    #####: 5782:            target = false;
        -: 5783:        else
    #####: 5784:            return ParserResult::runtimeError( "Expected a boolean value but did not recognise: '" + source + "'" );
    #####: 5785:        return ParserResult::ok( ParseResultType::Matched );
        -: 5786:    }
        -: 5787:#ifdef CLARA_CONFIG_OPTIONAL_TYPE
        -: 5788:    template<typename T>
        -: 5789:    inline auto convertInto( std::string const &source, CLARA_CONFIG_OPTIONAL_TYPE<T>& target ) -> ParserResult {
        -: 5790:        T temp;
        -: 5791:        auto result = convertInto( source, temp );
        -: 5792:        if( result )
        -: 5793:            target = std::move(temp);
        -: 5794:        return result;
        -: 5795:    }
        -: 5796:#endif // CLARA_CONFIG_OPTIONAL_TYPE
        -: 5797:
        -: 5798:    struct NonCopyable {
    #####: 5799:        NonCopyable() = default;
        -: 5800:        NonCopyable( NonCopyable const & ) = delete;
        -: 5801:        NonCopyable( NonCopyable && ) = delete;
        -: 5802:        NonCopyable &operator=( NonCopyable const & ) = delete;
        -: 5803:        NonCopyable &operator=( NonCopyable && ) = delete;
        -: 5804:    };
        -: 5805:
    #####: 5806:    struct BoundRef : NonCopyable {
    #####: 5807:        virtual ~BoundRef() = default;
    #####: 5808:        virtual auto isContainer() const -> bool { return false; }
    #####: 5809:        virtual auto isFlag() const -> bool { return false; }
        -: 5810:    };
    #####: 5811:    struct BoundValueRefBase : BoundRef {
        -: 5812:        virtual auto setValue( std::string const &arg ) -> ParserResult = 0;
        -: 5813:    };
    #####: 5814:    struct BoundFlagRefBase : BoundRef {
        -: 5815:        virtual auto setFlag( bool flag ) -> ParserResult = 0;
    #####: 5816:        virtual auto isFlag() const -> bool { return true; }
        -: 5817:    };
        -: 5818:
        -: 5819:    template<typename T>
    #####: 5820:    struct BoundValueRef : BoundValueRefBase {
        -: 5821:        T &m_ref;
        -: 5822:
    #####: 5823:        explicit BoundValueRef( T &ref ) : m_ref( ref ) {}
        -: 5824:
    #####: 5825:        auto setValue( std::string const &arg ) -> ParserResult override {
    #####: 5826:            return convertInto( arg, m_ref );
        -: 5827:        }
        -: 5828:    };
        -: 5829:
        -: 5830:    template<typename T>
    #####: 5831:    struct BoundValueRef<std::vector<T>> : BoundValueRefBase {
        -: 5832:        std::vector<T> &m_ref;
        -: 5833:
    #####: 5834:        explicit BoundValueRef( std::vector<T> &ref ) : m_ref( ref ) {}
        -: 5835:
    #####: 5836:        auto isContainer() const -> bool override { return true; }
        -: 5837:
    #####: 5838:        auto setValue( std::string const &arg ) -> ParserResult override {
    #####: 5839:            T temp;
    #####: 5840:            auto result = convertInto( arg, temp );
    #####: 5841:            if( result )
    #####: 5842:                m_ref.push_back( temp );
    #####: 5843:            return result;
        -: 5844:        }
        -: 5845:    };
        -: 5846:
    #####: 5847:    struct BoundFlagRef : BoundFlagRefBase {
        -: 5848:        bool &m_ref;
        -: 5849:
    #####: 5850:        explicit BoundFlagRef( bool &ref ) : m_ref( ref ) {}
        -: 5851:
    #####: 5852:        auto setFlag( bool flag ) -> ParserResult override {
    #####: 5853:            m_ref = flag;
    #####: 5854:            return ParserResult::ok( ParseResultType::Matched );
        -: 5855:        }
        -: 5856:    };
        -: 5857:
        -: 5858:    template<typename ReturnType>
        -: 5859:    struct LambdaInvoker {
        -: 5860:        static_assert( std::is_same<ReturnType, ParserResult>::value, "Lambda must return void or clara::ParserResult" );
        -: 5861:
        -: 5862:        template<typename L, typename ArgType>
    #####: 5863:        static auto invoke( L const &lambda, ArgType const &arg ) -> ParserResult {
    #####: 5864:            return lambda( arg );
        -: 5865:        }
        -: 5866:    };
        -: 5867:
        -: 5868:    template<>
        -: 5869:    struct LambdaInvoker<void> {
        -: 5870:        template<typename L, typename ArgType>
    #####: 5871:        static auto invoke( L const &lambda, ArgType const &arg ) -> ParserResult {
    #####: 5872:            lambda( arg );
    #####: 5873:            return ParserResult::ok( ParseResultType::Matched );
        -: 5874:        }
        -: 5875:    };
        -: 5876:
        -: 5877:    template<typename ArgType, typename L>
    #####: 5878:    inline auto invokeLambda( L const &lambda, std::string const &arg ) -> ParserResult {
    #####: 5879:        ArgType temp{};
    #####: 5880:        auto result = convertInto( arg, temp );
    #####: 5881:        return !result
        -: 5882:           ? result
    #####: 5883:           : LambdaInvoker<typename UnaryLambdaTraits<L>::ReturnType>::invoke( lambda, temp );
        -: 5884:    }
        -: 5885:
        -: 5886:    template<typename L>
    #####: 5887:    struct BoundLambda : BoundValueRefBase {
        -: 5888:        L m_lambda;
        -: 5889:
        -: 5890:        static_assert( UnaryLambdaTraits<L>::isValid, "Supplied lambda must take exactly one argument" );
    #####: 5891:        explicit BoundLambda( L const &lambda ) : m_lambda( lambda ) {}
        -: 5892:
    #####: 5893:        auto setValue( std::string const &arg ) -> ParserResult override {
    #####: 5894:            return invokeLambda<typename UnaryLambdaTraits<L>::ArgType>( m_lambda, arg );
        -: 5895:        }
        -: 5896:    };
        -: 5897:
        -: 5898:    template<typename L>
    #####: 5899:    struct BoundFlagLambda : BoundFlagRefBase {
        -: 5900:        L m_lambda;
        -: 5901:
        -: 5902:        static_assert( UnaryLambdaTraits<L>::isValid, "Supplied lambda must take exactly one argument" );
        -: 5903:        static_assert( std::is_same<typename UnaryLambdaTraits<L>::ArgType, bool>::value, "flags must be boolean" );
        -: 5904:
    #####: 5905:        explicit BoundFlagLambda( L const &lambda ) : m_lambda( lambda ) {}
        -: 5906:
    #####: 5907:        auto setFlag( bool flag ) -> ParserResult override {
    #####: 5908:            return LambdaInvoker<typename UnaryLambdaTraits<L>::ReturnType>::invoke( m_lambda, flag );
        -: 5909:        }
        -: 5910:    };
        -: 5911:
        -: 5912:    enum class Optionality { Optional, Required };
        -: 5913:
        -: 5914:    struct Parser;
        -: 5915:
    #####: 5916:    class ParserBase {
        -: 5917:    public:
    #####: 5918:        virtual ~ParserBase() = default;
    #####: 5919:        virtual auto validate() const -> Result { return Result::ok(); }
        -: 5920:        virtual auto parse( std::string const& exeName, TokenStream const &tokens) const -> InternalParseResult  = 0;
    #####: 5921:        virtual auto cardinality() const -> size_t { return 1; }
        -: 5922:
    #####: 5923:        auto parse( Args const &args ) const -> InternalParseResult {
    #####: 5924:            return parse( args.exeName(), TokenStream( args ) );
        -: 5925:        }
        -: 5926:    };
        -: 5927:
        -: 5928:    template<typename DerivedT>
    #####: 5929:    class ComposableParserImpl : public ParserBase {
        -: 5930:    public:
        -: 5931:        template<typename T>
        -: 5932:        auto operator|( T const &other ) const -> Parser;
        -: 5933:
        -: 5934:		template<typename T>
        -: 5935:        auto operator+( T const &other ) const -> Parser;
        -: 5936:    };
        -: 5937:
        -: 5938:    // Common code and state for Args and Opts
        -: 5939:    template<typename DerivedT>
    #####: 5940:    class ParserRefImpl : public ComposableParserImpl<DerivedT> {
        -: 5941:    protected:
        -: 5942:        Optionality m_optionality = Optionality::Optional;
        -: 5943:        std::shared_ptr<BoundRef> m_ref;
        -: 5944:        std::string m_hint;
        -: 5945:        std::string m_description;
        -: 5946:
    #####: 5947:        explicit ParserRefImpl( std::shared_ptr<BoundRef> const &ref ) : m_ref( ref ) {}
        -: 5948:
        -: 5949:    public:
        -: 5950:        template<typename T>
    #####: 5951:        ParserRefImpl( T &ref, std::string const &hint )
        -: 5952:        :   m_ref( std::make_shared<BoundValueRef<T>>( ref ) ),
    #####: 5953:            m_hint( hint )
    #####: 5954:        {}
        -: 5955:
        -: 5956:        template<typename LambdaT>
    #####: 5957:        ParserRefImpl( LambdaT const &ref, std::string const &hint )
        -: 5958:        :   m_ref( std::make_shared<BoundLambda<LambdaT>>( ref ) ),
    #####: 5959:            m_hint(hint)
    #####: 5960:        {}
        -: 5961:
    #####: 5962:        auto operator()( std::string const &description ) -> DerivedT & {
    #####: 5963:            m_description = description;
    #####: 5964:            return static_cast<DerivedT &>( *this );
        -: 5965:        }
        -: 5966:
    #####: 5967:        auto optional() -> DerivedT & {
    #####: 5968:            m_optionality = Optionality::Optional;
    #####: 5969:            return static_cast<DerivedT &>( *this );
        -: 5970:        };
        -: 5971:
        -: 5972:        auto required() -> DerivedT & {
        -: 5973:            m_optionality = Optionality::Required;
        -: 5974:            return static_cast<DerivedT &>( *this );
        -: 5975:        };
        -: 5976:
    #####: 5977:        auto isOptional() const -> bool {
    #####: 5978:            return m_optionality == Optionality::Optional;
        -: 5979:        }
        -: 5980:
    #####: 5981:        auto cardinality() const -> size_t override {
    #####: 5982:            if( m_ref->isContainer() )
    #####: 5983:                return 0;
        -: 5984:            else
    #####: 5985:                return 1;
        -: 5986:        }
        -: 5987:
    #####: 5988:        auto hint() const -> std::string { return m_hint; }
        -: 5989:    };
        -: 5990:
    #####: 5991:    class ExeName : public ComposableParserImpl<ExeName> {
        -: 5992:        std::shared_ptr<std::string> m_name;
        -: 5993:        std::shared_ptr<BoundValueRefBase> m_ref;
        -: 5994:
        -: 5995:        template<typename LambdaT>
        -: 5996:        static auto makeRef(LambdaT const &lambda) -> std::shared_ptr<BoundValueRefBase> {
        -: 5997:            return std::make_shared<BoundLambda<LambdaT>>( lambda) ;
        -: 5998:        }
        -: 5999:
        -: 6000:    public:
    #####: 6001:        ExeName() : m_name( std::make_shared<std::string>( "<executable>" ) ) {}
        -: 6002:
    #####: 6003:        explicit ExeName( std::string &ref ) : ExeName() {
    #####: 6004:            m_ref = std::make_shared<BoundValueRef<std::string>>( ref );
    #####: 6005:        }
        -: 6006:
        -: 6007:        template<typename LambdaT>
        -: 6008:        explicit ExeName( LambdaT const& lambda ) : ExeName() {
        -: 6009:            m_ref = std::make_shared<BoundLambda<LambdaT>>( lambda );
        -: 6010:        }
        -: 6011:
        -: 6012:        // The exe name is not parsed out of the normal tokens, but is handled specially
    #####: 6013:        auto parse( std::string const&, TokenStream const &tokens ) const -> InternalParseResult override {
    #####: 6014:            return InternalParseResult::ok( ParseState( ParseResultType::NoMatch, tokens ) );
        -: 6015:        }
        -: 6016:
    #####: 6017:        auto name() const -> std::string { return *m_name; }
    #####: 6018:        auto set( std::string const& newName ) -> ParserResult {
        -: 6019:
    #####: 6020:            auto lastSlash = newName.find_last_of( "\\/" );
        -: 6021:            auto filename = ( lastSlash == std::string::npos )
        -: 6022:                    ? newName
    #####: 6023:                    : newName.substr( lastSlash+1 );
        -: 6024:
    #####: 6025:            *m_name = filename;
    #####: 6026:            if( m_ref )
    #####: 6027:                return m_ref->setValue( filename );
        -: 6028:            else
    #####: 6029:                return ParserResult::ok( ParseResultType::Matched );
        -: 6030:        }
        -: 6031:    };
        -: 6032:
    #####: 6033:    class Arg : public ParserRefImpl<Arg> {
        -: 6034:    public:
    #####: 6035:        using ParserRefImpl::ParserRefImpl;
        -: 6036:
    #####: 6037:        auto parse( std::string const &, TokenStream const &tokens ) const -> InternalParseResult override {
    #####: 6038:            auto validationResult = validate();
    #####: 6039:            if( !validationResult )
    #####: 6040:                return InternalParseResult( validationResult );
        -: 6041:
    #####: 6042:            auto remainingTokens = tokens;
    #####: 6043:            auto const &token = *remainingTokens;
    #####: 6044:            if( token.type != TokenType::Argument )
    #####: 6045:                return InternalParseResult::ok( ParseState( ParseResultType::NoMatch, remainingTokens ) );
        -: 6046:
    #####: 6047:            assert( !m_ref->isFlag() );
    #####: 6048:            auto valueRef = static_cast<detail::BoundValueRefBase*>( m_ref.get() );
        -: 6049:
    #####: 6050:            auto result = valueRef->setValue( remainingTokens->token );
    #####: 6051:            if( !result )
    #####: 6052:                return InternalParseResult( result );
        -: 6053:            else
    #####: 6054:                return InternalParseResult::ok( ParseState( ParseResultType::Matched, ++remainingTokens ) );
        -: 6055:        }
        -: 6056:    };
        -: 6057:
    #####: 6058:    inline auto normaliseOpt( std::string const &optName ) -> std::string {
        -: 6059:#ifdef CATCH_PLATFORM_WINDOWS
        -: 6060:        if( optName[0] == '/' )
        -: 6061:            return "-" + optName.substr( 1 );
        -: 6062:        else
        -: 6063:#endif
    #####: 6064:            return optName;
        -: 6065:    }
        -: 6066:
    #####: 6067:    class Opt : public ParserRefImpl<Opt> {
        -: 6068:    protected:
        -: 6069:        std::vector<std::string> m_optNames;
        -: 6070:
        -: 6071:    public:
        -: 6072:        template<typename LambdaT>
    #####: 6073:        explicit Opt( LambdaT const &ref ) : ParserRefImpl( std::make_shared<BoundFlagLambda<LambdaT>>( ref ) ) {}
        -: 6074:
    #####: 6075:        explicit Opt( bool &ref ) : ParserRefImpl( std::make_shared<BoundFlagRef>( ref ) ) {}
        -: 6076:
        -: 6077:        template<typename LambdaT>
    #####: 6078:        Opt( LambdaT const &ref, std::string const &hint ) : ParserRefImpl( ref, hint ) {}
        -: 6079:
        -: 6080:        template<typename T>
    #####: 6081:        Opt( T &ref, std::string const &hint ) : ParserRefImpl( ref, hint ) {}
        -: 6082:
    #####: 6083:        auto operator[]( std::string const &optName ) -> Opt & {
    #####: 6084:            m_optNames.push_back( optName );
    #####: 6085:            return *this;
        -: 6086:        }
        -: 6087:
    #####: 6088:        auto getHelpColumns() const -> std::vector<HelpColumns> {
    #####: 6089:            std::ostringstream oss;
    #####: 6090:            bool first = true;
    #####: 6091:            for( auto const &opt : m_optNames ) {
    #####: 6092:                if (first)
    #####: 6093:                    first = false;
        -: 6094:                else
    #####: 6095:                    oss << ", ";
    #####: 6096:                oss << opt;
        -: 6097:            }
    #####: 6098:            if( !m_hint.empty() )
    #####: 6099:                oss << " <" << m_hint << ">";
    #####: 6100:            return { { oss.str(), m_description } };
        -: 6101:        }
        -: 6102:
    #####: 6103:        auto isMatch( std::string const &optToken ) const -> bool {
    #####: 6104:            auto normalisedToken = normaliseOpt( optToken );
    #####: 6105:            for( auto const &name : m_optNames ) {
    #####: 6106:                if( normaliseOpt( name ) == normalisedToken )
    #####: 6107:                    return true;
        -: 6108:            }
    #####: 6109:            return false;
        -: 6110:        }
        -: 6111:
        -: 6112:        using ParserBase::parse;
        -: 6113:
    #####: 6114:        auto parse( std::string const&, TokenStream const &tokens ) const -> InternalParseResult override {
    #####: 6115:            auto validationResult = validate();
    #####: 6116:            if( !validationResult )
    #####: 6117:                return InternalParseResult( validationResult );
        -: 6118:
    #####: 6119:            auto remainingTokens = tokens;
    #####: 6120:            if( remainingTokens && remainingTokens->type == TokenType::Option ) {
    #####: 6121:                auto const &token = *remainingTokens;
    #####: 6122:                if( isMatch(token.token ) ) {
    #####: 6123:                    if( m_ref->isFlag() ) {
    #####: 6124:                        auto flagRef = static_cast<detail::BoundFlagRefBase*>( m_ref.get() );
    #####: 6125:                        auto result = flagRef->setFlag( true );
    #####: 6126:                        if( !result )
    #####: 6127:                            return InternalParseResult( result );
    #####: 6128:                        if( result.value() == ParseResultType::ShortCircuitAll )
    #####: 6129:                            return InternalParseResult::ok( ParseState( result.value(), remainingTokens ) );
        -: 6130:                    } else {
    #####: 6131:                        auto valueRef = static_cast<detail::BoundValueRefBase*>( m_ref.get() );
    #####: 6132:                        ++remainingTokens;
    #####: 6133:                        if( !remainingTokens )
    #####: 6134:                            return InternalParseResult::runtimeError( "Expected argument following " + token.token );
    #####: 6135:                        auto const &argToken = *remainingTokens;
    #####: 6136:                        if( argToken.type != TokenType::Argument )
    #####: 6137:                            return InternalParseResult::runtimeError( "Expected argument following " + token.token );
    #####: 6138:                        auto result = valueRef->setValue( argToken.token );
    #####: 6139:                        if( !result )
    #####: 6140:                            return InternalParseResult( result );
    #####: 6141:                        if( result.value() == ParseResultType::ShortCircuitAll )
    #####: 6142:                            return InternalParseResult::ok( ParseState( result.value(), remainingTokens ) );
        -: 6143:                    }
    #####: 6144:                    return InternalParseResult::ok( ParseState( ParseResultType::Matched, ++remainingTokens ) );
        -: 6145:                }
        -: 6146:            }
    #####: 6147:            return InternalParseResult::ok( ParseState( ParseResultType::NoMatch, remainingTokens ) );
        -: 6148:        }
        -: 6149:
    #####: 6150:        auto validate() const -> Result override {
    #####: 6151:            if( m_optNames.empty() )
    #####: 6152:                return Result::logicError( "No options supplied to Opt" );
    #####: 6153:            for( auto const &name : m_optNames ) {
    #####: 6154:                if( name.empty() )
    #####: 6155:                    return Result::logicError( "Option name cannot be empty" );
        -: 6156:#ifdef CATCH_PLATFORM_WINDOWS
        -: 6157:                if( name[0] != '-' && name[0] != '/' )
        -: 6158:                    return Result::logicError( "Option name must begin with '-' or '/'" );
        -: 6159:#else
    #####: 6160:                if( name[0] != '-' )
    #####: 6161:                    return Result::logicError( "Option name must begin with '-'" );
        -: 6162:#endif
        -: 6163:            }
    #####: 6164:            return ParserRefImpl::validate();
        -: 6165:        }
        -: 6166:    };
        -: 6167:
    #####: 6168:    struct Help : Opt {
    #####: 6169:        Help( bool &showHelpFlag )
    #####: 6170:        :   Opt([&]( bool flag ) {
    #####: 6171:                showHelpFlag = flag;
    #####: 6172:                return ParserResult::ok( ParseResultType::ShortCircuitAll );
    #####: 6173:            })
        -: 6174:        {
        -: 6175:            static_cast<Opt &>( *this )
    #####: 6176:                    ("display usage information")
    #####: 6177:                    ["-?"]["-h"]["--help"]
    #####: 6178:                    .optional();
    #####: 6179:        }
        -: 6180:    };
        -: 6181:
    #####: 6182:    struct Parser : ParserBase {
        -: 6183:
        -: 6184:        mutable ExeName m_exeName;
        -: 6185:        std::vector<Opt> m_options;
        -: 6186:        std::vector<Arg> m_args;
        -: 6187:
    #####: 6188:        auto operator|=( ExeName const &exeName ) -> Parser & {
    #####: 6189:            m_exeName = exeName;
    #####: 6190:            return *this;
        -: 6191:        }
        -: 6192:
    #####: 6193:        auto operator|=( Arg const &arg ) -> Parser & {
    #####: 6194:            m_args.push_back(arg);
    #####: 6195:            return *this;
        -: 6196:        }
        -: 6197:
    #####: 6198:        auto operator|=( Opt const &opt ) -> Parser & {
    #####: 6199:            m_options.push_back(opt);
    #####: 6200:            return *this;
        -: 6201:        }
        -: 6202:
        -: 6203:        auto operator|=( Parser const &other ) -> Parser & {
        -: 6204:            m_options.insert(m_options.end(), other.m_options.begin(), other.m_options.end());
        -: 6205:            m_args.insert(m_args.end(), other.m_args.begin(), other.m_args.end());
        -: 6206:            return *this;
        -: 6207:        }
        -: 6208:
        -: 6209:        template<typename T>
    #####: 6210:        auto operator|( T const &other ) const -> Parser {
    #####: 6211:            return Parser( *this ) |= other;
        -: 6212:        }
        -: 6213:
        -: 6214:        // Forward deprecated interface with '+' instead of '|'
        -: 6215:        template<typename T>
        -: 6216:        auto operator+=( T const &other ) -> Parser & { return operator|=( other ); }
        -: 6217:        template<typename T>
        -: 6218:        auto operator+( T const &other ) const -> Parser { return operator|( other ); }
        -: 6219:
    #####: 6220:        auto getHelpColumns() const -> std::vector<HelpColumns> {
    #####: 6221:            std::vector<HelpColumns> cols;
    #####: 6222:            for (auto const &o : m_options) {
    #####: 6223:                auto childCols = o.getHelpColumns();
    #####: 6224:                cols.insert( cols.end(), childCols.begin(), childCols.end() );
        -: 6225:            }
    #####: 6226:            return cols;
        -: 6227:        }
        -: 6228:
    #####: 6229:        void writeToStream( std::ostream &os ) const {
    #####: 6230:            if (!m_exeName.name().empty()) {
    #####: 6231:                os << "usage:\n" << "  " << m_exeName.name() << " ";
    #####: 6232:                bool required = true, first = true;
    #####: 6233:                for( auto const &arg : m_args ) {
    #####: 6234:                    if (first)
    #####: 6235:                        first = false;
        -: 6236:                    else
    #####: 6237:                        os << " ";
    #####: 6238:                    if( arg.isOptional() && required ) {
    #####: 6239:                        os << "[";
    #####: 6240:                        required = false;
        -: 6241:                    }
    #####: 6242:                    os << "<" << arg.hint() << ">";
    #####: 6243:                    if( arg.cardinality() == 0 )
    #####: 6244:                        os << " ... ";
        -: 6245:                }
    #####: 6246:                if( !required )
    #####: 6247:                    os << "]";
    #####: 6248:                if( !m_options.empty() )
    #####: 6249:                    os << " options";
    #####: 6250:                os << "\n\nwhere options are:" << std::endl;
        -: 6251:            }
        -: 6252:
    #####: 6253:            auto rows = getHelpColumns();
    #####: 6254:            size_t consoleWidth = CATCH_CLARA_CONFIG_CONSOLE_WIDTH;
    #####: 6255:            size_t optWidth = 0;
    #####: 6256:            for( auto const &cols : rows )
    #####: 6257:                optWidth = (std::max)(optWidth, cols.left.size() + 2);
        -: 6258:
    #####: 6259:            optWidth = (std::min)(optWidth, consoleWidth/2);
        -: 6260:
    #####: 6261:            for( auto const &cols : rows ) {
        -: 6262:                auto row =
    #####: 6263:                        TextFlow::Column( cols.left ).width( optWidth ).indent( 2 ) +
    #####: 6264:                        TextFlow::Spacer(4) +
    #####: 6265:                        TextFlow::Column( cols.right ).width( consoleWidth - 7 - optWidth );
    #####: 6266:                os << row << std::endl;
        -: 6267:            }
    #####: 6268:        }
        -: 6269:
    #####: 6270:        friend auto operator<<( std::ostream &os, Parser const &parser ) -> std::ostream& {
    #####: 6271:            parser.writeToStream( os );
    #####: 6272:            return os;
        -: 6273:        }
        -: 6274:
    #####: 6275:        auto validate() const -> Result override {
    #####: 6276:            for( auto const &opt : m_options ) {
    #####: 6277:                auto result = opt.validate();
    #####: 6278:                if( !result )
    #####: 6279:                    return result;
        -: 6280:            }
    #####: 6281:            for( auto const &arg : m_args ) {
    #####: 6282:                auto result = arg.validate();
    #####: 6283:                if( !result )
    #####: 6284:                    return result;
        -: 6285:            }
    #####: 6286:            return Result::ok();
        -: 6287:        }
        -: 6288:
        -: 6289:        using ParserBase::parse;
        -: 6290:
    #####: 6291:        auto parse( std::string const& exeName, TokenStream const &tokens ) const -> InternalParseResult override {
        -: 6292:
        -: 6293:            struct ParserInfo {
        -: 6294:                ParserBase const* parser = nullptr;
        -: 6295:                size_t count = 0;
        -: 6296:            };
    #####: 6297:            const size_t totalParsers = m_options.size() + m_args.size();
    #####: 6298:            assert( totalParsers < 512 );
        -: 6299:            // ParserInfo parseInfos[totalParsers]; // <-- this is what we really want to do
    #####: 6300:            ParserInfo parseInfos[512];
        -: 6301:
        -: 6302:            {
    #####: 6303:                size_t i = 0;
    #####: 6304:                for (auto const &opt : m_options) parseInfos[i++].parser = &opt;
    #####: 6305:                for (auto const &arg : m_args) parseInfos[i++].parser = &arg;
        -: 6306:            }
        -: 6307:
    #####: 6308:            m_exeName.set( exeName );
        -: 6309:
    #####: 6310:            auto result = InternalParseResult::ok( ParseState( ParseResultType::NoMatch, tokens ) );
    #####: 6311:            while( result.value().remainingTokens() ) {
    #####: 6312:                bool tokenParsed = false;
        -: 6313:
    #####: 6314:                for( size_t i = 0; i < totalParsers; ++i ) {
    #####: 6315:                    auto&  parseInfo = parseInfos[i];
    #####: 6316:                    if( parseInfo.parser->cardinality() == 0 || parseInfo.count < parseInfo.parser->cardinality() ) {
    #####: 6317:                        result = parseInfo.parser->parse(exeName, result.value().remainingTokens());
    #####: 6318:                        if (!result)
    #####: 6319:                            return result;
    #####: 6320:                        if (result.value().type() != ParseResultType::NoMatch) {
    #####: 6321:                            tokenParsed = true;
    #####: 6322:                            ++parseInfo.count;
    #####: 6323:                            break;
        -: 6324:                        }
        -: 6325:                    }
        -: 6326:                }
        -: 6327:
    #####: 6328:                if( result.value().type() == ParseResultType::ShortCircuitAll )
    #####: 6329:                    return result;
    #####: 6330:                if( !tokenParsed )
    #####: 6331:                    return InternalParseResult::runtimeError( "Unrecognised token: " + result.value().remainingTokens()->token );
        -: 6332:            }
        -: 6333:            // !TBD Check missing required options
    #####: 6334:            return result;
        -: 6335:        }
        -: 6336:    };
        -: 6337:
        -: 6338:    template<typename DerivedT>
        -: 6339:    template<typename T>
    #####: 6340:    auto ComposableParserImpl<DerivedT>::operator|( T const &other ) const -> Parser {
    #####: 6341:        return Parser() | static_cast<DerivedT const &>( *this ) | other;
        -: 6342:    }
        -: 6343:} // namespace detail
        -: 6344:
        -: 6345:// A Combined parser
        -: 6346:using detail::Parser;
        -: 6347:
        -: 6348:// A parser for options
        -: 6349:using detail::Opt;
        -: 6350:
        -: 6351:// A parser for arguments
        -: 6352:using detail::Arg;
        -: 6353:
        -: 6354:// Wrapper for argc, argv from main()
        -: 6355:using detail::Args;
        -: 6356:
        -: 6357:// Specifies the name of the executable
        -: 6358:using detail::ExeName;
        -: 6359:
        -: 6360:// Convenience wrapper for option parser that specifies the help option
        -: 6361:using detail::Help;
        -: 6362:
        -: 6363:// enum of result types from a parse
        -: 6364:using detail::ParseResultType;
        -: 6365:
        -: 6366:// Result type for parser operation
        -: 6367:using detail::ParserResult;
        -: 6368:
        -: 6369:}} // namespace Catch::clara
        -: 6370:
        -: 6371:// end clara.hpp
        -: 6372:#ifdef __clang__
        -: 6373:#pragma clang diagnostic pop
        -: 6374:#endif
        -: 6375:
        -: 6376:// Restore Clara's value for console width, if present
        -: 6377:#ifdef CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH
        -: 6378:#define CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH
        -: 6379:#undef CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH
        -: 6380:#endif
        -: 6381:
        -: 6382:// end catch_clara.h
        -: 6383:namespace Catch {
        -: 6384:
        -: 6385:    clara::Parser makeCommandLineParser( ConfigData& config );
        -: 6386:
        -: 6387:} // end namespace Catch
        -: 6388:
        -: 6389:// end catch_commandline.h
        -: 6390:#include <fstream>
        -: 6391:#include <ctime>
        -: 6392:
        -: 6393:namespace Catch {
        -: 6394:
    #####: 6395:    clara::Parser makeCommandLineParser( ConfigData& config ) {
        -: 6396:
        -: 6397:        using namespace clara;
        -: 6398:
    #####: 6399:        auto const setWarning = [&]( std::string const& warning ) {
    #####: 6400:                auto warningSet = [&]() {
    #####: 6401:                    if( warning == "NoAssertions" )
    #####: 6402:                        return WarnAbout::NoAssertions;
        -: 6403:
    #####: 6404:                    if ( warning == "NoTests" )
    #####: 6405:                        return WarnAbout::NoTests;
        -: 6406:
    #####: 6407:                    return WarnAbout::Nothing;
    #####: 6408:                }();
        -: 6409:
    #####: 6410:                if (warningSet == WarnAbout::Nothing)
    #####: 6411:                    return ParserResult::runtimeError( "Unrecognised warning: '" + warning + "'" );
    #####: 6412:                config.warnings = static_cast<WarnAbout::What>( config.warnings | warningSet );
    #####: 6413:                return ParserResult::ok( ParseResultType::Matched );
    #####: 6414:            };
    #####: 6415:        auto const loadTestNamesFromFile = [&]( std::string const& filename ) {
    #####: 6416:                std::ifstream f( filename.c_str() );
    #####: 6417:                if( !f.is_open() )
    #####: 6418:                    return ParserResult::runtimeError( "Unable to load input file: '" + filename + "'" );
        -: 6419:
    #####: 6420:                std::string line;
    #####: 6421:                while( std::getline( f, line ) ) {
    #####: 6422:                    line = trim(line);
    #####: 6423:                    if( !line.empty() && !startsWith( line, '#' ) ) {
    #####: 6424:                        if( !startsWith( line, '"' ) )
    #####: 6425:                            line = '"' + line + '"';
    #####: 6426:                        config.testsOrTags.push_back( line + ',' );
        -: 6427:                    }
        -: 6428:                }
    #####: 6429:                return ParserResult::ok( ParseResultType::Matched );
    #####: 6430:            };
    #####: 6431:        auto const setTestOrder = [&]( std::string const& order ) {
    #####: 6432:                if( startsWith( "declared", order ) )
    #####: 6433:                    config.runOrder = RunTests::InDeclarationOrder;
    #####: 6434:                else if( startsWith( "lexical", order ) )
    #####: 6435:                    config.runOrder = RunTests::InLexicographicalOrder;
    #####: 6436:                else if( startsWith( "random", order ) )
    #####: 6437:                    config.runOrder = RunTests::InRandomOrder;
        -: 6438:                else
    #####: 6439:                    return clara::ParserResult::runtimeError( "Unrecognised ordering: '" + order + "'" );
    #####: 6440:                return ParserResult::ok( ParseResultType::Matched );
    #####: 6441:            };
    #####: 6442:        auto const setRngSeed = [&]( std::string const& seed ) {
    #####: 6443:                if( seed != "time" )
    #####: 6444:                    return clara::detail::convertInto( seed, config.rngSeed );
    #####: 6445:                config.rngSeed = static_cast<unsigned int>( std::time(nullptr) );
    #####: 6446:                return ParserResult::ok( ParseResultType::Matched );
    #####: 6447:            };
    #####: 6448:        auto const setColourUsage = [&]( std::string const& useColour ) {
    #####: 6449:                    auto mode = toLower( useColour );
        -: 6450:
    #####: 6451:                    if( mode == "yes" )
    #####: 6452:                        config.useColour = UseColour::Yes;
    #####: 6453:                    else if( mode == "no" )
    #####: 6454:                        config.useColour = UseColour::No;
    #####: 6455:                    else if( mode == "auto" )
    #####: 6456:                        config.useColour = UseColour::Auto;
        -: 6457:                    else
    #####: 6458:                        return ParserResult::runtimeError( "colour mode must be one of: auto, yes or no. '" + useColour + "' not recognised" );
    #####: 6459:                return ParserResult::ok( ParseResultType::Matched );
    #####: 6460:            };
    #####: 6461:        auto const setWaitForKeypress = [&]( std::string const& keypress ) {
    #####: 6462:                auto keypressLc = toLower( keypress );
    #####: 6463:                if( keypressLc == "start" )
    #####: 6464:                    config.waitForKeypress = WaitForKeypress::BeforeStart;
    #####: 6465:                else if( keypressLc == "exit" )
    #####: 6466:                    config.waitForKeypress = WaitForKeypress::BeforeExit;
    #####: 6467:                else if( keypressLc == "both" )
    #####: 6468:                    config.waitForKeypress = WaitForKeypress::BeforeStartAndExit;
        -: 6469:                else
    #####: 6470:                    return ParserResult::runtimeError( "keypress argument must be one of: start, exit or both. '" + keypress + "' not recognised" );
    #####: 6471:            return ParserResult::ok( ParseResultType::Matched );
    #####: 6472:            };
    #####: 6473:        auto const setVerbosity = [&]( std::string const& verbosity ) {
    #####: 6474:            auto lcVerbosity = toLower( verbosity );
    #####: 6475:            if( lcVerbosity == "quiet" )
    #####: 6476:                config.verbosity = Verbosity::Quiet;
    #####: 6477:            else if( lcVerbosity == "normal" )
    #####: 6478:                config.verbosity = Verbosity::Normal;
    #####: 6479:            else if( lcVerbosity == "high" )
    #####: 6480:                config.verbosity = Verbosity::High;
        -: 6481:            else
    #####: 6482:                return ParserResult::runtimeError( "Unrecognised verbosity, '" + verbosity + "'" );
    #####: 6483:            return ParserResult::ok( ParseResultType::Matched );
    #####: 6484:        };
        -: 6485:
        -: 6486:        auto cli
    #####: 6487:            = ExeName( config.processName )
    #####: 6488:            | Help( config.showHelp )
    #####: 6489:            | Opt( config.listTests )
    #####: 6490:                ["-l"]["--list-tests"]
    #####: 6491:                ( "list all/matching test cases" )
    #####: 6492:            | Opt( config.listTags )
    #####: 6493:                ["-t"]["--list-tags"]
    #####: 6494:                ( "list all/matching tags" )
    #####: 6495:            | Opt( config.showSuccessfulTests )
    #####: 6496:                ["-s"]["--success"]
    #####: 6497:                ( "include successful tests in output" )
    #####: 6498:            | Opt( config.shouldDebugBreak )
    #####: 6499:                ["-b"]["--break"]
    #####: 6500:                ( "break into debugger on failure" )
    #####: 6501:            | Opt( config.noThrow )
    #####: 6502:                ["-e"]["--nothrow"]
    #####: 6503:                ( "skip exception tests" )
    #####: 6504:            | Opt( config.showInvisibles )
    #####: 6505:                ["-i"]["--invisibles"]
    #####: 6506:                ( "show invisibles (tabs, newlines)" )
    #####: 6507:            | Opt( config.outputFilename, "filename" )
    #####: 6508:                ["-o"]["--out"]
    #####: 6509:                ( "output filename" )
    #####: 6510:            | Opt( config.reporterNames, "name" )
    #####: 6511:                ["-r"]["--reporter"]
    #####: 6512:                ( "reporter to use (defaults to console)" )
    #####: 6513:            | Opt( config.name, "name" )
    #####: 6514:                ["-n"]["--name"]
    #####: 6515:                ( "suite name" )
    #####: 6516:            | Opt( [&]( bool ){ config.abortAfter = 1; } )
    #####: 6517:                ["-a"]["--abort"]
    #####: 6518:                ( "abort at first failure" )
    #####: 6519:            | Opt( [&]( int x ){ config.abortAfter = x; }, "no. failures" )
    #####: 6520:                ["-x"]["--abortx"]
    #####: 6521:                ( "abort after x failures" )
    #####: 6522:            | Opt( setWarning, "warning name" )
    #####: 6523:                ["-w"]["--warn"]
    #####: 6524:                ( "enable warnings" )
    #####: 6525:            | Opt( [&]( bool flag ) { config.showDurations = flag ? ShowDurations::Always : ShowDurations::Never; }, "yes|no" )
    #####: 6526:                ["-d"]["--durations"]
    #####: 6527:                ( "show test durations" )
    #####: 6528:            | Opt( loadTestNamesFromFile, "filename" )
    #####: 6529:                ["-f"]["--input-file"]
    #####: 6530:                ( "load test names to run from a file" )
    #####: 6531:            | Opt( config.filenamesAsTags )
    #####: 6532:                ["-#"]["--filenames-as-tags"]
    #####: 6533:                ( "adds a tag for the filename" )
    #####: 6534:            | Opt( config.sectionsToRun, "section name" )
    #####: 6535:                ["-c"]["--section"]
    #####: 6536:                ( "specify section to run" )
    #####: 6537:            | Opt( setVerbosity, "quiet|normal|high" )
    #####: 6538:                ["-v"]["--verbosity"]
    #####: 6539:                ( "set output verbosity" )
    #####: 6540:            | Opt( config.listTestNamesOnly )
    #####: 6541:                ["--list-test-names-only"]
    #####: 6542:                ( "list all/matching test cases names only" )
    #####: 6543:            | Opt( config.listReporters )
    #####: 6544:                ["--list-reporters"]
    #####: 6545:                ( "list all reporters" )
    #####: 6546:            | Opt( setTestOrder, "decl|lex|rand" )
    #####: 6547:                ["--order"]
    #####: 6548:                ( "test case order (defaults to decl)" )
    #####: 6549:            | Opt( setRngSeed, "'time'|number" )
    #####: 6550:                ["--rng-seed"]
    #####: 6551:                ( "set a specific seed for random numbers" )
    #####: 6552:            | Opt( setColourUsage, "yes|no" )
    #####: 6553:                ["--use-colour"]
    #####: 6554:                ( "should output be colourised" )
    #####: 6555:            | Opt( config.libIdentify )
    #####: 6556:                ["--libidentify"]
    #####: 6557:                ( "report name and version according to libidentify standard" )
    #####: 6558:            | Opt( setWaitForKeypress, "start|exit|both" )
    #####: 6559:                ["--wait-for-keypress"]
    #####: 6560:                ( "waits for a keypress before exiting" )
    #####: 6561:            | Opt( config.benchmarkResolutionMultiple, "multiplier" )
    #####: 6562:                ["--benchmark-resolution-multiple"]
    #####: 6563:                ( "multiple of clock resolution to run benchmarks" )
        -: 6564:
    #####: 6565:            | Arg( config.testsOrTags, "test name|pattern|tags" )
    #####: 6566:                ( "which test or tests to use" );
        -: 6567:
    #####: 6568:        return cli;
        -: 6569:    }
        -: 6570:
        -: 6571:} // end namespace Catch
        -: 6572:// end catch_commandline.cpp
        -: 6573:// start catch_common.cpp
        -: 6574:
        -: 6575:#include <cstring>
        -: 6576:#include <ostream>
        -: 6577:
        -: 6578:namespace Catch {
        -: 6579:
    #####: 6580:    bool SourceLineInfo::empty() const noexcept {
    #####: 6581:        return file[0] == '\0';
        -: 6582:    }
    #####: 6583:    bool SourceLineInfo::operator == ( SourceLineInfo const& other ) const noexcept {
    #####: 6584:        return line == other.line && (file == other.file || std::strcmp(file, other.file) == 0);
        -: 6585:    }
    #####: 6586:    bool SourceLineInfo::operator < ( SourceLineInfo const& other ) const noexcept {
    #####: 6587:        return line < other.line || ( line == other.line && (std::strcmp(file, other.file) < 0));
        -: 6588:    }
        -: 6589:
    #####: 6590:    std::ostream& operator << ( std::ostream& os, SourceLineInfo const& info ) {
        -: 6591:#ifndef __GNUG__
        -: 6592:        os << info.file << '(' << info.line << ')';
        -: 6593:#else
    #####: 6594:        os << info.file << ':' << info.line;
        -: 6595:#endif
    #####: 6596:        return os;
        -: 6597:    }
        -: 6598:
    #####: 6599:    std::string StreamEndStop::operator+() const {
    #####: 6600:        return std::string();
        -: 6601:    }
        -: 6602:
        -: 6603:    NonCopyable::NonCopyable() = default;
        -: 6604:    NonCopyable::~NonCopyable() = default;
        -: 6605:
        -: 6606:}
        -: 6607:// end catch_common.cpp
        -: 6608:// start catch_config.cpp
        -: 6609:
        -: 6610:// start catch_enforce.h
        -: 6611:
        -: 6612:#include <stdexcept>
        -: 6613:
        -: 6614:#define CATCH_PREPARE_EXCEPTION( type, msg ) \
        -: 6615:    type( ( Catch::ReusableStringStream() << msg ).str() )
        -: 6616:#define CATCH_INTERNAL_ERROR( msg ) \
        -: 6617:    throw CATCH_PREPARE_EXCEPTION( std::logic_error, CATCH_INTERNAL_LINEINFO << ": Internal Catch error: " << msg);
        -: 6618:#define CATCH_ERROR( msg ) \
        -: 6619:    throw CATCH_PREPARE_EXCEPTION( std::domain_error, msg )
        -: 6620:#define CATCH_ENFORCE( condition, msg ) \
        -: 6621:    do{ if( !(condition) ) CATCH_ERROR( msg ); } while(false)
        -: 6622:
        -: 6623:// end catch_enforce.h
        -: 6624:namespace Catch {
        -: 6625:
    #####: 6626:    Config::Config( ConfigData const& data )
        -: 6627:    :   m_data( data ),
    #####: 6628:        m_stream( openStream() )
        -: 6629:    {
    #####: 6630:        TestSpecParser parser(ITagAliasRegistry::get());
    #####: 6631:        if (data.testsOrTags.empty()) {
    #####: 6632:            parser.parse("~[.]"); // All not hidden tests
        -: 6633:        }
        -: 6634:        else {
    #####: 6635:            m_hasTestFilters = true;
    #####: 6636:            for( auto const& testOrTags : data.testsOrTags )
    #####: 6637:                parser.parse( testOrTags );
        -: 6638:        }
    #####: 6639:        m_testSpec = parser.testSpec();
    #####: 6640:    }
        -: 6641:
    #####: 6642:    std::string const& Config::getFilename() const {
    #####: 6643:        return m_data.outputFilename ;
        -: 6644:    }
        -: 6645:
    #####: 6646:    bool Config::listTests() const          { return m_data.listTests; }
    #####: 6647:    bool Config::listTestNamesOnly() const  { return m_data.listTestNamesOnly; }
    #####: 6648:    bool Config::listTags() const           { return m_data.listTags; }
    #####: 6649:    bool Config::listReporters() const      { return m_data.listReporters; }
        -: 6650:
    #####: 6651:    std::string Config::getProcessName() const { return m_data.processName; }
        -: 6652:
    #####: 6653:    std::vector<std::string> const& Config::getReporterNames() const { return m_data.reporterNames; }
    #####: 6654:    std::vector<std::string> const& Config::getTestsOrTags() const { return m_data.testsOrTags; }
    #####: 6655:    std::vector<std::string> const& Config::getSectionsToRun() const { return m_data.sectionsToRun; }
        -: 6656:
    #####: 6657:    TestSpec const& Config::testSpec() const { return m_testSpec; }
    #####: 6658:    bool Config::hasTestFilters() const { return m_hasTestFilters; }
        -: 6659:
    #####: 6660:    bool Config::showHelp() const { return m_data.showHelp; }
        -: 6661:
        -: 6662:    // IConfig interface
    #####: 6663:    bool Config::allowThrows() const                   { return !m_data.noThrow; }
    #####: 6664:    std::ostream& Config::stream() const               { return m_stream->stream(); }
    #####: 6665:    std::string Config::name() const                   { return m_data.name.empty() ? m_data.processName : m_data.name; }
    #####: 6666:    bool Config::includeSuccessfulResults() const      { return m_data.showSuccessfulTests; }
    #####: 6667:    bool Config::warnAboutMissingAssertions() const    { return !!(m_data.warnings & WarnAbout::NoAssertions); }
    #####: 6668:    bool Config::warnAboutNoTests() const              { return !!(m_data.warnings & WarnAbout::NoTests); }
    #####: 6669:    ShowDurations::OrNot Config::showDurations() const { return m_data.showDurations; }
    #####: 6670:    RunTests::InWhatOrder Config::runOrder() const     { return m_data.runOrder; }
    #####: 6671:    unsigned int Config::rngSeed() const               { return m_data.rngSeed; }
    #####: 6672:    int Config::benchmarkResolutionMultiple() const    { return m_data.benchmarkResolutionMultiple; }
    #####: 6673:    UseColour::YesOrNo Config::useColour() const       { return m_data.useColour; }
    #####: 6674:    bool Config::shouldDebugBreak() const              { return m_data.shouldDebugBreak; }
    #####: 6675:    int Config::abortAfter() const                     { return m_data.abortAfter; }
    #####: 6676:    bool Config::showInvisibles() const                { return m_data.showInvisibles; }
    #####: 6677:    Verbosity Config::verbosity() const                { return m_data.verbosity; }
        -: 6678:
    #####: 6679:    IStream const* Config::openStream() {
    #####: 6680:        return Catch::makeStream(m_data.outputFilename);
        -: 6681:    }
        -: 6682:
        -: 6683:} // end namespace Catch
        -: 6684:// end catch_config.cpp
        -: 6685:// start catch_console_colour.cpp
        -: 6686:
        -: 6687:#if defined(__clang__)
        -: 6688:#    pragma clang diagnostic push
        -: 6689:#    pragma clang diagnostic ignored "-Wexit-time-destructors"
        -: 6690:#endif
        -: 6691:
        -: 6692:// start catch_errno_guard.h
        -: 6693:
        -: 6694:namespace Catch {
        -: 6695:
        -: 6696:    class ErrnoGuard {
        -: 6697:    public:
        -: 6698:        ErrnoGuard();
        -: 6699:        ~ErrnoGuard();
        -: 6700:    private:
        -: 6701:        int m_oldErrno;
        -: 6702:    };
        -: 6703:
        -: 6704:}
        -: 6705:
        -: 6706:// end catch_errno_guard.h
        -: 6707:#include <sstream>
        -: 6708:
        -: 6709:namespace Catch {
        -: 6710:    namespace {
        -: 6711:
        -: 6712:        struct IColourImpl {
    #####: 6713:            virtual ~IColourImpl() = default;
        -: 6714:            virtual void use( Colour::Code _colourCode ) = 0;
        -: 6715:        };
        -: 6716:
    #####: 6717:        struct NoColourImpl : IColourImpl {
    #####: 6718:            void use( Colour::Code ) {}
        -: 6719:
    #####: 6720:            static IColourImpl* instance() {
    #####: 6721:                static NoColourImpl s_instance;
    #####: 6722:                return &s_instance;
        -: 6723:            }
        -: 6724:        };
        -: 6725:
        -: 6726:    } // anon namespace
        -: 6727:} // namespace Catch
        -: 6728:
        -: 6729:#if !defined( CATCH_CONFIG_COLOUR_NONE ) && !defined( CATCH_CONFIG_COLOUR_WINDOWS ) && !defined( CATCH_CONFIG_COLOUR_ANSI )
        -: 6730:#   ifdef CATCH_PLATFORM_WINDOWS
        -: 6731:#       define CATCH_CONFIG_COLOUR_WINDOWS
        -: 6732:#   else
        -: 6733:#       define CATCH_CONFIG_COLOUR_ANSI
        -: 6734:#   endif
        -: 6735:#endif
        -: 6736:
        -: 6737:#if defined ( CATCH_CONFIG_COLOUR_WINDOWS ) /////////////////////////////////////////
        -: 6738:
        -: 6739:namespace Catch {
        -: 6740:namespace {
        -: 6741:
        -: 6742:    class Win32ColourImpl : public IColourImpl {
        -: 6743:    public:
        -: 6744:        Win32ColourImpl() : stdoutHandle( GetStdHandle(STD_OUTPUT_HANDLE) )
        -: 6745:        {
        -: 6746:            CONSOLE_SCREEN_BUFFER_INFO csbiInfo;
        -: 6747:            GetConsoleScreenBufferInfo( stdoutHandle, &csbiInfo );
        -: 6748:            originalForegroundAttributes = csbiInfo.wAttributes & ~( BACKGROUND_GREEN | BACKGROUND_RED | BACKGROUND_BLUE | BACKGROUND_INTENSITY );
        -: 6749:            originalBackgroundAttributes = csbiInfo.wAttributes & ~( FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_INTENSITY );
        -: 6750:        }
        -: 6751:
        -: 6752:        virtual void use( Colour::Code _colourCode ) override {
        -: 6753:            switch( _colourCode ) {
        -: 6754:                case Colour::None:      return setTextAttribute( originalForegroundAttributes );
        -: 6755:                case Colour::White:     return setTextAttribute( FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE );
        -: 6756:                case Colour::Red:       return setTextAttribute( FOREGROUND_RED );
        -: 6757:                case Colour::Green:     return setTextAttribute( FOREGROUND_GREEN );
        -: 6758:                case Colour::Blue:      return setTextAttribute( FOREGROUND_BLUE );
        -: 6759:                case Colour::Cyan:      return setTextAttribute( FOREGROUND_BLUE | FOREGROUND_GREEN );
        -: 6760:                case Colour::Yellow:    return setTextAttribute( FOREGROUND_RED | FOREGROUND_GREEN );
        -: 6761:                case Colour::Grey:      return setTextAttribute( 0 );
        -: 6762:
        -: 6763:                case Colour::LightGrey:     return setTextAttribute( FOREGROUND_INTENSITY );
        -: 6764:                case Colour::BrightRed:     return setTextAttribute( FOREGROUND_INTENSITY | FOREGROUND_RED );
        -: 6765:                case Colour::BrightGreen:   return setTextAttribute( FOREGROUND_INTENSITY | FOREGROUND_GREEN );
        -: 6766:                case Colour::BrightWhite:   return setTextAttribute( FOREGROUND_INTENSITY | FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE );
        -: 6767:                case Colour::BrightYellow:  return setTextAttribute( FOREGROUND_INTENSITY | FOREGROUND_RED | FOREGROUND_GREEN );
        -: 6768:
        -: 6769:                case Colour::Bright: CATCH_INTERNAL_ERROR( "not a colour" );
        -: 6770:
        -: 6771:                default:
        -: 6772:                    CATCH_ERROR( "Unknown colour requested" );
        -: 6773:            }
        -: 6774:        }
        -: 6775:
        -: 6776:    private:
        -: 6777:        void setTextAttribute( WORD _textAttribute ) {
        -: 6778:            SetConsoleTextAttribute( stdoutHandle, _textAttribute | originalBackgroundAttributes );
        -: 6779:        }
        -: 6780:        HANDLE stdoutHandle;
        -: 6781:        WORD originalForegroundAttributes;
        -: 6782:        WORD originalBackgroundAttributes;
        -: 6783:    };
        -: 6784:
        -: 6785:    IColourImpl* platformColourInstance() {
        -: 6786:        static Win32ColourImpl s_instance;
        -: 6787:
        -: 6788:        IConfigPtr config = getCurrentContext().getConfig();
        -: 6789:        UseColour::YesOrNo colourMode = config
        -: 6790:            ? config->useColour()
        -: 6791:            : UseColour::Auto;
        -: 6792:        if( colourMode == UseColour::Auto )
        -: 6793:            colourMode = UseColour::Yes;
        -: 6794:        return colourMode == UseColour::Yes
        -: 6795:            ? &s_instance
        -: 6796:            : NoColourImpl::instance();
        -: 6797:    }
        -: 6798:
        -: 6799:} // end anon namespace
        -: 6800:} // end namespace Catch
        -: 6801:
        -: 6802:#elif defined( CATCH_CONFIG_COLOUR_ANSI ) //////////////////////////////////////
        -: 6803:
        -: 6804:#include <unistd.h>
        -: 6805:
        -: 6806:namespace Catch {
        -: 6807:namespace {
        -: 6808:
        -: 6809:    // use POSIX/ ANSI console terminal codes
        -: 6810:    // Thanks to Adam Strzelecki for original contribution
        -: 6811:    // (http://github.com/nanoant)
        -: 6812:    // https://github.com/philsquared/Catch/pull/131
    #####: 6813:    class PosixColourImpl : public IColourImpl {
        -: 6814:    public:
    #####: 6815:        virtual void use( Colour::Code _colourCode ) override {
    #####: 6816:            switch( _colourCode ) {
        -: 6817:                case Colour::None:
    #####: 6818:                case Colour::White:     return setColour( "[0m" );
    #####: 6819:                case Colour::Red:       return setColour( "[0;31m" );
    #####: 6820:                case Colour::Green:     return setColour( "[0;32m" );
    #####: 6821:                case Colour::Blue:      return setColour( "[0;34m" );
    #####: 6822:                case Colour::Cyan:      return setColour( "[0;36m" );
    #####: 6823:                case Colour::Yellow:    return setColour( "[0;33m" );
    #####: 6824:                case Colour::Grey:      return setColour( "[1;30m" );
        -: 6825:
    #####: 6826:                case Colour::LightGrey:     return setColour( "[0;37m" );
    #####: 6827:                case Colour::BrightRed:     return setColour( "[1;31m" );
    #####: 6828:                case Colour::BrightGreen:   return setColour( "[1;32m" );
    #####: 6829:                case Colour::BrightWhite:   return setColour( "[1;37m" );
    #####: 6830:                case Colour::BrightYellow:  return setColour( "[1;33m" );
        -: 6831:
    #####: 6832:                case Colour::Bright: CATCH_INTERNAL_ERROR( "not a colour" );
    #####: 6833:                default: CATCH_INTERNAL_ERROR( "Unknown colour requested" );
        -: 6834:            }
        -: 6835:        }
    #####: 6836:        static IColourImpl* instance() {
    #####: 6837:            static PosixColourImpl s_instance;
    #####: 6838:            return &s_instance;
        -: 6839:        }
        -: 6840:
        -: 6841:    private:
    #####: 6842:        void setColour( const char* _escapeCode ) {
    #####: 6843:            Catch::cout() << '\033' << _escapeCode;
    #####: 6844:        }
        -: 6845:    };
        -: 6846:
    #####: 6847:    bool useColourOnPlatform() {
        -: 6848:        return
        -: 6849:#ifdef CATCH_PLATFORM_MAC
        -: 6850:            !isDebuggerActive() &&
        -: 6851:#endif
        -: 6852:#if !(defined(__DJGPP__) && defined(__STRICT_ANSI__))
    #####: 6853:            isatty(STDOUT_FILENO)
        -: 6854:#else
        -: 6855:            false
        -: 6856:#endif
        -: 6857:            ;
        -: 6858:    }
    #####: 6859:    IColourImpl* platformColourInstance() {
    #####: 6860:        ErrnoGuard guard;
    #####: 6861:        IConfigPtr config = getCurrentContext().getConfig();
        -: 6862:        UseColour::YesOrNo colourMode = config
    #####: 6863:            ? config->useColour()
    #####: 6864:            : UseColour::Auto;
    #####: 6865:        if( colourMode == UseColour::Auto )
    #####: 6866:            colourMode = useColourOnPlatform()
    #####: 6867:                ? UseColour::Yes
        -: 6868:                : UseColour::No;
        -: 6869:        return colourMode == UseColour::Yes
    #####: 6870:            ? PosixColourImpl::instance()
    #####: 6871:            : NoColourImpl::instance();
        -: 6872:    }
        -: 6873:
        -: 6874:} // end anon namespace
        -: 6875:} // end namespace Catch
        -: 6876:
        -: 6877:#else  // not Windows or ANSI ///////////////////////////////////////////////
        -: 6878:
        -: 6879:namespace Catch {
        -: 6880:
        -: 6881:    static IColourImpl* platformColourInstance() { return NoColourImpl::instance(); }
        -: 6882:
        -: 6883:} // end namespace Catch
        -: 6884:
        -: 6885:#endif // Windows/ ANSI/ None
        -: 6886:
        -: 6887:namespace Catch {
        -: 6888:
    #####: 6889:    Colour::Colour( Code _colourCode ) { use( _colourCode ); }
    #####: 6890:    Colour::Colour( Colour&& rhs ) noexcept {
    #####: 6891:        m_moved = rhs.m_moved;
    #####: 6892:        rhs.m_moved = true;
    #####: 6893:    }
    #####: 6894:    Colour& Colour::operator=( Colour&& rhs ) noexcept {
    #####: 6895:        m_moved = rhs.m_moved;
    #####: 6896:        rhs.m_moved  = true;
    #####: 6897:        return *this;
        -: 6898:    }
        -: 6899:
    #####: 6900:    Colour::~Colour(){ if( !m_moved ) use( None ); }
        -: 6901:
    #####: 6902:    void Colour::use( Code _colourCode ) {
    #####: 6903:        static IColourImpl* impl = platformColourInstance();
    #####: 6904:        impl->use( _colourCode );
    #####: 6905:    }
        -: 6906:
    #####: 6907:    std::ostream& operator << ( std::ostream& os, Colour const& ) {
    #####: 6908:        return os;
        -: 6909:    }
        -: 6910:
        -: 6911:} // end namespace Catch
        -: 6912:
        -: 6913:#if defined(__clang__)
        -: 6914:#    pragma clang diagnostic pop
        -: 6915:#endif
        -: 6916:
        -: 6917:// end catch_console_colour.cpp
        -: 6918:// start catch_context.cpp
        -: 6919:
        -: 6920:namespace Catch {
        -: 6921:
    #####: 6922:    class Context : public IMutableContext, NonCopyable {
        -: 6923:
        -: 6924:    public: // IContext
    #####: 6925:        virtual IResultCapture* getResultCapture() override {
    #####: 6926:            return m_resultCapture;
        -: 6927:        }
    #####: 6928:        virtual IRunner* getRunner() override {
    #####: 6929:            return m_runner;
        -: 6930:        }
        -: 6931:
    #####: 6932:        virtual IConfigPtr const& getConfig() const override {
    #####: 6933:            return m_config;
        -: 6934:        }
        -: 6935:
        -: 6936:        virtual ~Context() override;
        -: 6937:
        -: 6938:    public: // IMutableContext
    #####: 6939:        virtual void setResultCapture( IResultCapture* resultCapture ) override {
    #####: 6940:            m_resultCapture = resultCapture;
    #####: 6941:        }
    #####: 6942:        virtual void setRunner( IRunner* runner ) override {
    #####: 6943:            m_runner = runner;
    #####: 6944:        }
    #####: 6945:        virtual void setConfig( IConfigPtr const& config ) override {
    #####: 6946:            m_config = config;
    #####: 6947:        }
        -: 6948:
        -: 6949:        friend IMutableContext& getCurrentMutableContext();
        -: 6950:
        -: 6951:    private:
        -: 6952:        IConfigPtr m_config;
        -: 6953:        IRunner* m_runner = nullptr;
        -: 6954:        IResultCapture* m_resultCapture = nullptr;
        -: 6955:    };
        -: 6956:
        -: 6957:    IMutableContext *IMutableContext::currentContext = nullptr;
        -: 6958:
    #####: 6959:    void IMutableContext::createContext()
        -: 6960:    {
    #####: 6961:        currentContext = new Context();
    #####: 6962:    }
        -: 6963:
    #####: 6964:    void cleanUpContext() {
    #####: 6965:        delete IMutableContext::currentContext;
    #####: 6966:        IMutableContext::currentContext = nullptr;
    #####: 6967:    }
        -: 6968:    IContext::~IContext() = default;
        -: 6969:    IMutableContext::~IMutableContext() = default;
        -: 6970:    Context::~Context() = default;
        -: 6971:}
        -: 6972:// end catch_context.cpp
        -: 6973:// start catch_debug_console.cpp
        -: 6974:
        -: 6975:// start catch_debug_console.h
        -: 6976:
        -: 6977:#include <string>
        -: 6978:
        -: 6979:namespace Catch {
        -: 6980:    void writeToDebugConsole( std::string const& text );
        -: 6981:}
        -: 6982:
        -: 6983:// end catch_debug_console.h
        -: 6984:#ifdef CATCH_PLATFORM_WINDOWS
        -: 6985:
        -: 6986:    namespace Catch {
        -: 6987:        void writeToDebugConsole( std::string const& text ) {
        -: 6988:            ::OutputDebugStringA( text.c_str() );
        -: 6989:        }
        -: 6990:    }
        -: 6991:
        -: 6992:#else
        -: 6993:
        -: 6994:    namespace Catch {
    #####: 6995:        void writeToDebugConsole( std::string const& text ) {
        -: 6996:            // !TBD: Need a version for Mac/ XCode and other IDEs
    #####: 6997:            Catch::cout() << text;
    #####: 6998:        }
        -: 6999:    }
        -: 7000:
        -: 7001:#endif // Platform
        -: 7002:// end catch_debug_console.cpp
        -: 7003:// start catch_debugger.cpp
        -: 7004:
        -: 7005:#ifdef CATCH_PLATFORM_MAC
        -: 7006:
        -: 7007:#  include <assert.h>
        -: 7008:#  include <stdbool.h>
        -: 7009:#  include <sys/types.h>
        -: 7010:#  include <unistd.h>
        -: 7011:#  include <sys/sysctl.h>
        -: 7012:#  include <cstddef>
        -: 7013:#  include <ostream>
        -: 7014:
        -: 7015:namespace Catch {
        -: 7016:
        -: 7017:        // The following function is taken directly from the following technical note:
        -: 7018:        // http://developer.apple.com/library/mac/#qa/qa2004/qa1361.html
        -: 7019:
        -: 7020:        // Returns true if the current process is being debugged (either
        -: 7021:        // running under the debugger or has a debugger attached post facto).
        -: 7022:        bool isDebuggerActive(){
        -: 7023:
        -: 7024:            int                 mib[4];
        -: 7025:            struct kinfo_proc   info;
        -: 7026:            std::size_t         size;
        -: 7027:
        -: 7028:            // Initialize the flags so that, if sysctl fails for some bizarre
        -: 7029:            // reason, we get a predictable result.
        -: 7030:
        -: 7031:            info.kp_proc.p_flag = 0;
        -: 7032:
        -: 7033:            // Initialize mib, which tells sysctl the info we want, in this case
        -: 7034:            // we're looking for information about a specific process ID.
        -: 7035:
        -: 7036:            mib[0] = CTL_KERN;
        -: 7037:            mib[1] = KERN_PROC;
        -: 7038:            mib[2] = KERN_PROC_PID;
        -: 7039:            mib[3] = getpid();
        -: 7040:
        -: 7041:            // Call sysctl.
        -: 7042:
        -: 7043:            size = sizeof(info);
        -: 7044:            if( sysctl(mib, sizeof(mib) / sizeof(*mib), &info, &size, nullptr, 0) != 0 ) {
        -: 7045:                Catch::cerr() << "\n** Call to sysctl failed - unable to determine if debugger is active **\n" << std::endl;
        -: 7046:                return false;
        -: 7047:            }
        -: 7048:
        -: 7049:            // We're being debugged if the P_TRACED flag is set.
        -: 7050:
        -: 7051:            return ( (info.kp_proc.p_flag & P_TRACED) != 0 );
        -: 7052:        }
        -: 7053:    } // namespace Catch
        -: 7054:
        -: 7055:#elif defined(CATCH_PLATFORM_LINUX)
        -: 7056:    #include <fstream>
        -: 7057:    #include <string>
        -: 7058:
        -: 7059:    namespace Catch{
        -: 7060:        // The standard POSIX way of detecting a debugger is to attempt to
        -: 7061:        // ptrace() the process, but this needs to be done from a child and not
        -: 7062:        // this process itself to still allow attaching to this process later
        -: 7063:        // if wanted, so is rather heavy. Under Linux we have the PID of the
        -: 7064:        // "debugger" (which doesn't need to be gdb, of course, it could also
        -: 7065:        // be strace, for example) in /proc/$PID/status, so just get it from
        -: 7066:        // there instead.
    #####: 7067:        bool isDebuggerActive(){
        -: 7068:            // Libstdc++ has a bug, where std::ifstream sets errno to 0
        -: 7069:            // This way our users can properly assert over errno values
    #####: 7070:            ErrnoGuard guard;
    #####: 7071:            std::ifstream in("/proc/self/status");
    #####: 7072:            for( std::string line; std::getline(in, line); ) {
        -: 7073:                static const int PREFIX_LEN = 11;
    #####: 7074:                if( line.compare(0, PREFIX_LEN, "TracerPid:\t") == 0 ) {
        -: 7075:                    // We're traced if the PID is not 0 and no other PID starts
        -: 7076:                    // with 0 digit, so it's enough to check for just a single
        -: 7077:                    // character.
    #####: 7078:                    return line.length() > PREFIX_LEN && line[PREFIX_LEN] != '0';
        -: 7079:                }
        -: 7080:            }
        -: 7081:
    #####: 7082:            return false;
        -: 7083:        }
        -: 7084:    } // namespace Catch
        -: 7085:#elif defined(_MSC_VER)
        -: 7086:    extern "C" __declspec(dllimport) int __stdcall IsDebuggerPresent();
        -: 7087:    namespace Catch {
        -: 7088:        bool isDebuggerActive() {
        -: 7089:            return IsDebuggerPresent() != 0;
        -: 7090:        }
        -: 7091:    }
        -: 7092:#elif defined(__MINGW32__)
        -: 7093:    extern "C" __declspec(dllimport) int __stdcall IsDebuggerPresent();
        -: 7094:    namespace Catch {
        -: 7095:        bool isDebuggerActive() {
        -: 7096:            return IsDebuggerPresent() != 0;
        -: 7097:        }
        -: 7098:    }
        -: 7099:#else
        -: 7100:    namespace Catch {
        -: 7101:       bool isDebuggerActive() { return false; }
        -: 7102:    }
        -: 7103:#endif // Platform
        -: 7104:// end catch_debugger.cpp
        -: 7105:// start catch_decomposer.cpp
        -: 7106:
        -: 7107:namespace Catch {
        -: 7108:
        -: 7109:    ITransientExpression::~ITransientExpression() = default;
        -: 7110:
    #####: 7111:    void formatReconstructedExpression( std::ostream &os, std::string const& lhs, StringRef op, std::string const& rhs ) {
    #####: 7112:        if( lhs.size() + rhs.size() < 40 &&
    #####: 7113:                lhs.find('\n') == std::string::npos &&
    #####: 7114:                rhs.find('\n') == std::string::npos )
    #####: 7115:            os << lhs << " " << op << " " << rhs;
        -: 7116:        else
    #####: 7117:            os << lhs << "\n" << op << "\n" << rhs;
    #####: 7118:    }
        -: 7119:}
        -: 7120:// end catch_decomposer.cpp
        -: 7121:// start catch_errno_guard.cpp
        -: 7122:
        -: 7123:#include <cerrno>
        -: 7124:
        -: 7125:namespace Catch {
    #####: 7126:        ErrnoGuard::ErrnoGuard():m_oldErrno(errno){}
    #####: 7127:        ErrnoGuard::~ErrnoGuard() { errno = m_oldErrno; }
        -: 7128:}
        -: 7129:// end catch_errno_guard.cpp
        -: 7130:// start catch_exception_translator_registry.cpp
        -: 7131:
        -: 7132:// start catch_exception_translator_registry.h
        -: 7133:
        -: 7134:#include <vector>
        -: 7135:#include <string>
        -: 7136:#include <memory>
        -: 7137:
        -: 7138:namespace Catch {
        -: 7139:
    #####: 7140:    class ExceptionTranslatorRegistry : public IExceptionTranslatorRegistry {
        -: 7141:    public:
        -: 7142:        ~ExceptionTranslatorRegistry();
        -: 7143:        virtual void registerTranslator( const IExceptionTranslator* translator );
        -: 7144:        virtual std::string translateActiveException() const override;
        -: 7145:        std::string tryTranslators() const;
        -: 7146:
        -: 7147:    private:
        -: 7148:        std::vector<std::unique_ptr<IExceptionTranslator const>> m_translators;
        -: 7149:    };
        -: 7150:}
        -: 7151:
        -: 7152:// end catch_exception_translator_registry.h
        -: 7153:#ifdef __OBJC__
        -: 7154:#import "Foundation/Foundation.h"
        -: 7155:#endif
        -: 7156:
        -: 7157:namespace Catch {
        -: 7158:
    #####: 7159:    ExceptionTranslatorRegistry::~ExceptionTranslatorRegistry() {
    #####: 7160:    }
        -: 7161:
    #####: 7162:    void ExceptionTranslatorRegistry::registerTranslator( const IExceptionTranslator* translator ) {
    #####: 7163:        m_translators.push_back( std::unique_ptr<const IExceptionTranslator>( translator ) );
    #####: 7164:    }
        -: 7165:
    #####: 7166:    std::string ExceptionTranslatorRegistry::translateActiveException() const {
        -: 7167:        try {
        -: 7168:#ifdef __OBJC__
        -: 7169:            // In Objective-C try objective-c exceptions first
        -: 7170:            @try {
        -: 7171:                return tryTranslators();
        -: 7172:            }
        -: 7173:            @catch (NSException *exception) {
        -: 7174:                return Catch::Detail::stringify( [exception description] );
        -: 7175:            }
        -: 7176:#else
        -: 7177:            // Compiling a mixed mode project with MSVC means that CLR
        -: 7178:            // exceptions will be caught in (...) as well. However, these
        -: 7179:            // do not fill-in std::current_exception and thus lead to crash
        -: 7180:            // when attempting rethrow.
        -: 7181:            // /EHa switch also causes structured exceptions to be caught
        -: 7182:            // here, but they fill-in current_exception properly, so
        -: 7183:            // at worst the output should be a little weird, instead of
        -: 7184:            // causing a crash.
    #####: 7185:            if (std::current_exception() == nullptr) {
    #####: 7186:                return "Non C++ exception. Possibly a CLR exception.";
        -: 7187:            }
    #####: 7188:            return tryTranslators();
        -: 7189:#endif
        -: 7190:        }
    =====: 7191:        catch( TestFailureException& ) {
    =====: 7192:            std::rethrow_exception(std::current_exception());
        -: 7193:        }
    =====: 7194:        catch( std::exception& ex ) {
    =====: 7195:            return ex.what();
        -: 7196:        }
    =====: 7197:        catch( std::string& msg ) {
    =====: 7198:            return msg;
        -: 7199:        }
    =====: 7200:        catch( const char* msg ) {
    =====: 7201:            return msg;
        -: 7202:        }
    =====: 7203:        catch(...) {
    =====: 7204:            return "Unknown exception";
        -: 7205:        }
        -: 7206:    }
        -: 7207:
    #####: 7208:    std::string ExceptionTranslatorRegistry::tryTranslators() const {
    #####: 7209:        if( m_translators.empty() )
    #####: 7210:            std::rethrow_exception(std::current_exception());
        -: 7211:        else
    #####: 7212:            return m_translators[0]->translate( m_translators.begin()+1, m_translators.end() );
        -: 7213:    }
        -: 7214:}
        -: 7215:// end catch_exception_translator_registry.cpp
        -: 7216:// start catch_fatal_condition.cpp
        -: 7217:
        -: 7218:#if defined(__GNUC__)
        -: 7219:#    pragma GCC diagnostic push
        -: 7220:#    pragma GCC diagnostic ignored "-Wmissing-field-initializers"
        -: 7221:#endif
        -: 7222:
        -: 7223:#if defined( CATCH_CONFIG_WINDOWS_SEH ) || defined( CATCH_CONFIG_POSIX_SIGNALS )
        -: 7224:
        -: 7225:namespace {
        -: 7226:    // Report the error condition
    #####: 7227:    void reportFatal( char const * const message ) {
    #####: 7228:        Catch::getCurrentContext().getResultCapture()->handleFatalErrorCondition( message );
    #####: 7229:    }
        -: 7230:}
        -: 7231:
        -: 7232:#endif // signals/SEH handling
        -: 7233:
        -: 7234:#if defined( CATCH_CONFIG_WINDOWS_SEH )
        -: 7235:
        -: 7236:namespace Catch {
        -: 7237:    struct SignalDefs { DWORD id; const char* name; };
        -: 7238:
        -: 7239:    // There is no 1-1 mapping between signals and windows exceptions.
        -: 7240:    // Windows can easily distinguish between SO and SigSegV,
        -: 7241:    // but SigInt, SigTerm, etc are handled differently.
        -: 7242:    static SignalDefs signalDefs[] = {
        -: 7243:        { EXCEPTION_ILLEGAL_INSTRUCTION,  "SIGILL - Illegal instruction signal" },
        -: 7244:        { EXCEPTION_STACK_OVERFLOW, "SIGSEGV - Stack overflow" },
        -: 7245:        { EXCEPTION_ACCESS_VIOLATION, "SIGSEGV - Segmentation violation signal" },
        -: 7246:        { EXCEPTION_INT_DIVIDE_BY_ZERO, "Divide by zero error" },
        -: 7247:    };
        -: 7248:
        -: 7249:    LONG CALLBACK FatalConditionHandler::handleVectoredException(PEXCEPTION_POINTERS ExceptionInfo) {
        -: 7250:        for (auto const& def : signalDefs) {
        -: 7251:            if (ExceptionInfo->ExceptionRecord->ExceptionCode == def.id) {
        -: 7252:                reportFatal(def.name);
        -: 7253:            }
        -: 7254:        }
        -: 7255:        // If its not an exception we care about, pass it along.
        -: 7256:        // This stops us from eating debugger breaks etc.
        -: 7257:        return EXCEPTION_CONTINUE_SEARCH;
        -: 7258:    }
        -: 7259:
        -: 7260:    FatalConditionHandler::FatalConditionHandler() {
        -: 7261:        isSet = true;
        -: 7262:        // 32k seems enough for Catch to handle stack overflow,
        -: 7263:        // but the value was found experimentally, so there is no strong guarantee
        -: 7264:        guaranteeSize = 32 * 1024;
        -: 7265:        exceptionHandlerHandle = nullptr;
        -: 7266:        // Register as first handler in current chain
        -: 7267:        exceptionHandlerHandle = AddVectoredExceptionHandler(1, handleVectoredException);
        -: 7268:        // Pass in guarantee size to be filled
        -: 7269:        SetThreadStackGuarantee(&guaranteeSize);
        -: 7270:    }
        -: 7271:
        -: 7272:    void FatalConditionHandler::reset() {
        -: 7273:        if (isSet) {
        -: 7274:            RemoveVectoredExceptionHandler(exceptionHandlerHandle);
        -: 7275:            SetThreadStackGuarantee(&guaranteeSize);
        -: 7276:            exceptionHandlerHandle = nullptr;
        -: 7277:            isSet = false;
        -: 7278:        }
        -: 7279:    }
        -: 7280:
        -: 7281:    FatalConditionHandler::~FatalConditionHandler() {
        -: 7282:        reset();
        -: 7283:    }
        -: 7284:
        -: 7285:bool FatalConditionHandler::isSet = false;
        -: 7286:ULONG FatalConditionHandler::guaranteeSize = 0;
        -: 7287:PVOID FatalConditionHandler::exceptionHandlerHandle = nullptr;
        -: 7288:
        -: 7289:} // namespace Catch
        -: 7290:
        -: 7291:#elif defined( CATCH_CONFIG_POSIX_SIGNALS )
        -: 7292:
        -: 7293:namespace Catch {
        -: 7294:
        -: 7295:    struct SignalDefs {
        -: 7296:        int id;
        -: 7297:        const char* name;
        -: 7298:    };
        -: 7299:    static SignalDefs signalDefs[] = {
        -: 7300:        { SIGINT,  "SIGINT - Terminal interrupt signal" },
        -: 7301:        { SIGILL,  "SIGILL - Illegal instruction signal" },
        -: 7302:        { SIGFPE,  "SIGFPE - Floating point error signal" },
        -: 7303:        { SIGSEGV, "SIGSEGV - Segmentation violation signal" },
        -: 7304:        { SIGTERM, "SIGTERM - Termination request signal" },
        -: 7305:        { SIGABRT, "SIGABRT - Abort (abnormal termination) signal" }
        -: 7306:    };
        -: 7307:
    #####: 7308:    void FatalConditionHandler::handleSignal( int sig ) {
    #####: 7309:        char const * name = "<unknown signal>";
    #####: 7310:        for (auto const& def : signalDefs) {
    #####: 7311:            if (sig == def.id) {
    #####: 7312:                name = def.name;
    #####: 7313:                break;
        -: 7314:            }
        -: 7315:        }
    #####: 7316:        reset();
    #####: 7317:        reportFatal(name);
    #####: 7318:        raise( sig );
    #####: 7319:    }
        -: 7320:
    #####: 7321:    FatalConditionHandler::FatalConditionHandler() {
    #####: 7322:        isSet = true;
        -: 7323:        stack_t sigStack;
    #####: 7324:        sigStack.ss_sp = altStackMem;
    #####: 7325:        sigStack.ss_size = SIGSTKSZ;
    #####: 7326:        sigStack.ss_flags = 0;
    #####: 7327:        sigaltstack(&sigStack, &oldSigStack);
    #####: 7328:        struct sigaction sa = { };
        -: 7329:
    #####: 7330:        sa.sa_handler = handleSignal;
    #####: 7331:        sa.sa_flags = SA_ONSTACK;
    #####: 7332:        for (std::size_t i = 0; i < sizeof(signalDefs)/sizeof(SignalDefs); ++i) {
    #####: 7333:            sigaction(signalDefs[i].id, &sa, &oldSigActions[i]);
        -: 7334:        }
    #####: 7335:    }
        -: 7336:
    #####: 7337:    FatalConditionHandler::~FatalConditionHandler() {
    #####: 7338:        reset();
    #####: 7339:    }
        -: 7340:
    #####: 7341:    void FatalConditionHandler::reset() {
    #####: 7342:        if( isSet ) {
        -: 7343:            // Set signals back to previous values -- hopefully nobody overwrote them in the meantime
    #####: 7344:            for( std::size_t i = 0; i < sizeof(signalDefs)/sizeof(SignalDefs); ++i ) {
    #####: 7345:                sigaction(signalDefs[i].id, &oldSigActions[i], nullptr);
        -: 7346:            }
        -: 7347:            // Return the old stack
    #####: 7348:            sigaltstack(&oldSigStack, nullptr);
    #####: 7349:            isSet = false;
        -: 7350:        }
    #####: 7351:    }
        -: 7352:
        -: 7353:    bool FatalConditionHandler::isSet = false;
        -: 7354:    struct sigaction FatalConditionHandler::oldSigActions[sizeof(signalDefs)/sizeof(SignalDefs)] = {};
        -: 7355:    stack_t FatalConditionHandler::oldSigStack = {};
        -: 7356:    char FatalConditionHandler::altStackMem[SIGSTKSZ] = {};
        -: 7357:
        -: 7358:} // namespace Catch
        -: 7359:
        -: 7360:#else
        -: 7361:
        -: 7362:namespace Catch {
        -: 7363:    void FatalConditionHandler::reset() {}
        -: 7364:}
        -: 7365:
        -: 7366:#endif // signals/SEH handling
        -: 7367:
        -: 7368:#if defined(__GNUC__)
        -: 7369:#    pragma GCC diagnostic pop
        -: 7370:#endif
        -: 7371:// end catch_fatal_condition.cpp
        -: 7372:// start catch_interfaces_capture.cpp
        -: 7373:
        -: 7374:namespace Catch {
        -: 7375:    IResultCapture::~IResultCapture() = default;
        -: 7376:}
        -: 7377:// end catch_interfaces_capture.cpp
        -: 7378:// start catch_interfaces_config.cpp
        -: 7379:
        -: 7380:namespace Catch {
        -: 7381:    IConfig::~IConfig() = default;
        -: 7382:}
        -: 7383:// end catch_interfaces_config.cpp
        -: 7384:// start catch_interfaces_exception.cpp
        -: 7385:
        -: 7386:namespace Catch {
        -: 7387:    IExceptionTranslator::~IExceptionTranslator() = default;
        -: 7388:    IExceptionTranslatorRegistry::~IExceptionTranslatorRegistry() = default;
        -: 7389:}
        -: 7390:// end catch_interfaces_exception.cpp
        -: 7391:// start catch_interfaces_registry_hub.cpp
        -: 7392:
        -: 7393:namespace Catch {
        -: 7394:    IRegistryHub::~IRegistryHub() = default;
        -: 7395:    IMutableRegistryHub::~IMutableRegistryHub() = default;
        -: 7396:}
        -: 7397:// end catch_interfaces_registry_hub.cpp
        -: 7398:// start catch_interfaces_reporter.cpp
        -: 7399:
        -: 7400:// start catch_reporter_multi.h
        -: 7401:
        -: 7402:namespace Catch {
        -: 7403:
    #####: 7404:    class MultipleReporters : public IStreamingReporter {
        -: 7405:        using Reporters = std::vector<IStreamingReporterPtr>;
        -: 7406:        Reporters m_reporters;
        -: 7407:
        -: 7408:    public:
        -: 7409:        void add( IStreamingReporterPtr&& reporter );
        -: 7410:
        -: 7411:    public: // IStreamingReporter
        -: 7412:
        -: 7413:        ReporterPreferences getPreferences() const override;
        -: 7414:
        -: 7415:        void noMatchingTestCases( std::string const& spec ) override;
        -: 7416:
        -: 7417:        static std::set<Verbosity> getSupportedVerbosities();
        -: 7418:
        -: 7419:        void benchmarkStarting( BenchmarkInfo const& benchmarkInfo ) override;
        -: 7420:        void benchmarkEnded( BenchmarkStats const& benchmarkStats ) override;
        -: 7421:
        -: 7422:        void testRunStarting( TestRunInfo const& testRunInfo ) override;
        -: 7423:        void testGroupStarting( GroupInfo const& groupInfo ) override;
        -: 7424:        void testCaseStarting( TestCaseInfo const& testInfo ) override;
        -: 7425:        void sectionStarting( SectionInfo const& sectionInfo ) override;
        -: 7426:        void assertionStarting( AssertionInfo const& assertionInfo ) override;
        -: 7427:
        -: 7428:        // The return value indicates if the messages buffer should be cleared:
        -: 7429:        bool assertionEnded( AssertionStats const& assertionStats ) override;
        -: 7430:        void sectionEnded( SectionStats const& sectionStats ) override;
        -: 7431:        void testCaseEnded( TestCaseStats const& testCaseStats ) override;
        -: 7432:        void testGroupEnded( TestGroupStats const& testGroupStats ) override;
        -: 7433:        void testRunEnded( TestRunStats const& testRunStats ) override;
        -: 7434:
        -: 7435:        void skipTest( TestCaseInfo const& testInfo ) override;
        -: 7436:        bool isMulti() const override;
        -: 7437:
        -: 7438:    };
        -: 7439:
        -: 7440:} // end namespace Catch
        -: 7441:
        -: 7442:// end catch_reporter_multi.h
        -: 7443:namespace Catch {
        -: 7444:
    #####: 7445:    ReporterConfig::ReporterConfig( IConfigPtr const& _fullConfig )
    #####: 7446:    :   m_stream( &_fullConfig->stream() ), m_fullConfig( _fullConfig ) {}
        -: 7447:
    #####: 7448:    ReporterConfig::ReporterConfig( IConfigPtr const& _fullConfig, std::ostream& _stream )
    #####: 7449:    :   m_stream( &_stream ), m_fullConfig( _fullConfig ) {}
        -: 7450:
    #####: 7451:    std::ostream& ReporterConfig::stream() const { return *m_stream; }
    #####: 7452:    IConfigPtr ReporterConfig::fullConfig() const { return m_fullConfig; }
        -: 7453:
    #####: 7454:    TestRunInfo::TestRunInfo( std::string const& _name ) : name( _name ) {}
        -: 7455:
    #####: 7456:    GroupInfo::GroupInfo(  std::string const& _name,
        -: 7457:                           std::size_t _groupIndex,
    #####: 7458:                           std::size_t _groupsCount )
        -: 7459:    :   name( _name ),
        -: 7460:        groupIndex( _groupIndex ),
    #####: 7461:        groupsCounts( _groupsCount )
    #####: 7462:    {}
        -: 7463:
    #####: 7464:     AssertionStats::AssertionStats( AssertionResult const& _assertionResult,
        -: 7465:                                     std::vector<MessageInfo> const& _infoMessages,
    #####: 7466:                                     Totals const& _totals )
        -: 7467:    :   assertionResult( _assertionResult ),
        -: 7468:        infoMessages( _infoMessages ),
    #####: 7469:        totals( _totals )
        -: 7470:    {
    #####: 7471:        assertionResult.m_resultData.lazyExpression.m_transientExpression = _assertionResult.m_resultData.lazyExpression.m_transientExpression;
        -: 7472:
    #####: 7473:        if( assertionResult.hasMessage() ) {
        -: 7474:            // Copy message into messages list.
        -: 7475:            // !TBD This should have been done earlier, somewhere
    #####: 7476:            MessageBuilder builder( assertionResult.getTestMacroName(), assertionResult.getSourceInfo(), assertionResult.getResultType() );
    #####: 7477:            builder << assertionResult.getMessage();
    #####: 7478:            builder.m_info.message = builder.m_stream.str();
        -: 7479:
    #####: 7480:            infoMessages.push_back( builder.m_info );
        -: 7481:        }
    #####: 7482:    }
        -: 7483:
        -: 7484:     AssertionStats::~AssertionStats() = default;
        -: 7485:
    #####: 7486:    SectionStats::SectionStats(  SectionInfo const& _sectionInfo,
        -: 7487:                                 Counts const& _assertions,
        -: 7488:                                 double _durationInSeconds,
    #####: 7489:                                 bool _missingAssertions )
        -: 7490:    :   sectionInfo( _sectionInfo ),
        -: 7491:        assertions( _assertions ),
        -: 7492:        durationInSeconds( _durationInSeconds ),
    #####: 7493:        missingAssertions( _missingAssertions )
    #####: 7494:    {}
        -: 7495:
        -: 7496:    SectionStats::~SectionStats() = default;
        -: 7497:
    #####: 7498:    TestCaseStats::TestCaseStats(  TestCaseInfo const& _testInfo,
        -: 7499:                                   Totals const& _totals,
        -: 7500:                                   std::string const& _stdOut,
        -: 7501:                                   std::string const& _stdErr,
    #####: 7502:                                   bool _aborting )
        -: 7503:    : testInfo( _testInfo ),
        -: 7504:        totals( _totals ),
        -: 7505:        stdOut( _stdOut ),
        -: 7506:        stdErr( _stdErr ),
    #####: 7507:        aborting( _aborting )
    #####: 7508:    {}
        -: 7509:
        -: 7510:    TestCaseStats::~TestCaseStats() = default;
        -: 7511:
    #####: 7512:    TestGroupStats::TestGroupStats( GroupInfo const& _groupInfo,
        -: 7513:                                    Totals const& _totals,
    #####: 7514:                                    bool _aborting )
        -: 7515:    :   groupInfo( _groupInfo ),
        -: 7516:        totals( _totals ),
    #####: 7517:        aborting( _aborting )
    #####: 7518:    {}
        -: 7519:
    #####: 7520:    TestGroupStats::TestGroupStats( GroupInfo const& _groupInfo )
        -: 7521:    :   groupInfo( _groupInfo ),
    #####: 7522:        aborting( false )
    #####: 7523:    {}
        -: 7524:
        -: 7525:    TestGroupStats::~TestGroupStats() = default;
        -: 7526:
    #####: 7527:    TestRunStats::TestRunStats(   TestRunInfo const& _runInfo,
        -: 7528:                    Totals const& _totals,
    #####: 7529:                    bool _aborting )
        -: 7530:    :   runInfo( _runInfo ),
        -: 7531:        totals( _totals ),
    #####: 7532:        aborting( _aborting )
    #####: 7533:    {}
        -: 7534:
        -: 7535:    TestRunStats::~TestRunStats() = default;
        -: 7536:
    #####: 7537:    void IStreamingReporter::fatalErrorEncountered( StringRef ) {}
    #####: 7538:    bool IStreamingReporter::isMulti() const { return false; }
        -: 7539:
        -: 7540:    IReporterFactory::~IReporterFactory() = default;
        -: 7541:    IReporterRegistry::~IReporterRegistry() = default;
        -: 7542:
    #####: 7543:    void addReporter( IStreamingReporterPtr& existingReporter, IStreamingReporterPtr&& additionalReporter ) {
        -: 7544:
    #####: 7545:        if( !existingReporter ) {
    #####: 7546:            existingReporter = std::move( additionalReporter );
    #####: 7547:            return;
        -: 7548:        }
        -: 7549:
    #####: 7550:        MultipleReporters* multi = nullptr;
        -: 7551:
    #####: 7552:        if( existingReporter->isMulti() ) {
    #####: 7553:            multi = static_cast<MultipleReporters*>( existingReporter.get() );
        -: 7554:        }
        -: 7555:        else {
    #####: 7556:            auto newMulti = std::unique_ptr<MultipleReporters>( new MultipleReporters );
    #####: 7557:            newMulti->add( std::move( existingReporter ) );
    #####: 7558:            multi = newMulti.get();
    #####: 7559:            existingReporter = std::move( newMulti );
        -: 7560:        }
    #####: 7561:        multi->add( std::move( additionalReporter ) );
        -: 7562:    }
        -: 7563:
        -: 7564:} // end namespace Catch
        -: 7565:// end catch_interfaces_reporter.cpp
        -: 7566:// start catch_interfaces_runner.cpp
        -: 7567:
        -: 7568:namespace Catch {
        -: 7569:    IRunner::~IRunner() = default;
        -: 7570:}
        -: 7571:// end catch_interfaces_runner.cpp
        -: 7572:// start catch_interfaces_testcase.cpp
        -: 7573:
        -: 7574:namespace Catch {
        -: 7575:    ITestInvoker::~ITestInvoker() = default;
        -: 7576:    ITestCaseRegistry::~ITestCaseRegistry() = default;
        -: 7577:}
        -: 7578:// end catch_interfaces_testcase.cpp
        -: 7579:// start catch_leak_detector.cpp
        -: 7580:
        -: 7581:#ifdef CATCH_CONFIG_WINDOWS_CRTDBG
        -: 7582:#include <crtdbg.h>
        -: 7583:
        -: 7584:namespace Catch {
        -: 7585:
        -: 7586:	LeakDetector::LeakDetector() {
        -: 7587:		int flag = _CrtSetDbgFlag(_CRTDBG_REPORT_FLAG);
        -: 7588:		flag |= _CRTDBG_LEAK_CHECK_DF;
        -: 7589:		flag |= _CRTDBG_ALLOC_MEM_DF;
        -: 7590:		_CrtSetDbgFlag(flag);
        -: 7591:		_CrtSetReportMode(_CRT_WARN, _CRTDBG_MODE_FILE | _CRTDBG_MODE_DEBUG);
        -: 7592:		_CrtSetReportFile(_CRT_WARN, _CRTDBG_FILE_STDERR);
        -: 7593:		// Change this to leaking allocation's number to break there
        -: 7594:		_CrtSetBreakAlloc(-1);
        -: 7595:	}
        -: 7596:}
        -: 7597:
        -: 7598:#else
        -: 7599:
    #####: 7600:    Catch::LeakDetector::LeakDetector() {}
        -: 7601:
        -: 7602:#endif
        -: 7603:// end catch_leak_detector.cpp
        -: 7604:// start catch_list.cpp
        -: 7605:
        -: 7606:// start catch_list.h
        -: 7607:
        -: 7608:#include <set>
        -: 7609:
        -: 7610:namespace Catch {
        -: 7611:
        -: 7612:    std::size_t listTests( Config const& config );
        -: 7613:
        -: 7614:    std::size_t listTestsNamesOnly( Config const& config );
        -: 7615:
    #####: 7616:    struct TagInfo {
        -: 7617:        void add( std::string const& spelling );
        -: 7618:        std::string all() const;
        -: 7619:
        -: 7620:        std::set<std::string> spellings;
        -: 7621:        std::size_t count = 0;
        -: 7622:    };
        -: 7623:
        -: 7624:    std::size_t listTags( Config const& config );
        -: 7625:
        -: 7626:    std::size_t listReporters( Config const& /*config*/ );
        -: 7627:
        -: 7628:    Option<std::size_t> list( Config const& config );
        -: 7629:
        -: 7630:} // end namespace Catch
        -: 7631:
        -: 7632:// end catch_list.h
        -: 7633:// start catch_text.h
        -: 7634:
        -: 7635:namespace Catch {
        -: 7636:    using namespace clara::TextFlow;
        -: 7637:}
        -: 7638:
        -: 7639:// end catch_text.h
        -: 7640:#include <limits>
        -: 7641:#include <algorithm>
        -: 7642:#include <iomanip>
        -: 7643:
        -: 7644:namespace Catch {
        -: 7645:
    #####: 7646:    std::size_t listTests( Config const& config ) {
    #####: 7647:        TestSpec testSpec = config.testSpec();
    #####: 7648:        if( config.hasTestFilters() )
    #####: 7649:            Catch::cout() << "Matching test cases:\n";
        -: 7650:        else {
    #####: 7651:            Catch::cout() << "All available test cases:\n";
        -: 7652:        }
        -: 7653:
    #####: 7654:        auto matchedTestCases = filterTests( getAllTestCasesSorted( config ), testSpec, config );
    #####: 7655:        for( auto const& testCaseInfo : matchedTestCases ) {
    #####: 7656:            Colour::Code colour = testCaseInfo.isHidden()
    #####: 7657:                ? Colour::SecondaryText
    #####: 7658:                : Colour::None;
    #####: 7659:            Colour colourGuard( colour );
        -: 7660:
    #####: 7661:            Catch::cout() << Column( testCaseInfo.name ).initialIndent( 2 ).indent( 4 ) << "\n";
    #####: 7662:            if( config.verbosity() >= Verbosity::High ) {
    #####: 7663:                Catch::cout() << Column( Catch::Detail::stringify( testCaseInfo.lineInfo ) ).indent(4) << std::endl;
    #####: 7664:                std::string description = testCaseInfo.description;
    #####: 7665:                if( description.empty() )
    #####: 7666:                    description = "(NO DESCRIPTION)";
    #####: 7667:                Catch::cout() << Column( description ).indent(4) << std::endl;
        -: 7668:            }
    #####: 7669:            if( !testCaseInfo.tags.empty() )
    #####: 7670:                Catch::cout() << Column( testCaseInfo.tagsAsString() ).indent( 6 ) << "\n";
        -: 7671:        }
        -: 7672:
    #####: 7673:        if( !config.hasTestFilters() )
    #####: 7674:            Catch::cout() << pluralise( matchedTestCases.size(), "test case" ) << '\n' << std::endl;
        -: 7675:        else
    #####: 7676:            Catch::cout() << pluralise( matchedTestCases.size(), "matching test case" ) << '\n' << std::endl;
    #####: 7677:        return matchedTestCases.size();
        -: 7678:    }
        -: 7679:
    #####: 7680:    std::size_t listTestsNamesOnly( Config const& config ) {
    #####: 7681:        TestSpec testSpec = config.testSpec();
    #####: 7682:        std::size_t matchedTests = 0;
    #####: 7683:        std::vector<TestCase> matchedTestCases = filterTests( getAllTestCasesSorted( config ), testSpec, config );
    #####: 7684:        for( auto const& testCaseInfo : matchedTestCases ) {
    #####: 7685:            matchedTests++;
    #####: 7686:            if( startsWith( testCaseInfo.name, '#' ) )
    #####: 7687:               Catch::cout() << '"' << testCaseInfo.name << '"';
        -: 7688:            else
    #####: 7689:               Catch::cout() << testCaseInfo.name;
    #####: 7690:            if ( config.verbosity() >= Verbosity::High )
    #####: 7691:                Catch::cout() << "\t@" << testCaseInfo.lineInfo;
    #####: 7692:            Catch::cout() << std::endl;
        -: 7693:        }
    #####: 7694:        return matchedTests;
        -: 7695:    }
        -: 7696:
    #####: 7697:    void TagInfo::add( std::string const& spelling ) {
    #####: 7698:        ++count;
    #####: 7699:        spellings.insert( spelling );
    #####: 7700:    }
        -: 7701:
    #####: 7702:    std::string TagInfo::all() const {
    #####: 7703:        std::string out;
    #####: 7704:        for( auto const& spelling : spellings )
    #####: 7705:            out += "[" + spelling + "]";
    #####: 7706:        return out;
        -: 7707:    }
        -: 7708:
    #####: 7709:    std::size_t listTags( Config const& config ) {
    #####: 7710:        TestSpec testSpec = config.testSpec();
    #####: 7711:        if( config.hasTestFilters() )
    #####: 7712:            Catch::cout() << "Tags for matching test cases:\n";
        -: 7713:        else {
    #####: 7714:            Catch::cout() << "All available tags:\n";
        -: 7715:        }
        -: 7716:
    #####: 7717:        std::map<std::string, TagInfo> tagCounts;
        -: 7718:
    #####: 7719:        std::vector<TestCase> matchedTestCases = filterTests( getAllTestCasesSorted( config ), testSpec, config );
    #####: 7720:        for( auto const& testCase : matchedTestCases ) {
    #####: 7721:            for( auto const& tagName : testCase.getTestCaseInfo().tags ) {
    #####: 7722:                std::string lcaseTagName = toLower( tagName );
    #####: 7723:                auto countIt = tagCounts.find( lcaseTagName );
    #####: 7724:                if( countIt == tagCounts.end() )
    #####: 7725:                    countIt = tagCounts.insert( std::make_pair( lcaseTagName, TagInfo() ) ).first;
    #####: 7726:                countIt->second.add( tagName );
        -: 7727:            }
        -: 7728:        }
        -: 7729:
    #####: 7730:        for( auto const& tagCount : tagCounts ) {
    #####: 7731:            ReusableStringStream rss;
    #####: 7732:            rss << "  " << std::setw(2) << tagCount.second.count << "  ";
    #####: 7733:            auto str = rss.str();
    #####: 7734:            auto wrapper = Column( tagCount.second.all() )
    #####: 7735:                                                    .initialIndent( 0 )
    #####: 7736:                                                    .indent( str.size() )
    #####: 7737:                                                    .width( CATCH_CONFIG_CONSOLE_WIDTH-10 );
    #####: 7738:            Catch::cout() << str << wrapper << '\n';
        -: 7739:        }
    #####: 7740:        Catch::cout() << pluralise( tagCounts.size(), "tag" ) << '\n' << std::endl;
    #####: 7741:        return tagCounts.size();
        -: 7742:    }
        -: 7743:
    #####: 7744:    std::size_t listReporters( Config const& /*config*/ ) {
    #####: 7745:        Catch::cout() << "Available reporters:\n";
    #####: 7746:        IReporterRegistry::FactoryMap const& factories = getRegistryHub().getReporterRegistry().getFactories();
    #####: 7747:        std::size_t maxNameLen = 0;
    #####: 7748:        for( auto const& factoryKvp : factories )
    #####: 7749:            maxNameLen = (std::max)( maxNameLen, factoryKvp.first.size() );
        -: 7750:
    #####: 7751:        for( auto const& factoryKvp : factories ) {
        -: 7752:            Catch::cout()
    #####: 7753:                    << Column( factoryKvp.first + ":" )
    #####: 7754:                            .indent(2)
    #####: 7755:                            .width( 5+maxNameLen )
    #####: 7756:                    +  Column( factoryKvp.second->getDescription() )
    #####: 7757:                            .initialIndent(0)
    #####: 7758:                            .indent(2)
    #####: 7759:                            .width( CATCH_CONFIG_CONSOLE_WIDTH - maxNameLen-8 )
    #####: 7760:                    << "\n";
        -: 7761:        }
    #####: 7762:        Catch::cout() << std::endl;
    #####: 7763:        return factories.size();
        -: 7764:    }
        -: 7765:
    #####: 7766:    Option<std::size_t> list( Config const& config ) {
    #####: 7767:        Option<std::size_t> listedCount;
    #####: 7768:        if( config.listTests() )
    #####: 7769:            listedCount = listedCount.valueOr(0) + listTests( config );
    #####: 7770:        if( config.listTestNamesOnly() )
    #####: 7771:            listedCount = listedCount.valueOr(0) + listTestsNamesOnly( config );
    #####: 7772:        if( config.listTags() )
    #####: 7773:            listedCount = listedCount.valueOr(0) + listTags( config );
    #####: 7774:        if( config.listReporters() )
    #####: 7775:            listedCount = listedCount.valueOr(0) + listReporters( config );
    #####: 7776:        return listedCount;
        -: 7777:    }
        -: 7778:
        -: 7779:} // end namespace Catch
        -: 7780:// end catch_list.cpp
        -: 7781:// start catch_matchers.cpp
        -: 7782:
        -: 7783:namespace Catch {
        -: 7784:namespace Matchers {
        -: 7785:    namespace Impl {
        -: 7786:
    #####: 7787:        std::string MatcherUntypedBase::toString() const {
    #####: 7788:            if( m_cachedToString.empty() )
    #####: 7789:                m_cachedToString = describe();
    #####: 7790:            return m_cachedToString;
        -: 7791:        }
        -: 7792:
        -: 7793:        MatcherUntypedBase::~MatcherUntypedBase() = default;
        -: 7794:
        -: 7795:    } // namespace Impl
        -: 7796:} // namespace Matchers
        -: 7797:
        -: 7798:using namespace Matchers;
        -: 7799:using Matchers::Impl::MatcherBase;
        -: 7800:
        -: 7801:} // namespace Catch
        -: 7802:// end catch_matchers.cpp
        -: 7803:// start catch_matchers_floating.cpp
        -: 7804:
        -: 7805:#include <cstdlib>
        -: 7806:#include <cstdint>
        -: 7807:#include <cstring>
        -: 7808:#include <stdexcept>
        -: 7809:
        -: 7810:namespace Catch {
        -: 7811:namespace Matchers {
        -: 7812:namespace Floating {
        -: 7813:enum class FloatingPointKind : uint8_t {
        -: 7814:    Float,
        -: 7815:    Double
        -: 7816:};
        -: 7817:}
        -: 7818:}
        -: 7819:}
        -: 7820:
        -: 7821:namespace {
        -: 7822:
        -: 7823:template <typename T>
        -: 7824:struct Converter;
        -: 7825:
        -: 7826:template <>
        -: 7827:struct Converter<float> {
        -: 7828:    static_assert(sizeof(float) == sizeof(int32_t), "Important ULP matcher assumption violated");
    #####: 7829:    Converter(float f) {
    #####: 7830:        std::memcpy(&i, &f, sizeof(f));
    #####: 7831:    }
        -: 7832:    int32_t i;
        -: 7833:};
        -: 7834:
        -: 7835:template <>
        -: 7836:struct Converter<double> {
        -: 7837:    static_assert(sizeof(double) == sizeof(int64_t), "Important ULP matcher assumption violated");
    #####: 7838:    Converter(double d) {
    #####: 7839:        std::memcpy(&i, &d, sizeof(d));
    #####: 7840:    }
        -: 7841:    int64_t i;
        -: 7842:};
        -: 7843:
        -: 7844:template <typename T>
    #####: 7845:auto convert(T t) -> Converter<T> {
    #####: 7846:    return Converter<T>(t);
        -: 7847:}
        -: 7848:
        -: 7849:template <typename FP>
    #####: 7850:bool almostEqualUlps(FP lhs, FP rhs, int maxUlpDiff) {
        -: 7851:    // Comparison with NaN should always be false.
        -: 7852:    // This way we can rule it out before getting into the ugly details
    #####: 7853:    if (std::isnan(lhs) || std::isnan(rhs)) {
    #####: 7854:        return false;
        -: 7855:    }
        -: 7856:
    #####: 7857:    auto lc = convert(lhs);
    #####: 7858:    auto rc = convert(rhs);
        -: 7859:
    #####: 7860:    if ((lc.i < 0) != (rc.i < 0)) {
        -: 7861:        // Potentially we can have +0 and -0
    #####: 7862:        return lhs == rhs;
        -: 7863:    }
        -: 7864:
    #####: 7865:    auto ulpDiff = std::abs(lc.i - rc.i);
    #####: 7866:    return ulpDiff <= maxUlpDiff;
        -: 7867:}
        -: 7868:
        -: 7869:}
        -: 7870:
        -: 7871:namespace Catch {
        -: 7872:namespace Matchers {
        -: 7873:namespace Floating {
    #####: 7874:    WithinAbsMatcher::WithinAbsMatcher(double target, double margin)
    #####: 7875:        :m_target{ target }, m_margin{ margin } {
    #####: 7876:        if (m_margin < 0) {
    #####: 7877:            throw std::domain_error("Allowed margin difference has to be >= 0");
        -: 7878:        }
    #####: 7879:    }
        -: 7880:
        -: 7881:    // Performs equivalent check of std::fabs(lhs - rhs) <= margin
        -: 7882:    // But without the subtraction to allow for INFINITY in comparison
    #####: 7883:    bool WithinAbsMatcher::match(double const& matchee) const {
    #####: 7884:        return (matchee + m_margin >= m_target) && (m_target + m_margin >= m_margin);
        -: 7885:    }
        -: 7886:
    #####: 7887:    std::string WithinAbsMatcher::describe() const {
    #####: 7888:        return "is within " + ::Catch::Detail::stringify(m_margin) + " of " + ::Catch::Detail::stringify(m_target);
        -: 7889:    }
        -: 7890:
    #####: 7891:    WithinUlpsMatcher::WithinUlpsMatcher(double target, int ulps, FloatingPointKind baseType)
    #####: 7892:        :m_target{ target }, m_ulps{ ulps }, m_type{ baseType } {
    #####: 7893:        if (m_ulps < 0) {
    #####: 7894:            throw std::domain_error("Allowed ulp difference has to be >= 0");
        -: 7895:        }
    #####: 7896:    }
        -: 7897:
    #####: 7898:    bool WithinUlpsMatcher::match(double const& matchee) const {
    #####: 7899:        switch (m_type) {
        -: 7900:        case FloatingPointKind::Float:
    #####: 7901:            return almostEqualUlps<float>(static_cast<float>(matchee), static_cast<float>(m_target), m_ulps);
        -: 7902:        case FloatingPointKind::Double:
    #####: 7903:            return almostEqualUlps<double>(matchee, m_target, m_ulps);
        -: 7904:        default:
    #####: 7905:            throw std::domain_error("Unknown FloatingPointKind value");
        -: 7906:        }
        -: 7907:    }
        -: 7908:
    #####: 7909:    std::string WithinUlpsMatcher::describe() const {
    #####: 7910:        return "is within " + std::to_string(m_ulps) + " ULPs of " + ::Catch::Detail::stringify(m_target) + ((m_type == FloatingPointKind::Float)? "f" : "");
        -: 7911:    }
        -: 7912:
        -: 7913:}// namespace Floating
        -: 7914:
    #####: 7915:Floating::WithinUlpsMatcher WithinULP(double target, int maxUlpDiff) {
    #####: 7916:    return Floating::WithinUlpsMatcher(target, maxUlpDiff, Floating::FloatingPointKind::Double);
        -: 7917:}
        -: 7918:
    #####: 7919:Floating::WithinUlpsMatcher WithinULP(float target, int maxUlpDiff) {
    #####: 7920:    return Floating::WithinUlpsMatcher(target, maxUlpDiff, Floating::FloatingPointKind::Float);
        -: 7921:}
        -: 7922:
    #####: 7923:Floating::WithinAbsMatcher WithinAbs(double target, double margin) {
    #####: 7924:    return Floating::WithinAbsMatcher(target, margin);
        -: 7925:}
        -: 7926:
        -: 7927:} // namespace Matchers
        -: 7928:} // namespace Catch
        -: 7929:
        -: 7930:// end catch_matchers_floating.cpp
        -: 7931:// start catch_matchers_string.cpp
        -: 7932:
        -: 7933:#include <regex>
        -: 7934:
        -: 7935:namespace Catch {
        -: 7936:namespace Matchers {
        -: 7937:
        -: 7938:    namespace StdString {
        -: 7939:
    #####: 7940:        CasedString::CasedString( std::string const& str, CaseSensitive::Choice caseSensitivity )
        -: 7941:        :   m_caseSensitivity( caseSensitivity ),
    #####: 7942:            m_str( adjustString( str ) )
    #####: 7943:        {}
    #####: 7944:        std::string CasedString::adjustString( std::string const& str ) const {
    #####: 7945:            return m_caseSensitivity == CaseSensitive::No
        -: 7946:                   ? toLower( str )
    #####: 7947:                   : str;
        -: 7948:        }
    #####: 7949:        std::string CasedString::caseSensitivitySuffix() const {
    #####: 7950:            return m_caseSensitivity == CaseSensitive::No
        -: 7951:                   ? " (case insensitive)"
    #####: 7952:                   : std::string();
        -: 7953:        }
        -: 7954:
    #####: 7955:        StringMatcherBase::StringMatcherBase( std::string const& operation, CasedString const& comparator )
        -: 7956:        : m_comparator( comparator ),
    #####: 7957:          m_operation( operation ) {
    #####: 7958:        }
        -: 7959:
    #####: 7960:        std::string StringMatcherBase::describe() const {
    #####: 7961:            std::string description;
    #####: 7962:            description.reserve(5 + m_operation.size() + m_comparator.m_str.size() +
    #####: 7963:                                        m_comparator.caseSensitivitySuffix().size());
    #####: 7964:            description += m_operation;
    #####: 7965:            description += ": \"";
    #####: 7966:            description += m_comparator.m_str;
    #####: 7967:            description += "\"";
    #####: 7968:            description += m_comparator.caseSensitivitySuffix();
    #####: 7969:            return description;
        -: 7970:        }
        -: 7971:
    #####: 7972:        EqualsMatcher::EqualsMatcher( CasedString const& comparator ) : StringMatcherBase( "equals", comparator ) {}
        -: 7973:
    #####: 7974:        bool EqualsMatcher::match( std::string const& source ) const {
    #####: 7975:            return m_comparator.adjustString( source ) == m_comparator.m_str;
        -: 7976:        }
        -: 7977:
    #####: 7978:        ContainsMatcher::ContainsMatcher( CasedString const& comparator ) : StringMatcherBase( "contains", comparator ) {}
        -: 7979:
    #####: 7980:        bool ContainsMatcher::match( std::string const& source ) const {
    #####: 7981:            return contains( m_comparator.adjustString( source ), m_comparator.m_str );
        -: 7982:        }
        -: 7983:
    #####: 7984:        StartsWithMatcher::StartsWithMatcher( CasedString const& comparator ) : StringMatcherBase( "starts with", comparator ) {}
        -: 7985:
    #####: 7986:        bool StartsWithMatcher::match( std::string const& source ) const {
    #####: 7987:            return startsWith( m_comparator.adjustString( source ), m_comparator.m_str );
        -: 7988:        }
        -: 7989:
    #####: 7990:        EndsWithMatcher::EndsWithMatcher( CasedString const& comparator ) : StringMatcherBase( "ends with", comparator ) {}
        -: 7991:
    #####: 7992:        bool EndsWithMatcher::match( std::string const& source ) const {
    #####: 7993:            return endsWith( m_comparator.adjustString( source ), m_comparator.m_str );
        -: 7994:        }
        -: 7995:
    #####: 7996:        RegexMatcher::RegexMatcher(std::string regex, CaseSensitive::Choice caseSensitivity): m_regex(std::move(regex)), m_caseSensitivity(caseSensitivity) {}
        -: 7997:
    #####: 7998:        bool RegexMatcher::match(std::string const& matchee) const {
    #####: 7999:            auto flags = std::regex::ECMAScript; // ECMAScript is the default syntax option anyway
    #####: 8000:            if (m_caseSensitivity == CaseSensitive::Choice::No) {
    #####: 8001:                flags |= std::regex::icase;
        -: 8002:            }
    #####: 8003:            auto reg = std::regex(m_regex, flags);
    #####: 8004:            return std::regex_match(matchee, reg);
        -: 8005:        }
        -: 8006:
    #####: 8007:        std::string RegexMatcher::describe() const {
    #####: 8008:            return "matches " + ::Catch::Detail::stringify(m_regex) + ((m_caseSensitivity == CaseSensitive::Choice::Yes)? " case sensitively" : " case insensitively");
        -: 8009:        }
        -: 8010:
        -: 8011:    } // namespace StdString
        -: 8012:
    #####: 8013:    StdString::EqualsMatcher Equals( std::string const& str, CaseSensitive::Choice caseSensitivity ) {
    #####: 8014:        return StdString::EqualsMatcher( StdString::CasedString( str, caseSensitivity) );
        -: 8015:    }
    #####: 8016:    StdString::ContainsMatcher Contains( std::string const& str, CaseSensitive::Choice caseSensitivity ) {
    #####: 8017:        return StdString::ContainsMatcher( StdString::CasedString( str, caseSensitivity) );
        -: 8018:    }
    #####: 8019:    StdString::EndsWithMatcher EndsWith( std::string const& str, CaseSensitive::Choice caseSensitivity ) {
    #####: 8020:        return StdString::EndsWithMatcher( StdString::CasedString( str, caseSensitivity) );
        -: 8021:    }
    #####: 8022:    StdString::StartsWithMatcher StartsWith( std::string const& str, CaseSensitive::Choice caseSensitivity ) {
    #####: 8023:        return StdString::StartsWithMatcher( StdString::CasedString( str, caseSensitivity) );
        -: 8024:    }
        -: 8025:
    #####: 8026:    StdString::RegexMatcher Matches(std::string const& regex, CaseSensitive::Choice caseSensitivity) {
    #####: 8027:        return StdString::RegexMatcher(regex, caseSensitivity);
        -: 8028:    }
        -: 8029:
        -: 8030:} // namespace Matchers
        -: 8031:} // namespace Catch
        -: 8032:// end catch_matchers_string.cpp
        -: 8033:// start catch_message.cpp
        -: 8034:
        -: 8035:// start catch_uncaught_exceptions.h
        -: 8036:
        -: 8037:namespace Catch {
        -: 8038:    bool uncaught_exceptions();
        -: 8039:} // end namespace Catch
        -: 8040:
        -: 8041:// end catch_uncaught_exceptions.h
        -: 8042:namespace Catch {
        -: 8043:
    #####: 8044:    MessageInfo::MessageInfo(   std::string const& _macroName,
        -: 8045:                                SourceLineInfo const& _lineInfo,
    #####: 8046:                                ResultWas::OfType _type )
        -: 8047:    :   macroName( _macroName ),
        -: 8048:        lineInfo( _lineInfo ),
        -: 8049:        type( _type ),
    #####: 8050:        sequence( ++globalCount )
    #####: 8051:    {}
        -: 8052:
    #####: 8053:    bool MessageInfo::operator==( MessageInfo const& other ) const {
    #####: 8054:        return sequence == other.sequence;
        -: 8055:    }
        -: 8056:
    #####: 8057:    bool MessageInfo::operator<( MessageInfo const& other ) const {
    #####: 8058:        return sequence < other.sequence;
        -: 8059:    }
        -: 8060:
        -: 8061:    // This may need protecting if threading support is added
        -: 8062:    unsigned int MessageInfo::globalCount = 0;
        -: 8063:
        -: 8064:    ////////////////////////////////////////////////////////////////////////////
        -: 8065:
    #####: 8066:    Catch::MessageBuilder::MessageBuilder( std::string const& macroName,
        -: 8067:                                           SourceLineInfo const& lineInfo,
    #####: 8068:                                           ResultWas::OfType type )
    #####: 8069:        :m_info(macroName, lineInfo, type) {}
        -: 8070:
        -: 8071:    ////////////////////////////////////////////////////////////////////////////
        -: 8072:
    #####: 8073:    ScopedMessage::ScopedMessage( MessageBuilder const& builder )
    #####: 8074:    : m_info( builder.m_info )
        -: 8075:    {
    #####: 8076:        m_info.message = builder.m_stream.str();
    #####: 8077:        getResultCapture().pushScopedMessage( m_info );
    #####: 8078:    }
        -: 8079:
    #####: 8080:    ScopedMessage::~ScopedMessage() {
    #####: 8081:        if ( !uncaught_exceptions() ){
    #####: 8082:            getResultCapture().popScopedMessage(m_info);
        -: 8083:        }
    #####: 8084:    }
        -: 8085:} // end namespace Catch
        -: 8086:// end catch_message.cpp
        -: 8087:// start catch_random_number_generator.cpp
        -: 8088:
        -: 8089:// start catch_random_number_generator.h
        -: 8090:
        -: 8091:#include <algorithm>
        -: 8092:
        -: 8093:namespace Catch {
        -: 8094:
        -: 8095:    struct IConfig;
        -: 8096:
        -: 8097:    void seedRng( IConfig const& config );
        -: 8098:
        -: 8099:    unsigned int rngSeed();
        -: 8100:
        -: 8101:    struct RandomNumberGenerator {
        -: 8102:        using result_type = unsigned int;
        -: 8103:
        -: 8104:        static constexpr result_type (min)() { return 0; }
    #####: 8105:        static constexpr result_type (max)() { return 1000000; }
        -: 8106:
        -: 8107:        result_type operator()( result_type n ) const;
        -: 8108:        result_type operator()() const;
        -: 8109:
        -: 8110:        template<typename V>
    #####: 8111:        static void shuffle( V& vector ) {
        -: 8112:            RandomNumberGenerator rng;
    #####: 8113:            std::shuffle( vector.begin(), vector.end(), rng );
    #####: 8114:        }
        -: 8115:    };
        -: 8116:
        -: 8117:}
        -: 8118:
        -: 8119:// end catch_random_number_generator.h
        -: 8120:#include <cstdlib>
        -: 8121:
        -: 8122:namespace Catch {
        -: 8123:
    #####: 8124:    void seedRng( IConfig const& config ) {
    #####: 8125:        if( config.rngSeed() != 0 )
    #####: 8126:            std::srand( config.rngSeed() );
    #####: 8127:    }
    #####: 8128:    unsigned int rngSeed() {
    #####: 8129:        return getCurrentContext().getConfig()->rngSeed();
        -: 8130:    }
        -: 8131:
    #####: 8132:    RandomNumberGenerator::result_type RandomNumberGenerator::operator()( result_type n ) const {
    #####: 8133:        return std::rand() % n;
        -: 8134:    }
    #####: 8135:    RandomNumberGenerator::result_type RandomNumberGenerator::operator()() const {
    #####: 8136:        return std::rand() % (max)();
        -: 8137:    }
        -: 8138:
        -: 8139:}
        -: 8140:// end catch_random_number_generator.cpp
        -: 8141:// start catch_registry_hub.cpp
        -: 8142:
        -: 8143:// start catch_test_case_registry_impl.h
        -: 8144:
        -: 8145:#include <vector>
        -: 8146:#include <set>
        -: 8147:#include <algorithm>
        -: 8148:#include <ios>
        -: 8149:
        -: 8150:namespace Catch {
        -: 8151:
        -: 8152:    class TestCase;
        -: 8153:    struct IConfig;
        -: 8154:
        -: 8155:    std::vector<TestCase> sortTests( IConfig const& config, std::vector<TestCase> const& unsortedTestCases );
        -: 8156:    bool matchTest( TestCase const& testCase, TestSpec const& testSpec, IConfig const& config );
        -: 8157:
        -: 8158:    void enforceNoDuplicateTestCases( std::vector<TestCase> const& functions );
        -: 8159:
        -: 8160:    std::vector<TestCase> filterTests( std::vector<TestCase> const& testCases, TestSpec const& testSpec, IConfig const& config );
        -: 8161:    std::vector<TestCase> const& getAllTestCasesSorted( IConfig const& config );
        -: 8162:
    #####: 8163:    class TestRegistry : public ITestCaseRegistry {
        -: 8164:    public:
    #####: 8165:        virtual ~TestRegistry() = default;
        -: 8166:
        -: 8167:        virtual void registerTest( TestCase const& testCase );
        -: 8168:
        -: 8169:        std::vector<TestCase> const& getAllTests() const override;
        -: 8170:        std::vector<TestCase> const& getAllTestsSorted( IConfig const& config ) const override;
        -: 8171:
        -: 8172:    private:
        -: 8173:        std::vector<TestCase> m_functions;
        -: 8174:        mutable RunTests::InWhatOrder m_currentSortOrder = RunTests::InDeclarationOrder;
        -: 8175:        mutable std::vector<TestCase> m_sortedFunctions;
        -: 8176:        std::size_t m_unnamedCount = 0;
        -: 8177:        std::ios_base::Init m_ostreamInit; // Forces cout/ cerr to be initialised
        -: 8178:    };
        -: 8179:
        -: 8180:    ///////////////////////////////////////////////////////////////////////////
        -: 8181:
    #####: 8182:    class TestInvokerAsFunction : public ITestInvoker {
        -: 8183:        void(*m_testAsFunction)();
        -: 8184:    public:
        -: 8185:        TestInvokerAsFunction( void(*testAsFunction)() ) noexcept;
        -: 8186:
        -: 8187:        void invoke() const override;
        -: 8188:    };
        -: 8189:
        -: 8190:    std::string extractClassName( StringRef const& classOrQualifiedMethodName );
        -: 8191:
        -: 8192:    ///////////////////////////////////////////////////////////////////////////
        -: 8193:
        -: 8194:} // end namespace Catch
        -: 8195:
        -: 8196:// end catch_test_case_registry_impl.h
        -: 8197:// start catch_reporter_registry.h
        -: 8198:
        -: 8199:#include <map>
        -: 8200:
        -: 8201:namespace Catch {
        -: 8202:
    #####: 8203:    class ReporterRegistry : public IReporterRegistry {
        -: 8204:
        -: 8205:    public:
        -: 8206:
        -: 8207:        ~ReporterRegistry() override;
        -: 8208:
        -: 8209:        IStreamingReporterPtr create( std::string const& name, IConfigPtr const& config ) const override;
        -: 8210:
        -: 8211:        void registerReporter( std::string const& name, IReporterFactoryPtr const& factory );
        -: 8212:        void registerListener( IReporterFactoryPtr const& factory );
        -: 8213:
        -: 8214:        FactoryMap const& getFactories() const override;
        -: 8215:        Listeners const& getListeners() const override;
        -: 8216:
        -: 8217:    private:
        -: 8218:        FactoryMap m_factories;
        -: 8219:        Listeners m_listeners;
        -: 8220:    };
        -: 8221:}
        -: 8222:
        -: 8223:// end catch_reporter_registry.h
        -: 8224:// start catch_tag_alias_registry.h
        -: 8225:
        -: 8226:// start catch_tag_alias.h
        -: 8227:
        -: 8228:#include <string>
        -: 8229:
        -: 8230:namespace Catch {
        -: 8231:
    #####: 8232:    struct TagAlias {
        -: 8233:        TagAlias(std::string const& _tag, SourceLineInfo _lineInfo);
        -: 8234:
        -: 8235:        std::string tag;
        -: 8236:        SourceLineInfo lineInfo;
        -: 8237:    };
        -: 8238:
        -: 8239:} // end namespace Catch
        -: 8240:
        -: 8241:// end catch_tag_alias.h
        -: 8242:#include <map>
        -: 8243:
        -: 8244:namespace Catch {
        -: 8245:
    #####: 8246:    class TagAliasRegistry : public ITagAliasRegistry {
        -: 8247:    public:
        -: 8248:        ~TagAliasRegistry() override;
        -: 8249:        TagAlias const* find( std::string const& alias ) const override;
        -: 8250:        std::string expandAliases( std::string const& unexpandedTestSpec ) const override;
        -: 8251:        void add( std::string const& alias, std::string const& tag, SourceLineInfo const& lineInfo );
        -: 8252:
        -: 8253:    private:
        -: 8254:        std::map<std::string, TagAlias> m_registry;
        -: 8255:    };
        -: 8256:
        -: 8257:} // end namespace Catch
        -: 8258:
        -: 8259:// end catch_tag_alias_registry.h
        -: 8260:// start catch_startup_exception_registry.h
        -: 8261:
        -: 8262:#include <vector>
        -: 8263:#include <exception>
        -: 8264:
        -: 8265:namespace Catch {
        -: 8266:
    #####: 8267:    class StartupExceptionRegistry {
        -: 8268:    public:
        -: 8269:        void add(std::exception_ptr const& exception) noexcept;
        -: 8270:        std::vector<std::exception_ptr> const& getExceptions() const noexcept;
        -: 8271:    private:
        -: 8272:        std::vector<std::exception_ptr> m_exceptions;
        -: 8273:    };
        -: 8274:
        -: 8275:} // end namespace Catch
        -: 8276:
        -: 8277:// end catch_startup_exception_registry.h
        -: 8278:namespace Catch {
        -: 8279:
        -: 8280:    namespace {
        -: 8281:
    #####: 8282:        class RegistryHub : public IRegistryHub, public IMutableRegistryHub,
        -: 8283:                            private NonCopyable {
        -: 8284:
        -: 8285:        public: // IRegistryHub
    #####: 8286:            RegistryHub() = default;
    #####: 8287:            IReporterRegistry const& getReporterRegistry() const override {
    #####: 8288:                return m_reporterRegistry;
        -: 8289:            }
    #####: 8290:            ITestCaseRegistry const& getTestCaseRegistry() const override {
    #####: 8291:                return m_testCaseRegistry;
        -: 8292:            }
    #####: 8293:            IExceptionTranslatorRegistry& getExceptionTranslatorRegistry() override {
    #####: 8294:                return m_exceptionTranslatorRegistry;
        -: 8295:            }
    #####: 8296:            ITagAliasRegistry const& getTagAliasRegistry() const override {
    #####: 8297:                return m_tagAliasRegistry;
        -: 8298:            }
    #####: 8299:            StartupExceptionRegistry const& getStartupExceptionRegistry() const override {
    #####: 8300:                return m_exceptionRegistry;
        -: 8301:            }
        -: 8302:
        -: 8303:        public: // IMutableRegistryHub
    #####: 8304:            void registerReporter( std::string const& name, IReporterFactoryPtr const& factory ) override {
    #####: 8305:                m_reporterRegistry.registerReporter( name, factory );
    #####: 8306:            }
    #####: 8307:            void registerListener( IReporterFactoryPtr const& factory ) override {
    #####: 8308:                m_reporterRegistry.registerListener( factory );
    #####: 8309:            }
    #####: 8310:            void registerTest( TestCase const& testInfo ) override {
    #####: 8311:                m_testCaseRegistry.registerTest( testInfo );
    #####: 8312:            }
    #####: 8313:            void registerTranslator( const IExceptionTranslator* translator ) override {
    #####: 8314:                m_exceptionTranslatorRegistry.registerTranslator( translator );
    #####: 8315:            }
    #####: 8316:            void registerTagAlias( std::string const& alias, std::string const& tag, SourceLineInfo const& lineInfo ) override {
    #####: 8317:                m_tagAliasRegistry.add( alias, tag, lineInfo );
    #####: 8318:            }
    #####: 8319:            void registerStartupException() noexcept override {
    #####: 8320:                m_exceptionRegistry.add(std::current_exception());
    #####: 8321:            }
        -: 8322:
        -: 8323:        private:
        -: 8324:            TestRegistry m_testCaseRegistry;
        -: 8325:            ReporterRegistry m_reporterRegistry;
        -: 8326:            ExceptionTranslatorRegistry m_exceptionTranslatorRegistry;
        -: 8327:            TagAliasRegistry m_tagAliasRegistry;
        -: 8328:            StartupExceptionRegistry m_exceptionRegistry;
        -: 8329:        };
        -: 8330:
        -: 8331:        // Single, global, instance
    #####: 8332:        RegistryHub*& getTheRegistryHub() {
        -: 8333:            static RegistryHub* theRegistryHub = nullptr;
    #####: 8334:            if( !theRegistryHub )
    #####: 8335:                theRegistryHub = new RegistryHub();
    #####: 8336:            return theRegistryHub;
        -: 8337:        }
        -: 8338:    }
        -: 8339:
    #####: 8340:    IRegistryHub& getRegistryHub() {
    #####: 8341:        return *getTheRegistryHub();
        -: 8342:    }
    #####: 8343:    IMutableRegistryHub& getMutableRegistryHub() {
    #####: 8344:        return *getTheRegistryHub();
        -: 8345:    }
    #####: 8346:    void cleanUp() {
    #####: 8347:        delete getTheRegistryHub();
    #####: 8348:        getTheRegistryHub() = nullptr;
    #####: 8349:        cleanUpContext();
    #####: 8350:        ReusableStringStream::cleanup();
    #####: 8351:    }
    #####: 8352:    std::string translateActiveException() {
    #####: 8353:        return getRegistryHub().getExceptionTranslatorRegistry().translateActiveException();
        -: 8354:    }
        -: 8355:
        -: 8356:} // end namespace Catch
        -: 8357:// end catch_registry_hub.cpp
        -: 8358:// start catch_reporter_registry.cpp
        -: 8359:
        -: 8360:namespace Catch {
        -: 8361:
        -: 8362:    ReporterRegistry::~ReporterRegistry() = default;
        -: 8363:
    #####: 8364:    IStreamingReporterPtr ReporterRegistry::create( std::string const& name, IConfigPtr const& config ) const {
    #####: 8365:        auto it =  m_factories.find( name );
    #####: 8366:        if( it == m_factories.end() )
    #####: 8367:            return nullptr;
    #####: 8368:        return it->second->create( ReporterConfig( config ) );
        -: 8369:    }
        -: 8370:
    #####: 8371:    void ReporterRegistry::registerReporter( std::string const& name, IReporterFactoryPtr const& factory ) {
    #####: 8372:        m_factories.emplace(name, factory);
    #####: 8373:    }
    #####: 8374:    void ReporterRegistry::registerListener( IReporterFactoryPtr const& factory ) {
    #####: 8375:        m_listeners.push_back( factory );
    #####: 8376:    }
        -: 8377:
    #####: 8378:    IReporterRegistry::FactoryMap const& ReporterRegistry::getFactories() const {
    #####: 8379:        return m_factories;
        -: 8380:    }
    #####: 8381:    IReporterRegistry::Listeners const& ReporterRegistry::getListeners() const {
    #####: 8382:        return m_listeners;
        -: 8383:    }
        -: 8384:
        -: 8385:}
        -: 8386:// end catch_reporter_registry.cpp
        -: 8387:// start catch_result_type.cpp
        -: 8388:
        -: 8389:namespace Catch {
        -: 8390:
    #####: 8391:    bool isOk( ResultWas::OfType resultType ) {
    #####: 8392:        return ( resultType & ResultWas::FailureBit ) == 0;
        -: 8393:    }
    #####: 8394:    bool isJustInfo( int flags ) {
    #####: 8395:        return flags == ResultWas::Info;
        -: 8396:    }
        -: 8397:
    #####: 8398:    ResultDisposition::Flags operator | ( ResultDisposition::Flags lhs, ResultDisposition::Flags rhs ) {
    #####: 8399:        return static_cast<ResultDisposition::Flags>( static_cast<int>( lhs ) | static_cast<int>( rhs ) );
        -: 8400:    }
        -: 8401:
    #####: 8402:    bool shouldContinueOnFailure( int flags )    { return ( flags & ResultDisposition::ContinueOnFailure ) != 0; }
    #####: 8403:    bool shouldSuppressFailure( int flags )      { return ( flags & ResultDisposition::SuppressFail ) != 0; }
        -: 8404:
        -: 8405:} // end namespace Catch
        -: 8406:// end catch_result_type.cpp
        -: 8407:// start catch_run_context.cpp
        -: 8408:
        -: 8409:#include <cassert>
        -: 8410:#include <algorithm>
        -: 8411:#include <sstream>
        -: 8412:
        -: 8413:namespace Catch {
        -: 8414:
        -: 8415:    class RedirectedStream {
        -: 8416:        std::ostream& m_originalStream;
        -: 8417:        std::ostream& m_redirectionStream;
        -: 8418:        std::streambuf* m_prevBuf;
        -: 8419:
        -: 8420:    public:
    #####: 8421:        RedirectedStream( std::ostream& originalStream, std::ostream& redirectionStream )
    #####: 8422:        :   m_originalStream( originalStream ),
        -: 8423:            m_redirectionStream( redirectionStream ),
    #####: 8424:            m_prevBuf( m_originalStream.rdbuf() )
        -: 8425:        {
    #####: 8426:            m_originalStream.rdbuf( m_redirectionStream.rdbuf() );
    #####: 8427:        }
    #####: 8428:        ~RedirectedStream() {
    #####: 8429:            m_originalStream.rdbuf( m_prevBuf );
    #####: 8430:        }
        -: 8431:    };
        -: 8432:
    #####: 8433:    class RedirectedStdOut {
        -: 8434:        ReusableStringStream m_rss;
        -: 8435:        RedirectedStream m_cout;
        -: 8436:    public:
    #####: 8437:        RedirectedStdOut() : m_cout( Catch::cout(), m_rss.get() ) {}
    #####: 8438:        auto str() const -> std::string { return m_rss.str(); }
        -: 8439:    };
        -: 8440:
        -: 8441:    // StdErr has two constituent streams in C++, std::cerr and std::clog
        -: 8442:    // This means that we need to redirect 2 streams into 1 to keep proper
        -: 8443:    // order of writes
    #####: 8444:    class RedirectedStdErr {
        -: 8445:        ReusableStringStream m_rss;
        -: 8446:        RedirectedStream m_cerr;
        -: 8447:        RedirectedStream m_clog;
        -: 8448:    public:
    #####: 8449:        RedirectedStdErr()
    #####: 8450:        :   m_cerr( Catch::cerr(), m_rss.get() ),
    #####: 8451:            m_clog( Catch::clog(), m_rss.get() )
    #####: 8452:        {}
    #####: 8453:        auto str() const -> std::string { return m_rss.str(); }
        -: 8454:    };
        -: 8455:
    #####: 8456:    RunContext::RunContext(IConfigPtr const& _config, IStreamingReporterPtr&& reporter)
    #####: 8457:    :   m_runInfo(_config->name()),
    #####: 8458:        m_context(getCurrentMutableContext()),
        -: 8459:        m_config(_config),
    #####: 8460:        m_reporter(std::move(reporter)),
        -: 8461:        m_lastAssertionInfo{ StringRef(), SourceLineInfo("",0), StringRef(), ResultDisposition::Normal },
    #####: 8462:        m_includeSuccessfulResults( m_config->includeSuccessfulResults() )
        -: 8463:    {
    #####: 8464:        m_context.setRunner(this);
    #####: 8465:        m_context.setConfig(m_config);
    #####: 8466:        m_context.setResultCapture(this);
    #####: 8467:        m_reporter->testRunStarting(m_runInfo);
    #####: 8468:    }
        -: 8469:
    #####: 8470:    RunContext::~RunContext() {
    #####: 8471:        m_reporter->testRunEnded(TestRunStats(m_runInfo, m_totals, aborting()));
    #####: 8472:    }
        -: 8473:
    #####: 8474:    void RunContext::testGroupStarting(std::string const& testSpec, std::size_t groupIndex, std::size_t groupsCount) {
    #####: 8475:        m_reporter->testGroupStarting(GroupInfo(testSpec, groupIndex, groupsCount));
    #####: 8476:    }
        -: 8477:
    #####: 8478:    void RunContext::testGroupEnded(std::string const& testSpec, Totals const& totals, std::size_t groupIndex, std::size_t groupsCount) {
    #####: 8479:        m_reporter->testGroupEnded(TestGroupStats(GroupInfo(testSpec, groupIndex, groupsCount), totals, aborting()));
    #####: 8480:    }
        -: 8481:
    #####: 8482:    Totals RunContext::runTest(TestCase const& testCase) {
    #####: 8483:        Totals prevTotals = m_totals;
        -: 8484:
    #####: 8485:        std::string redirectedCout;
    #####: 8486:        std::string redirectedCerr;
        -: 8487:
    #####: 8488:        auto const& testInfo = testCase.getTestCaseInfo();
        -: 8489:
    #####: 8490:        m_reporter->testCaseStarting(testInfo);
        -: 8491:
    #####: 8492:        m_activeTestCase = &testCase;
        -: 8493:
    #####: 8494:        ITracker& rootTracker = m_trackerContext.startRun();
    #####: 8495:        assert(rootTracker.isSectionTracker());
    #####: 8496:        static_cast<SectionTracker&>(rootTracker).addInitialFilters(m_config->getSectionsToRun());
    #####: 8497:        do {
    #####: 8498:            m_trackerContext.startCycle();
    #####: 8499:            m_testCaseTracker = &SectionTracker::acquire(m_trackerContext, TestCaseTracking::NameAndLocation(testInfo.name, testInfo.lineInfo));
    #####: 8500:            runCurrentTest(redirectedCout, redirectedCerr);
    #####: 8501:        } while (!m_testCaseTracker->isSuccessfullyCompleted() && !aborting());
        -: 8502:
    #####: 8503:        Totals deltaTotals = m_totals.delta(prevTotals);
    #####: 8504:        if (testInfo.expectedToFail() && deltaTotals.testCases.passed > 0) {
    #####: 8505:            deltaTotals.assertions.failed++;
    #####: 8506:            deltaTotals.testCases.passed--;
    #####: 8507:            deltaTotals.testCases.failed++;
        -: 8508:        }
    #####: 8509:        m_totals.testCases += deltaTotals.testCases;
    #####: 8510:        m_reporter->testCaseEnded(TestCaseStats(testInfo,
        -: 8511:                                  deltaTotals,
        -: 8512:                                  redirectedCout,
        -: 8513:                                  redirectedCerr,
    #####: 8514:                                  aborting()));
        -: 8515:
    #####: 8516:        m_activeTestCase = nullptr;
    #####: 8517:        m_testCaseTracker = nullptr;
        -: 8518:
    #####: 8519:        return deltaTotals;
        -: 8520:    }
        -: 8521:
    #####: 8522:    IConfigPtr RunContext::config() const {
    #####: 8523:        return m_config;
        -: 8524:    }
        -: 8525:
    #####: 8526:    IStreamingReporter& RunContext::reporter() const {
    #####: 8527:        return *m_reporter;
        -: 8528:    }
        -: 8529:
    #####: 8530:    void RunContext::assertionEnded(AssertionResult const & result) {
    #####: 8531:        if (result.getResultType() == ResultWas::Ok) {
    #####: 8532:            m_totals.assertions.passed++;
    #####: 8533:            m_lastAssertionPassed = true;
    #####: 8534:        } else if (!result.isOk()) {
    #####: 8535:            m_lastAssertionPassed = false;
    #####: 8536:            if( m_activeTestCase->getTestCaseInfo().okToFail() )
    #####: 8537:                m_totals.assertions.failedButOk++;
        -: 8538:            else
    #####: 8539:                m_totals.assertions.failed++;
        -: 8540:        }
        -: 8541:        else {
    #####: 8542:            m_lastAssertionPassed = true;
        -: 8543:        }
        -: 8544:
        -: 8545:        // We have no use for the return value (whether messages should be cleared), because messages were made scoped
        -: 8546:        // and should be let to clear themselves out.
    #####: 8547:        static_cast<void>(m_reporter->assertionEnded(AssertionStats(result, m_messages, m_totals)));
        -: 8548:
        -: 8549:        // Reset working state
    #####: 8550:        resetAssertionInfo();
    #####: 8551:        m_lastResult = result;
    #####: 8552:    }
    #####: 8553:    void RunContext::resetAssertionInfo() {
    #####: 8554:        m_lastAssertionInfo.macroName = StringRef();
    #####: 8555:        m_lastAssertionInfo.capturedExpression = "{Unknown expression after the reported line}"_sr;
    #####: 8556:    }
        -: 8557:
    #####: 8558:    bool RunContext::sectionStarted(SectionInfo const & sectionInfo, Counts & assertions) {
    #####: 8559:        ITracker& sectionTracker = SectionTracker::acquire(m_trackerContext, TestCaseTracking::NameAndLocation(sectionInfo.name, sectionInfo.lineInfo));
    #####: 8560:        if (!sectionTracker.isOpen())
    #####: 8561:            return false;
    #####: 8562:        m_activeSections.push_back(&sectionTracker);
        -: 8563:
    #####: 8564:        m_lastAssertionInfo.lineInfo = sectionInfo.lineInfo;
        -: 8565:
    #####: 8566:        m_reporter->sectionStarting(sectionInfo);
        -: 8567:
    #####: 8568:        assertions = m_totals.assertions;
        -: 8569:
    #####: 8570:        return true;
        -: 8571:    }
        -: 8572:
    #####: 8573:    bool RunContext::testForMissingAssertions(Counts& assertions) {
    #####: 8574:        if (assertions.total() != 0)
    #####: 8575:            return false;
    #####: 8576:        if (!m_config->warnAboutMissingAssertions())
    #####: 8577:            return false;
    #####: 8578:        if (m_trackerContext.currentTracker().hasChildren())
    #####: 8579:            return false;
    #####: 8580:        m_totals.assertions.failed++;
    #####: 8581:        assertions.failed++;
    #####: 8582:        return true;
        -: 8583:    }
        -: 8584:
    #####: 8585:    void RunContext::sectionEnded(SectionEndInfo const & endInfo) {
    #####: 8586:        Counts assertions = m_totals.assertions - endInfo.prevAssertions;
    #####: 8587:        bool missingAssertions = testForMissingAssertions(assertions);
        -: 8588:
    #####: 8589:        if (!m_activeSections.empty()) {
    #####: 8590:            m_activeSections.back()->close();
    #####: 8591:            m_activeSections.pop_back();
        -: 8592:        }
        -: 8593:
    #####: 8594:        m_reporter->sectionEnded(SectionStats(endInfo.sectionInfo, assertions, endInfo.durationInSeconds, missingAssertions));
    #####: 8595:        m_messages.clear();
    #####: 8596:    }
        -: 8597:
    #####: 8598:    void RunContext::sectionEndedEarly(SectionEndInfo const & endInfo) {
    #####: 8599:        if (m_unfinishedSections.empty())
    #####: 8600:            m_activeSections.back()->fail();
        -: 8601:        else
    #####: 8602:            m_activeSections.back()->close();
    #####: 8603:        m_activeSections.pop_back();
        -: 8604:
    #####: 8605:        m_unfinishedSections.push_back(endInfo);
    #####: 8606:    }
    #####: 8607:    void RunContext::benchmarkStarting( BenchmarkInfo const& info ) {
    #####: 8608:        m_reporter->benchmarkStarting( info );
    #####: 8609:    }
    #####: 8610:    void RunContext::benchmarkEnded( BenchmarkStats const& stats ) {
    #####: 8611:        m_reporter->benchmarkEnded( stats );
    #####: 8612:    }
        -: 8613:
    #####: 8614:    void RunContext::pushScopedMessage(MessageInfo const & message) {
    #####: 8615:        m_messages.push_back(message);
    #####: 8616:    }
        -: 8617:
    #####: 8618:    void RunContext::popScopedMessage(MessageInfo const & message) {
    #####: 8619:        m_messages.erase(std::remove(m_messages.begin(), m_messages.end(), message), m_messages.end());
    #####: 8620:    }
        -: 8621:
    #####: 8622:    std::string RunContext::getCurrentTestName() const {
    #####: 8623:        return m_activeTestCase
    #####: 8624:            ? m_activeTestCase->getTestCaseInfo().name
    #####: 8625:            : std::string();
        -: 8626:    }
        -: 8627:
    #####: 8628:    const AssertionResult * RunContext::getLastResult() const {
    #####: 8629:        return &(*m_lastResult);
        -: 8630:    }
        -: 8631:
    #####: 8632:    void RunContext::exceptionEarlyReported() {
    #####: 8633:        m_shouldReportUnexpected = false;
    #####: 8634:    }
        -: 8635:
    #####: 8636:    void RunContext::handleFatalErrorCondition( StringRef message ) {
        -: 8637:        // First notify reporter that bad things happened
    #####: 8638:        m_reporter->fatalErrorEncountered(message);
        -: 8639:
        -: 8640:        // Don't rebuild the result -- the stringification itself can cause more fatal errors
        -: 8641:        // Instead, fake a result data.
    #####: 8642:        AssertionResultData tempResult( ResultWas::FatalErrorCondition, { false } );
    #####: 8643:        tempResult.message = message;
    #####: 8644:        AssertionResult result(m_lastAssertionInfo, tempResult);
        -: 8645:
    #####: 8646:        assertionEnded(result);
        -: 8647:
    #####: 8648:        handleUnfinishedSections();
        -: 8649:
        -: 8650:        // Recreate section for test case (as we will lose the one that was in scope)
    #####: 8651:        auto const& testCaseInfo = m_activeTestCase->getTestCaseInfo();
    #####: 8652:        SectionInfo testCaseSection(testCaseInfo.lineInfo, testCaseInfo.name, testCaseInfo.description);
        -: 8653:
    #####: 8654:        Counts assertions;
    #####: 8655:        assertions.failed = 1;
    #####: 8656:        SectionStats testCaseSectionStats(testCaseSection, assertions, 0, false);
    #####: 8657:        m_reporter->sectionEnded(testCaseSectionStats);
        -: 8658:
    #####: 8659:        auto const& testInfo = m_activeTestCase->getTestCaseInfo();
        -: 8660:
    #####: 8661:        Totals deltaTotals;
    #####: 8662:        deltaTotals.testCases.failed = 1;
    #####: 8663:        deltaTotals.assertions.failed = 1;
    #####: 8664:        m_reporter->testCaseEnded(TestCaseStats(testInfo,
        -: 8665:                                  deltaTotals,
    #####: 8666:                                  std::string(),
    #####: 8667:                                  std::string(),
    #####: 8668:                                  false));
    #####: 8669:        m_totals.testCases.failed++;
    #####: 8670:        testGroupEnded(std::string(), m_totals, 1, 1);
    #####: 8671:        m_reporter->testRunEnded(TestRunStats(m_runInfo, m_totals, false));
    #####: 8672:    }
        -: 8673:
    #####: 8674:    bool RunContext::lastAssertionPassed() {
    #####: 8675:         return m_lastAssertionPassed;
        -: 8676:    }
        -: 8677:
    #####: 8678:    void RunContext::assertionPassed() {
    #####: 8679:        m_lastAssertionPassed = true;
    #####: 8680:        ++m_totals.assertions.passed;
    #####: 8681:        resetAssertionInfo();
    #####: 8682:    }
        -: 8683:
    #####: 8684:    bool RunContext::aborting() const {
    #####: 8685:        return m_totals.assertions.failed == static_cast<std::size_t>(m_config->abortAfter());
        -: 8686:    }
        -: 8687:
    #####: 8688:    void RunContext::runCurrentTest(std::string & redirectedCout, std::string & redirectedCerr) {
    #####: 8689:        auto const& testCaseInfo = m_activeTestCase->getTestCaseInfo();
    #####: 8690:        SectionInfo testCaseSection(testCaseInfo.lineInfo, testCaseInfo.name, testCaseInfo.description);
    #####: 8691:        m_reporter->sectionStarting(testCaseSection);
    #####: 8692:        Counts prevAssertions = m_totals.assertions;
    #####: 8693:        double duration = 0;
    #####: 8694:        m_shouldReportUnexpected = true;
    #####: 8695:        m_lastAssertionInfo = { "TEST_CASE"_sr, testCaseInfo.lineInfo, StringRef(), ResultDisposition::Normal };
        -: 8696:
    #####: 8697:        seedRng(*m_config);
        -: 8698:
    #####: 8699:        Timer timer;
        -: 8700:        try {
    #####: 8701:            if (m_reporter->getPreferences().shouldRedirectStdOut) {
    #####: 8702:                RedirectedStdOut redirectedStdOut;
    #####: 8703:                RedirectedStdErr redirectedStdErr;
    #####: 8704:                timer.start();
    #####: 8705:                invokeActiveTestCase();
    #####: 8706:                redirectedCout += redirectedStdOut.str();
    #####: 8707:                redirectedCerr += redirectedStdErr.str();
        -: 8708:
        -: 8709:            } else {
    #####: 8710:                timer.start();
    #####: 8711:                invokeActiveTestCase();
        -: 8712:            }
    #####: 8713:            duration = timer.getElapsedSeconds();
    =====: 8714:        } catch (TestFailureException&) {
        -: 8715:            // This just means the test was aborted due to failure
    =====: 8716:        } catch (...) {
        -: 8717:            // Under CATCH_CONFIG_FAST_COMPILE, unexpected exceptions under REQUIRE assertions
        -: 8718:            // are reported without translation at the point of origin.
    =====: 8719:            if( m_shouldReportUnexpected ) {
    =====: 8720:                AssertionReaction dummyReaction;
    =====: 8721:                handleUnexpectedInflightException( m_lastAssertionInfo, translateActiveException(), dummyReaction );
        -: 8722:            }
        -: 8723:        }
    #####: 8724:        Counts assertions = m_totals.assertions - prevAssertions;
    #####: 8725:        bool missingAssertions = testForMissingAssertions(assertions);
        -: 8726:
    #####: 8727:        m_testCaseTracker->close();
    #####: 8728:        handleUnfinishedSections();
    #####: 8729:        m_messages.clear();
        -: 8730:
    #####: 8731:        SectionStats testCaseSectionStats(testCaseSection, assertions, duration, missingAssertions);
    #####: 8732:        m_reporter->sectionEnded(testCaseSectionStats);
    #####: 8733:    }
        -: 8734:
    #####: 8735:    void RunContext::invokeActiveTestCase() {
    #####: 8736:        FatalConditionHandler fatalConditionHandler; // Handle signals
    #####: 8737:        m_activeTestCase->invoke();
    #####: 8738:        fatalConditionHandler.reset();
    #####: 8739:    }
        -: 8740:
    #####: 8741:    void RunContext::handleUnfinishedSections() {
        -: 8742:        // If sections ended prematurely due to an exception we stored their
        -: 8743:        // infos here so we can tear them down outside the unwind process.
    #####: 8744:        for (auto it = m_unfinishedSections.rbegin(),
    #####: 8745:             itEnd = m_unfinishedSections.rend();
        -: 8746:             it != itEnd;
        -: 8747:             ++it)
    #####: 8748:            sectionEnded(*it);
    #####: 8749:        m_unfinishedSections.clear();
    #####: 8750:    }
        -: 8751:
    #####: 8752:    void RunContext::handleExpr(
        -: 8753:        AssertionInfo const& info,
        -: 8754:        ITransientExpression const& expr,
        -: 8755:        AssertionReaction& reaction
        -: 8756:    ) {
    #####: 8757:        m_reporter->assertionStarting( info );
        -: 8758:
    #####: 8759:        bool negated = isFalseTest( info.resultDisposition );
    #####: 8760:        bool result = expr.getResult() != negated;
        -: 8761:
    #####: 8762:        if( result ) {
    #####: 8763:            if (!m_includeSuccessfulResults) {
    #####: 8764:                assertionPassed();
        -: 8765:            }
        -: 8766:            else {
    #####: 8767:                reportExpr(info, ResultWas::Ok, &expr, negated);
        -: 8768:            }
        -: 8769:        }
        -: 8770:        else {
    #####: 8771:            reportExpr(info, ResultWas::ExpressionFailed, &expr, negated );
    #####: 8772:            populateReaction( reaction );
        -: 8773:        }
    #####: 8774:    }
    #####: 8775:    void RunContext::reportExpr(
        -: 8776:            AssertionInfo const &info,
        -: 8777:            ResultWas::OfType resultType,
        -: 8778:            ITransientExpression const *expr,
        -: 8779:            bool negated ) {
        -: 8780:
    #####: 8781:        m_lastAssertionInfo = info;
    #####: 8782:        AssertionResultData data( resultType, LazyExpression( negated ) );
        -: 8783:
    #####: 8784:        AssertionResult assertionResult{ info, data };
    #####: 8785:        assertionResult.m_resultData.lazyExpression.m_transientExpression = expr;
        -: 8786:
    #####: 8787:        assertionEnded( assertionResult );
    #####: 8788:    }
        -: 8789:
    #####: 8790:    void RunContext::handleMessage(
        -: 8791:            AssertionInfo const& info,
        -: 8792:            ResultWas::OfType resultType,
        -: 8793:            StringRef const& message,
        -: 8794:            AssertionReaction& reaction
        -: 8795:    ) {
    #####: 8796:        m_reporter->assertionStarting( info );
        -: 8797:
    #####: 8798:        m_lastAssertionInfo = info;
        -: 8799:
    #####: 8800:        AssertionResultData data( resultType, LazyExpression( false ) );
    #####: 8801:        data.message = message;
    #####: 8802:        AssertionResult assertionResult{ m_lastAssertionInfo, data };
    #####: 8803:        assertionEnded( assertionResult );
    #####: 8804:        if( !assertionResult.isOk() )
    #####: 8805:            populateReaction( reaction );
    #####: 8806:    }
    #####: 8807:    void RunContext::handleUnexpectedExceptionNotThrown(
        -: 8808:            AssertionInfo const& info,
        -: 8809:            AssertionReaction& reaction
        -: 8810:    ) {
    #####: 8811:        handleNonExpr(info, Catch::ResultWas::DidntThrowException, reaction);
    #####: 8812:    }
        -: 8813:
    #####: 8814:    void RunContext::handleUnexpectedInflightException(
        -: 8815:            AssertionInfo const& info,
        -: 8816:            std::string const& message,
        -: 8817:            AssertionReaction& reaction
        -: 8818:    ) {
    #####: 8819:        m_lastAssertionInfo = info;
        -: 8820:
    #####: 8821:        AssertionResultData data( ResultWas::ThrewException, LazyExpression( false ) );
    #####: 8822:        data.message = message;
    #####: 8823:        AssertionResult assertionResult{ info, data };
    #####: 8824:        assertionEnded( assertionResult );
    #####: 8825:        populateReaction( reaction );
    #####: 8826:    }
        -: 8827:
    #####: 8828:    void RunContext::populateReaction( AssertionReaction& reaction ) {
    #####: 8829:        reaction.shouldDebugBreak = m_config->shouldDebugBreak();
    #####: 8830:        reaction.shouldThrow = aborting() || (m_lastAssertionInfo.resultDisposition & ResultDisposition::Normal);
    #####: 8831:    }
        -: 8832:
    #####: 8833:    void RunContext::handleIncomplete(
        -: 8834:            AssertionInfo const& info
        -: 8835:    ) {
    #####: 8836:        m_lastAssertionInfo = info;
        -: 8837:
    #####: 8838:        AssertionResultData data( ResultWas::ThrewException, LazyExpression( false ) );
    #####: 8839:        data.message = "Exception translation was disabled by CATCH_CONFIG_FAST_COMPILE";
    #####: 8840:        AssertionResult assertionResult{ info, data };
    #####: 8841:        assertionEnded( assertionResult );
    #####: 8842:    }
    #####: 8843:    void RunContext::handleNonExpr(
        -: 8844:            AssertionInfo const &info,
        -: 8845:            ResultWas::OfType resultType,
        -: 8846:            AssertionReaction &reaction
        -: 8847:    ) {
    #####: 8848:        m_lastAssertionInfo = info;
        -: 8849:
    #####: 8850:        AssertionResultData data( resultType, LazyExpression( false ) );
    #####: 8851:        AssertionResult assertionResult{ info, data };
    #####: 8852:        assertionEnded( assertionResult );
        -: 8853:
    #####: 8854:        if( !assertionResult.isOk() )
    #####: 8855:            populateReaction( reaction );
    #####: 8856:    }
        -: 8857:
    #####: 8858:    IResultCapture& getResultCapture() {
    #####: 8859:        if (auto* capture = getCurrentContext().getResultCapture())
    #####: 8860:            return *capture;
        -: 8861:        else
    #####: 8862:            CATCH_INTERNAL_ERROR("No result capture instance");
        -: 8863:    }
        -: 8864:}
        -: 8865:// end catch_run_context.cpp
        -: 8866:// start catch_section.cpp
        -: 8867:
        -: 8868:namespace Catch {
        -: 8869:
    #####: 8870:    Section::Section( SectionInfo const& info )
        -: 8871:    :   m_info( info ),
    #####: 8872:        m_sectionIncluded( getResultCapture().sectionStarted( m_info, m_assertions ) )
        -: 8873:    {
    #####: 8874:        m_timer.start();
    #####: 8875:    }
        -: 8876:
    #####: 8877:    Section::~Section() {
    #####: 8878:        if( m_sectionIncluded ) {
    #####: 8879:            SectionEndInfo endInfo( m_info, m_assertions, m_timer.getElapsedSeconds() );
    #####: 8880:            if( uncaught_exceptions() )
    #####: 8881:                getResultCapture().sectionEndedEarly( endInfo );
        -: 8882:            else
    #####: 8883:                getResultCapture().sectionEnded( endInfo );
        -: 8884:        }
    #####: 8885:    }
        -: 8886:
        -: 8887:    // This indicates whether the section should be executed or not
    #####: 8888:    Section::operator bool() const {
    #####: 8889:        return m_sectionIncluded;
        -: 8890:    }
        -: 8891:
        -: 8892:} // end namespace Catch
        -: 8893:// end catch_section.cpp
        -: 8894:// start catch_section_info.cpp
        -: 8895:
        -: 8896:namespace Catch {
        -: 8897:
    #####: 8898:    SectionInfo::SectionInfo
        -: 8899:        (   SourceLineInfo const& _lineInfo,
        -: 8900:            std::string const& _name,
    #####: 8901:            std::string const& _description )
        -: 8902:    :   name( _name ),
        -: 8903:        description( _description ),
    #####: 8904:        lineInfo( _lineInfo )
    #####: 8905:    {}
        -: 8906:
    #####: 8907:    SectionEndInfo::SectionEndInfo( SectionInfo const& _sectionInfo, Counts const& _prevAssertions, double _durationInSeconds )
    #####: 8908:    : sectionInfo( _sectionInfo ), prevAssertions( _prevAssertions ), durationInSeconds( _durationInSeconds )
    #####: 8909:    {}
        -: 8910:
        -: 8911:} // end namespace Catch
        -: 8912:// end catch_section_info.cpp
        -: 8913:// start catch_session.cpp
        -: 8914:
        -: 8915:// start catch_session.h
        -: 8916:
        -: 8917:#include <memory>
        -: 8918:
        -: 8919:namespace Catch {
        -: 8920:
        -: 8921:    class Session : NonCopyable {
        -: 8922:    public:
        -: 8923:
        -: 8924:        Session();
        -: 8925:        ~Session() override;
        -: 8926:
        -: 8927:        void showHelp() const;
        -: 8928:        void libIdentify();
        -: 8929:
        -: 8930:        int applyCommandLine( int argc, char const * const * argv );
        -: 8931:
        -: 8932:        void useConfigData( ConfigData const& configData );
        -: 8933:
        -: 8934:        int run( int argc, char* argv[] );
        -: 8935:    #if defined(CATCH_CONFIG_WCHAR) && defined(WIN32) && defined(UNICODE)
        -: 8936:        int run( int argc, wchar_t* const argv[] );
        -: 8937:    #endif
        -: 8938:        int run();
        -: 8939:
        -: 8940:        clara::Parser const& cli() const;
        -: 8941:        void cli( clara::Parser const& newParser );
        -: 8942:        ConfigData& configData();
        -: 8943:        Config& config();
        -: 8944:    private:
        -: 8945:        int runInternal();
        -: 8946:
        -: 8947:        clara::Parser m_cli;
        -: 8948:        ConfigData m_configData;
        -: 8949:        std::shared_ptr<Config> m_config;
        -: 8950:        bool m_startupExceptions = false;
        -: 8951:    };
        -: 8952:
        -: 8953:} // end namespace Catch
        -: 8954:
        -: 8955:// end catch_session.h
        -: 8956:// start catch_version.h
        -: 8957:
        -: 8958:#include <iosfwd>
        -: 8959:
        -: 8960:namespace Catch {
        -: 8961:
        -: 8962:    // Versioning information
        -: 8963:    struct Version {
        -: 8964:        Version( Version const& ) = delete;
        -: 8965:        Version& operator=( Version const& ) = delete;
        -: 8966:        Version(    unsigned int _majorVersion,
        -: 8967:                    unsigned int _minorVersion,
        -: 8968:                    unsigned int _patchNumber,
        -: 8969:                    char const * const _branchName,
        -: 8970:                    unsigned int _buildNumber );
        -: 8971:
        -: 8972:        unsigned int const majorVersion;
        -: 8973:        unsigned int const minorVersion;
        -: 8974:        unsigned int const patchNumber;
        -: 8975:
        -: 8976:        // buildNumber is only used if branchName is not null
        -: 8977:        char const * const branchName;
        -: 8978:        unsigned int const buildNumber;
        -: 8979:
        -: 8980:        friend std::ostream& operator << ( std::ostream& os, Version const& version );
        -: 8981:    };
        -: 8982:
        -: 8983:    Version const& libraryVersion();
        -: 8984:}
        -: 8985:
        -: 8986:// end catch_version.h
        -: 8987:#include <cstdlib>
        -: 8988:#include <iomanip>
        -: 8989:
        -: 8990:namespace Catch {
        -: 8991:
        -: 8992:    namespace {
        -: 8993:        const int MaxExitCode = 255;
        -: 8994:
    #####: 8995:        IStreamingReporterPtr createReporter(std::string const& reporterName, IConfigPtr const& config) {
    #####: 8996:            auto reporter = Catch::getRegistryHub().getReporterRegistry().create(reporterName, config);
    #####: 8997:            CATCH_ENFORCE(reporter, "No reporter registered with name: '" << reporterName << "'");
        -: 8998:
    #####: 8999:            return reporter;
        -: 9000:        }
        -: 9001:
        -: 9002:#ifndef CATCH_CONFIG_DEFAULT_REPORTER
        -: 9003:#define CATCH_CONFIG_DEFAULT_REPORTER "console"
        -: 9004:#endif
        -: 9005:
    #####: 9006:        IStreamingReporterPtr makeReporter(std::shared_ptr<Config> const& config) {
    #####: 9007:            auto const& reporterNames = config->getReporterNames();
    #####: 9008:            if (reporterNames.empty())
    #####: 9009:                return createReporter(CATCH_CONFIG_DEFAULT_REPORTER, config);
        -: 9010:
    #####: 9011:            IStreamingReporterPtr reporter;
    #####: 9012:            for (auto const& name : reporterNames)
    #####: 9013:                addReporter(reporter, createReporter(name, config));
    #####: 9014:            return reporter;
        -: 9015:        }
        -: 9016:
        -: 9017:#undef CATCH_CONFIG_DEFAULT_REPORTER
        -: 9018:
    #####: 9019:        void addListeners(IStreamingReporterPtr& reporters, IConfigPtr const& config) {
    #####: 9020:            auto const& listeners = Catch::getRegistryHub().getReporterRegistry().getListeners();
    #####: 9021:            for (auto const& listener : listeners)
    #####: 9022:                addReporter(reporters, listener->create(Catch::ReporterConfig(config)));
    #####: 9023:        }
        -: 9024:
    #####: 9025:        Catch::Totals runTests(std::shared_ptr<Config> const& config) {
    #####: 9026:            IStreamingReporterPtr reporter = makeReporter(config);
    #####: 9027:            addListeners(reporter, config);
        -: 9028:
    #####: 9029:            RunContext context(config, std::move(reporter));
        -: 9030:
    #####: 9031:            Totals totals;
        -: 9032:
    #####: 9033:            context.testGroupStarting(config->name(), 1, 1);
        -: 9034:
    #####: 9035:            TestSpec testSpec = config->testSpec();
        -: 9036:
    #####: 9037:            auto const& allTestCases = getAllTestCasesSorted(*config);
    #####: 9038:            for (auto const& testCase : allTestCases) {
    #####: 9039:                if (!context.aborting() && matchTest(testCase, testSpec, *config))
    #####: 9040:                    totals += context.runTest(testCase);
        -: 9041:                else
    #####: 9042:                    context.reporter().skipTest(testCase);
        -: 9043:            }
        -: 9044:
    #####: 9045:            if (config->warnAboutNoTests() && totals.testCases.total() == 0) {
    #####: 9046:                ReusableStringStream testConfig;
        -: 9047:
    #####: 9048:                bool first = true;
    #####: 9049:                for (const auto& input : config->getTestsOrTags()) {
    #####: 9050:                    if (!first) { testConfig << ' '; }
    #####: 9051:                    first = false;
    #####: 9052:                    testConfig << input;
        -: 9053:                }
        -: 9054:
    #####: 9055:                context.reporter().noMatchingTestCases(testConfig.str());
    #####: 9056:                totals.error = -1;
        -: 9057:            }
        -: 9058:
    #####: 9059:            context.testGroupEnded(config->name(), totals, 1, 1);
    #####: 9060:            return totals;
        -: 9061:        }
        -: 9062:
    #####: 9063:        void applyFilenamesAsTags(Catch::IConfig const& config) {
    #####: 9064:            auto& tests = const_cast<std::vector<TestCase>&>(getAllTestCasesSorted(config));
    #####: 9065:            for (auto& testCase : tests) {
    #####: 9066:                auto tags = testCase.tags;
        -: 9067:
    #####: 9068:                std::string filename = testCase.lineInfo.file;
    #####: 9069:                auto lastSlash = filename.find_last_of("\\/");
    #####: 9070:                if (lastSlash != std::string::npos) {
    #####: 9071:                    filename.erase(0, lastSlash);
    #####: 9072:                    filename[0] = '#';
        -: 9073:                }
        -: 9074:
    #####: 9075:                auto lastDot = filename.find_last_of('.');
    #####: 9076:                if (lastDot != std::string::npos) {
    #####: 9077:                    filename.erase(lastDot);
        -: 9078:                }
        -: 9079:
    #####: 9080:                tags.push_back(std::move(filename));
    #####: 9081:                setTags(testCase, tags);
        -: 9082:            }
    #####: 9083:        }
        -: 9084:
        -: 9085:    } // anon namespace
        -: 9086:
    #####: 9087:    Session::Session() {
        -: 9088:        static bool alreadyInstantiated = false;
    #####: 9089:        if( alreadyInstantiated ) {
    #####: 9090:            try         { CATCH_INTERNAL_ERROR( "Only one instance of Catch::Session can ever be used" ); }
    =====: 9091:            catch(...)  { getMutableRegistryHub().registerStartupException(); }
        -: 9092:        }
        -: 9093:
    #####: 9094:        const auto& exceptions = getRegistryHub().getStartupExceptionRegistry().getExceptions();
    #####: 9095:        if ( !exceptions.empty() ) {
    #####: 9096:            m_startupExceptions = true;
    #####: 9097:            Colour colourGuard( Colour::Red );
    #####: 9098:            Catch::cerr() << "Errors occurred during startup!" << '\n';
        -: 9099:            // iterate over all exceptions and notify user
    #####: 9100:            for ( const auto& ex_ptr : exceptions ) {
        -: 9101:                try {
    #####: 9102:                    std::rethrow_exception(ex_ptr);
    =====: 9103:                } catch ( std::exception const& ex ) {
    =====: 9104:                    Catch::cerr() << Column( ex.what() ).indent(2) << '\n';
        -: 9105:                }
        -: 9106:            }
        -: 9107:        }
        -: 9108:
    #####: 9109:        alreadyInstantiated = true;
    #####: 9110:        m_cli = makeCommandLineParser( m_configData );
    #####: 9111:    }
    #####: 9112:    Session::~Session() {
    #####: 9113:        Catch::cleanUp();
    #####: 9114:    }
        -: 9115:
    #####: 9116:    void Session::showHelp() const {
    #####: 9117:        Catch::cout()
    #####: 9118:                << "\nCatch v" << libraryVersion() << "\n"
    #####: 9119:                << m_cli << std::endl
    #####: 9120:                << "For more detailed usage please see the project docs\n" << std::endl;
    #####: 9121:    }
    #####: 9122:    void Session::libIdentify() {
    #####: 9123:        Catch::cout()
    #####: 9124:                << std::left << std::setw(16) << "description: " << "A Catch test executable\n"
    #####: 9125:                << std::left << std::setw(16) << "category: " << "testframework\n"
    #####: 9126:                << std::left << std::setw(16) << "framework: " << "Catch Test\n"
    #####: 9127:                << std::left << std::setw(16) << "version: " << libraryVersion() << std::endl;
    #####: 9128:    }
        -: 9129:
    #####: 9130:    int Session::applyCommandLine( int argc, char const * const * argv ) {
    #####: 9131:        if( m_startupExceptions )
    #####: 9132:            return 1;
        -: 9133:
    #####: 9134:        auto result = m_cli.parse( clara::Args( argc, argv ) );
    #####: 9135:        if( !result ) {
        -: 9136:            Catch::cerr()
    #####: 9137:                << Colour( Colour::Red )
    #####: 9138:                << "\nError(s) in input:\n"
    #####: 9139:                << Column( result.errorMessage() ).indent( 2 )
    #####: 9140:                << "\n\n";
    #####: 9141:            Catch::cerr() << "Run with -? for usage\n" << std::endl;
    #####: 9142:            return MaxExitCode;
        -: 9143:        }
        -: 9144:
    #####: 9145:        if( m_configData.showHelp )
    #####: 9146:            showHelp();
    #####: 9147:        if( m_configData.libIdentify )
    #####: 9148:            libIdentify();
    #####: 9149:        m_config.reset();
    #####: 9150:        return 0;
        -: 9151:    }
        -: 9152:
    #####: 9153:    void Session::useConfigData( ConfigData const& configData ) {
    #####: 9154:        m_configData = configData;
    #####: 9155:        m_config.reset();
    #####: 9156:    }
        -: 9157:
    #####: 9158:    int Session::run( int argc, char* argv[] ) {
    #####: 9159:        if( m_startupExceptions )
    #####: 9160:            return 1;
    #####: 9161:        int returnCode = applyCommandLine( argc, argv );
    #####: 9162:        if( returnCode == 0 )
    #####: 9163:            returnCode = run();
    #####: 9164:        return returnCode;
        -: 9165:    }
        -: 9166:
        -: 9167:#if defined(CATCH_CONFIG_WCHAR) && defined(WIN32) && defined(UNICODE)
        -: 9168:    int Session::run( int argc, wchar_t* const argv[] ) {
        -: 9169:
        -: 9170:        char **utf8Argv = new char *[ argc ];
        -: 9171:
        -: 9172:        for ( int i = 0; i < argc; ++i ) {
        -: 9173:            int bufSize = WideCharToMultiByte( CP_UTF8, 0, argv[i], -1, NULL, 0, NULL, NULL );
        -: 9174:
        -: 9175:            utf8Argv[ i ] = new char[ bufSize ];
        -: 9176:
        -: 9177:            WideCharToMultiByte( CP_UTF8, 0, argv[i], -1, utf8Argv[i], bufSize, NULL, NULL );
        -: 9178:        }
        -: 9179:
        -: 9180:        int returnCode = run( argc, utf8Argv );
        -: 9181:
        -: 9182:        for ( int i = 0; i < argc; ++i )
        -: 9183:            delete [] utf8Argv[ i ];
        -: 9184:
        -: 9185:        delete [] utf8Argv;
        -: 9186:
        -: 9187:        return returnCode;
        -: 9188:    }
        -: 9189:#endif
    #####: 9190:    int Session::run() {
    #####: 9191:        if( ( m_configData.waitForKeypress & WaitForKeypress::BeforeStart ) != 0 ) {
    #####: 9192:            Catch::cout() << "...waiting for enter/ return before starting" << std::endl;
    #####: 9193:            static_cast<void>(std::getchar());
        -: 9194:        }
    #####: 9195:        int exitCode = runInternal();
    #####: 9196:        if( ( m_configData.waitForKeypress & WaitForKeypress::BeforeExit ) != 0 ) {
    #####: 9197:            Catch::cout() << "...waiting for enter/ return before exiting, with code: " << exitCode << std::endl;
    #####: 9198:            static_cast<void>(std::getchar());
        -: 9199:        }
    #####: 9200:        return exitCode;
        -: 9201:    }
        -: 9202:
    #####: 9203:    clara::Parser const& Session::cli() const {
    #####: 9204:        return m_cli;
        -: 9205:    }
    #####: 9206:    void Session::cli( clara::Parser const& newParser ) {
    #####: 9207:        m_cli = newParser;
    #####: 9208:    }
    #####: 9209:    ConfigData& Session::configData() {
    #####: 9210:        return m_configData;
        -: 9211:    }
    #####: 9212:    Config& Session::config() {
    #####: 9213:        if( !m_config )
    #####: 9214:            m_config = std::make_shared<Config>( m_configData );
    #####: 9215:        return *m_config;
        -: 9216:    }
        -: 9217:
    #####: 9218:    int Session::runInternal() {
    #####: 9219:        if( m_startupExceptions )
    #####: 9220:            return 1;
        -: 9221:
    #####: 9222:        if( m_configData.showHelp || m_configData.libIdentify )
    #####: 9223:            return 0;
        -: 9224:
        -: 9225:        try
        -: 9226:        {
    #####: 9227:            config(); // Force config to be constructed
        -: 9228:
    #####: 9229:            seedRng( *m_config );
        -: 9230:
    #####: 9231:            if( m_configData.filenamesAsTags )
    #####: 9232:                applyFilenamesAsTags( *m_config );
        -: 9233:
        -: 9234:            // Handle list request
    #####: 9235:            if( Option<std::size_t> listed = list( config() ) )
    #####: 9236:                return static_cast<int>( *listed );
        -: 9237:
    #####: 9238:            auto totals = runTests( m_config );
        -: 9239:            // Note that on unices only the lower 8 bits are usually used, clamping
        -: 9240:            // the return value to 255 prevents false negative when some multiple
        -: 9241:            // of 256 tests has failed
    #####: 9242:            return (std::min) (MaxExitCode, (std::max) (totals.error, static_cast<int>(totals.assertions.failed)));
        -: 9243:        }
    =====: 9244:        catch( std::exception& ex ) {
    =====: 9245:            Catch::cerr() << ex.what() << std::endl;
    =====: 9246:            return MaxExitCode;
        -: 9247:        }
        -: 9248:    }
        -: 9249:
        -: 9250:} // end namespace Catch
        -: 9251:// end catch_session.cpp
        -: 9252:// start catch_startup_exception_registry.cpp
        -: 9253:
        -: 9254:namespace Catch {
    #####: 9255:    void StartupExceptionRegistry::add( std::exception_ptr const& exception ) noexcept {
        -: 9256:        try {
    #####: 9257:            m_exceptions.push_back(exception);
        -: 9258:        }
    =====: 9259:        catch(...) {
        -: 9260:            // If we run out of memory during start-up there's really not a lot more we can do about it
    =====: 9261:            std::terminate();
        -: 9262:        }
    #####: 9263:    }
        -: 9264:
    #####: 9265:    std::vector<std::exception_ptr> const& StartupExceptionRegistry::getExceptions() const noexcept {
    #####: 9266:        return m_exceptions;
        -: 9267:    }
        -: 9268:
        -: 9269:} // end namespace Catch
        -: 9270:// end catch_startup_exception_registry.cpp
        -: 9271:// start catch_stream.cpp
        -: 9272:
        -: 9273:#include <cstdio>
        -: 9274:#include <iostream>
        -: 9275:#include <fstream>
        -: 9276:#include <sstream>
        -: 9277:#include <vector>
        -: 9278:#include <memory>
        -: 9279:
        -: 9280:#if defined(__clang__)
        -: 9281:#    pragma clang diagnostic push
        -: 9282:#    pragma clang diagnostic ignored "-Wexit-time-destructors"
        -: 9283:#endif
        -: 9284:
        -: 9285:namespace Catch {
        -: 9286:
        -: 9287:    Catch::IStream::~IStream() = default;
        -: 9288:
        -: 9289:    namespace detail { namespace {
        -: 9290:        template<typename WriterF, std::size_t bufferSize=256>
        -: 9291:        class StreamBufImpl : public std::streambuf {
        -: 9292:            char data[bufferSize];
        -: 9293:            WriterF m_writer;
        -: 9294:
        -: 9295:        public:
    #####: 9296:            StreamBufImpl() {
    #####: 9297:                setp( data, data + sizeof(data) );
    #####: 9298:            }
        -: 9299:
    #####: 9300:            ~StreamBufImpl() noexcept {
    #####: 9301:                StreamBufImpl::sync();
    #####: 9302:            }
        -: 9303:
        -: 9304:        private:
    #####: 9305:            int overflow( int c ) override {
    #####: 9306:                sync();
        -: 9307:
    #####: 9308:                if( c != EOF ) {
    #####: 9309:                    if( pbase() == epptr() )
    #####: 9310:                        m_writer( std::string( 1, static_cast<char>( c ) ) );
        -: 9311:                    else
    #####: 9312:                        sputc( static_cast<char>( c ) );
        -: 9313:                }
    #####: 9314:                return 0;
        -: 9315:            }
        -: 9316:
    #####: 9317:            int sync() override {
    #####: 9318:                if( pbase() != pptr() ) {
    #####: 9319:                    m_writer( std::string( pbase(), static_cast<std::string::size_type>( pptr() - pbase() ) ) );
    #####: 9320:                    setp( pbase(), epptr() );
        -: 9321:                }
    #####: 9322:                return 0;
        -: 9323:            }
        -: 9324:        };
        -: 9325:
        -: 9326:        ///////////////////////////////////////////////////////////////////////////
        -: 9327:
        -: 9328:        struct OutputDebugWriter {
        -: 9329:
    #####: 9330:            void operator()( std::string const&str ) {
    #####: 9331:                writeToDebugConsole( str );
    #####: 9332:            }
        -: 9333:        };
        -: 9334:
        -: 9335:        ///////////////////////////////////////////////////////////////////////////
        -: 9336:
        -: 9337:        class FileStream : public IStream {
        -: 9338:            mutable std::ofstream m_ofs;
        -: 9339:        public:
    #####: 9340:            FileStream( StringRef filename ) {
    #####: 9341:                m_ofs.open( filename.c_str() );
    #####: 9342:                CATCH_ENFORCE( !m_ofs.fail(), "Unable to open file: '" << filename << "'" );
    #####: 9343:            }
    #####: 9344:            ~FileStream() override = default;
        -: 9345:        public: // IStream
    #####: 9346:            std::ostream& stream() const override {
    #####: 9347:                return m_ofs;
        -: 9348:            }
        -: 9349:        };
        -: 9350:
        -: 9351:        ///////////////////////////////////////////////////////////////////////////
        -: 9352:
        -: 9353:        class CoutStream : public IStream {
        -: 9354:            mutable std::ostream m_os;
        -: 9355:        public:
        -: 9356:            // Store the streambuf from cout up-front because
        -: 9357:            // cout may get redirected when running tests
    #####: 9358:            CoutStream() : m_os( Catch::cout().rdbuf() ) {}
    #####: 9359:            ~CoutStream() override = default;
        -: 9360:
        -: 9361:        public: // IStream
    #####: 9362:            std::ostream& stream() const override { return m_os; }
        -: 9363:        };
        -: 9364:
        -: 9365:        ///////////////////////////////////////////////////////////////////////////
        -: 9366:
        -: 9367:        class DebugOutStream : public IStream {
        -: 9368:            std::unique_ptr<StreamBufImpl<OutputDebugWriter>> m_streamBuf;
        -: 9369:            mutable std::ostream m_os;
        -: 9370:        public:
    #####: 9371:            DebugOutStream()
    #####: 9372:            :   m_streamBuf( new StreamBufImpl<OutputDebugWriter>() ),
    #####: 9373:                m_os( m_streamBuf.get() )
    #####: 9374:            {}
        -: 9375:
    #####: 9376:            ~DebugOutStream() override = default;
        -: 9377:
        -: 9378:        public: // IStream
    #####: 9379:            std::ostream& stream() const override { return m_os; }
        -: 9380:        };
        -: 9381:
        -: 9382:    }} // namespace anon::detail
        -: 9383:
        -: 9384:    ///////////////////////////////////////////////////////////////////////////
        -: 9385:
    #####: 9386:    auto makeStream( StringRef const &filename ) -> IStream const* {
    #####: 9387:        if( filename.empty() )
    #####: 9388:            return new detail::CoutStream();
    #####: 9389:        else if( filename[0] == '%' ) {
    #####: 9390:            if( filename == "%debug" )
    #####: 9391:                return new detail::DebugOutStream();
        -: 9392:            else
    #####: 9393:                CATCH_ERROR( "Unrecognised stream: '" << filename << "'" );
        -: 9394:        }
        -: 9395:        else
    #####: 9396:            return new detail::FileStream( filename );
        -: 9397:    }
        -: 9398:
        -: 9399:    // This class encapsulates the idea of a pool of ostringstreams that can be reused.
    #####: 9400:    struct StringStreams {
        -: 9401:        std::vector<std::unique_ptr<std::ostringstream>> m_streams;
        -: 9402:        std::vector<std::size_t> m_unused;
        -: 9403:        std::ostringstream m_referenceStream; // Used for copy state/ flags from
        -: 9404:        static StringStreams* s_instance;
        -: 9405:
    #####: 9406:        auto add() -> std::size_t {
    #####: 9407:            if( m_unused.empty() ) {
    #####: 9408:                m_streams.push_back( std::unique_ptr<std::ostringstream>( new std::ostringstream ) );
    #####: 9409:                return m_streams.size()-1;
        -: 9410:            }
        -: 9411:            else {
    #####: 9412:                auto index = m_unused.back();
    #####: 9413:                m_unused.pop_back();
    #####: 9414:                return index;
        -: 9415:            }
        -: 9416:        }
        -: 9417:
    #####: 9418:        void release( std::size_t index ) {
    #####: 9419:            m_streams[index]->copyfmt( m_referenceStream ); // Restore initial flags and other state
    #####: 9420:            m_unused.push_back(index);
    #####: 9421:        }
        -: 9422:
        -: 9423:        // !TBD: put in TLS
    #####: 9424:        static auto instance() -> StringStreams& {
    #####: 9425:            if( !s_instance )
    #####: 9426:                s_instance = new StringStreams();
    #####: 9427:            return *s_instance;
        -: 9428:        }
    #####: 9429:        static void cleanup() {
    #####: 9430:            delete s_instance;
    #####: 9431:            s_instance = nullptr;
    #####: 9432:        }
        -: 9433:    };
        -: 9434:
        -: 9435:    StringStreams* StringStreams::s_instance = nullptr;
        -: 9436:
    #####: 9437:    void ReusableStringStream::cleanup() {
    #####: 9438:        StringStreams::cleanup();
    #####: 9439:    }
        -: 9440:
    #####: 9441:    ReusableStringStream::ReusableStringStream()
    #####: 9442:    :   m_index( StringStreams::instance().add() ),
    #####: 9443:        m_oss( StringStreams::instance().m_streams[m_index].get() )
    #####: 9444:    {}
        -: 9445:
    #####: 9446:    ReusableStringStream::~ReusableStringStream() {
    #####: 9447:        static_cast<std::ostringstream*>( m_oss )->str("");
    #####: 9448:        m_oss->clear();
    #####: 9449:        StringStreams::instance().release( m_index );
    #####: 9450:    }
        -: 9451:
    #####: 9452:    auto ReusableStringStream::str() const -> std::string {
    #####: 9453:        return static_cast<std::ostringstream*>( m_oss )->str();
        -: 9454:    }
        -: 9455:
        -: 9456:    ///////////////////////////////////////////////////////////////////////////
        -: 9457:
        -: 9458:#ifndef CATCH_CONFIG_NOSTDOUT // If you #define this you must implement these functions
    #####: 9459:    std::ostream& cout() { return std::cout; }
    #####: 9460:    std::ostream& cerr() { return std::cerr; }
    #####: 9461:    std::ostream& clog() { return std::clog; }
        -: 9462:#endif
        -: 9463:}
        -: 9464:
        -: 9465:#if defined(__clang__)
        -: 9466:#    pragma clang diagnostic pop
        -: 9467:#endif
        -: 9468:// end catch_stream.cpp
        -: 9469:// start catch_string_manip.cpp
        -: 9470:
        -: 9471:#include <algorithm>
        -: 9472:#include <ostream>
        -: 9473:#include <cstring>
        -: 9474:#include <cctype>
        -: 9475:
        -: 9476:namespace Catch {
        -: 9477:
    #####: 9478:    bool startsWith( std::string const& s, std::string const& prefix ) {
    #####: 9479:        return s.size() >= prefix.size() && std::equal(prefix.begin(), prefix.end(), s.begin());
        -: 9480:    }
    #####: 9481:    bool startsWith( std::string const& s, char prefix ) {
    #####: 9482:        return !s.empty() && s[0] == prefix;
        -: 9483:    }
    #####: 9484:    bool endsWith( std::string const& s, std::string const& suffix ) {
    #####: 9485:        return s.size() >= suffix.size() && std::equal(suffix.rbegin(), suffix.rend(), s.rbegin());
        -: 9486:    }
    #####: 9487:    bool endsWith( std::string const& s, char suffix ) {
    #####: 9488:        return !s.empty() && s[s.size()-1] == suffix;
        -: 9489:    }
    #####: 9490:    bool contains( std::string const& s, std::string const& infix ) {
    #####: 9491:        return s.find( infix ) != std::string::npos;
        -: 9492:    }
    #####: 9493:    char toLowerCh(char c) {
    #####: 9494:        return static_cast<char>( std::tolower( c ) );
        -: 9495:    }
    #####: 9496:    void toLowerInPlace( std::string& s ) {
    #####: 9497:        std::transform( s.begin(), s.end(), s.begin(), toLowerCh );
    #####: 9498:    }
    #####: 9499:    std::string toLower( std::string const& s ) {
    #####: 9500:        std::string lc = s;
    #####: 9501:        toLowerInPlace( lc );
    #####: 9502:        return lc;
        -: 9503:    }
    #####: 9504:    std::string trim( std::string const& str ) {
        -: 9505:        static char const* whitespaceChars = "\n\r\t ";
    #####: 9506:        std::string::size_type start = str.find_first_not_of( whitespaceChars );
    #####: 9507:        std::string::size_type end = str.find_last_not_of( whitespaceChars );
        -: 9508:
    #####: 9509:        return start != std::string::npos ? str.substr( start, 1+end-start ) : std::string();
        -: 9510:    }
        -: 9511:
    #####: 9512:    bool replaceInPlace( std::string& str, std::string const& replaceThis, std::string const& withThis ) {
    #####: 9513:        bool replaced = false;
    #####: 9514:        std::size_t i = str.find( replaceThis );
    #####: 9515:        while( i != std::string::npos ) {
    #####: 9516:            replaced = true;
    #####: 9517:            str = str.substr( 0, i ) + withThis + str.substr( i+replaceThis.size() );
    #####: 9518:            if( i < str.size()-withThis.size() )
    #####: 9519:                i = str.find( replaceThis, i+withThis.size() );
        -: 9520:            else
    #####: 9521:                i = std::string::npos;
        -: 9522:        }
    #####: 9523:        return replaced;
        -: 9524:    }
        -: 9525:
    #####: 9526:    pluralise::pluralise( std::size_t count, std::string const& label )
        -: 9527:    :   m_count( count ),
    #####: 9528:        m_label( label )
    #####: 9529:    {}
        -: 9530:
    #####: 9531:    std::ostream& operator << ( std::ostream& os, pluralise const& pluraliser ) {
    #####: 9532:        os << pluraliser.m_count << ' ' << pluraliser.m_label;
    #####: 9533:        if( pluraliser.m_count != 1 )
    #####: 9534:            os << 's';
    #####: 9535:        return os;
        -: 9536:    }
        -: 9537:
        -: 9538:}
        -: 9539:// end catch_string_manip.cpp
        -: 9540:// start catch_stringref.cpp
        -: 9541:
        -: 9542:#if defined(__clang__)
        -: 9543:#    pragma clang diagnostic push
        -: 9544:#    pragma clang diagnostic ignored "-Wexit-time-destructors"
        -: 9545:#endif
        -: 9546:
        -: 9547:#include <ostream>
        -: 9548:#include <cstring>
        -: 9549:#include <cstdint>
        -: 9550:
        -: 9551:namespace {
        -: 9552:    const uint32_t byte_2_lead = 0xC0;
        -: 9553:    const uint32_t byte_3_lead = 0xE0;
        -: 9554:    const uint32_t byte_4_lead = 0xF0;
        -: 9555:}
        -: 9556:
        -: 9557:namespace Catch {
    #####: 9558:    StringRef::StringRef( char const* rawChars ) noexcept
    #####: 9559:    : StringRef( rawChars, static_cast<StringRef::size_type>(std::strlen(rawChars) ) )
    #####: 9560:    {}
        -: 9561:
    #####: 9562:    StringRef::operator std::string() const {
    #####: 9563:        return std::string( m_start, m_size );
        -: 9564:    }
        -: 9565:
    #####: 9566:    void StringRef::swap( StringRef& other ) noexcept {
    #####: 9567:        std::swap( m_start, other.m_start );
    #####: 9568:        std::swap( m_size, other.m_size );
    #####: 9569:        std::swap( m_data, other.m_data );
    #####: 9570:    }
        -: 9571:
    #####: 9572:    auto StringRef::c_str() const -> char const* {
    #####: 9573:        if( isSubstring() )
    #####: 9574:           const_cast<StringRef*>( this )->takeOwnership();
    #####: 9575:        return m_start;
        -: 9576:    }
    #####: 9577:    auto StringRef::currentData() const noexcept -> char const* {
    #####: 9578:        return m_start;
        -: 9579:    }
        -: 9580:
    #####: 9581:    auto StringRef::isOwned() const noexcept -> bool {
    #####: 9582:        return m_data != nullptr;
        -: 9583:    }
    #####: 9584:    auto StringRef::isSubstring() const noexcept -> bool {
    #####: 9585:        return m_start[m_size] != '\0';
        -: 9586:    }
        -: 9587:
    #####: 9588:    void StringRef::takeOwnership() {
    #####: 9589:        if( !isOwned() ) {
    #####: 9590:            m_data = new char[m_size+1];
    #####: 9591:            memcpy( m_data, m_start, m_size );
    #####: 9592:            m_data[m_size] = '\0';
    #####: 9593:            m_start = m_data;
        -: 9594:        }
    #####: 9595:    }
    #####: 9596:    auto StringRef::substr( size_type start, size_type size ) const noexcept -> StringRef {
    #####: 9597:        if( start < m_size )
    #####: 9598:            return StringRef( m_start+start, size );
        -: 9599:        else
    #####: 9600:            return StringRef();
        -: 9601:    }
    #####: 9602:    auto StringRef::operator == ( StringRef const& other ) const noexcept -> bool {
        -: 9603:        return
    #####: 9604:            size() == other.size() &&
    #####: 9605:            (std::strncmp( m_start, other.m_start, size() ) == 0);
        -: 9606:    }
    #####: 9607:    auto StringRef::operator != ( StringRef const& other ) const noexcept -> bool {
    #####: 9608:        return !operator==( other );
        -: 9609:    }
        -: 9610:
    #####: 9611:    auto StringRef::operator[](size_type index) const noexcept -> char {
    #####: 9612:        return m_start[index];
        -: 9613:    }
        -: 9614:
    #####: 9615:    auto StringRef::numberOfCharacters() const noexcept -> size_type {
    #####: 9616:        size_type noChars = m_size;
        -: 9617:        // Make adjustments for uft encodings
    #####: 9618:        for( size_type i=0; i < m_size; ++i ) {
    #####: 9619:            char c = m_start[i];
    #####: 9620:            if( ( c & byte_2_lead ) == byte_2_lead ) {
    #####: 9621:                noChars--;
    #####: 9622:                if (( c & byte_3_lead ) == byte_3_lead )
    #####: 9623:                    noChars--;
    #####: 9624:                if( ( c & byte_4_lead ) == byte_4_lead )
    #####: 9625:                    noChars--;
        -: 9626:            }
        -: 9627:        }
    #####: 9628:        return noChars;
        -: 9629:    }
        -: 9630:
    #####: 9631:    auto operator + ( StringRef const& lhs, StringRef const& rhs ) -> std::string {
    #####: 9632:        std::string str;
    #####: 9633:        str.reserve( lhs.size() + rhs.size() );
    #####: 9634:        str += lhs;
    #####: 9635:        str += rhs;
    #####: 9636:        return str;
        -: 9637:    }
    #####: 9638:    auto operator + ( StringRef const& lhs, const char* rhs ) -> std::string {
    #####: 9639:        return std::string( lhs ) + std::string( rhs );
        -: 9640:    }
    #####: 9641:    auto operator + ( char const* lhs, StringRef const& rhs ) -> std::string {
    #####: 9642:        return std::string( lhs ) + std::string( rhs );
        -: 9643:    }
        -: 9644:
    #####: 9645:    auto operator << ( std::ostream& os, StringRef const& str ) -> std::ostream& {
    #####: 9646:        return os.write(str.currentData(), str.size());
        -: 9647:    }
        -: 9648:
    #####: 9649:    auto operator+=( std::string& lhs, StringRef const& rhs ) -> std::string& {
    #####: 9650:        lhs.append(rhs.currentData(), rhs.size());
    #####: 9651:        return lhs;
        -: 9652:    }
        -: 9653:
        -: 9654:} // namespace Catch
        -: 9655:
        -: 9656:#if defined(__clang__)
        -: 9657:#    pragma clang diagnostic pop
        -: 9658:#endif
        -: 9659:// end catch_stringref.cpp
        -: 9660:// start catch_tag_alias.cpp
        -: 9661:
        -: 9662:namespace Catch {
    #####: 9663:    TagAlias::TagAlias(std::string const & _tag, SourceLineInfo _lineInfo): tag(_tag), lineInfo(_lineInfo) {}
        -: 9664:}
        -: 9665:// end catch_tag_alias.cpp
        -: 9666:// start catch_tag_alias_autoregistrar.cpp
        -: 9667:
        -: 9668:namespace Catch {
        -: 9669:
    #####: 9670:    RegistrarForTagAliases::RegistrarForTagAliases(char const* alias, char const* tag, SourceLineInfo const& lineInfo) {
        -: 9671:        try {
    #####: 9672:            getMutableRegistryHub().registerTagAlias(alias, tag, lineInfo);
    =====: 9673:        } catch (...) {
        -: 9674:            // Do not throw when constructing global objects, instead register the exception to be processed later
    =====: 9675:            getMutableRegistryHub().registerStartupException();
        -: 9676:        }
    #####: 9677:    }
        -: 9678:
        -: 9679:}
        -: 9680:// end catch_tag_alias_autoregistrar.cpp
        -: 9681:// start catch_tag_alias_registry.cpp
        -: 9682:
        -: 9683:#include <sstream>
        -: 9684:
        -: 9685:namespace Catch {
        -: 9686:
    #####: 9687:    TagAliasRegistry::~TagAliasRegistry() {}
        -: 9688:
    #####: 9689:    TagAlias const* TagAliasRegistry::find( std::string const& alias ) const {
    #####: 9690:        auto it = m_registry.find( alias );
    #####: 9691:        if( it != m_registry.end() )
    #####: 9692:            return &(it->second);
        -: 9693:        else
    #####: 9694:            return nullptr;
        -: 9695:    }
        -: 9696:
    #####: 9697:    std::string TagAliasRegistry::expandAliases( std::string const& unexpandedTestSpec ) const {
    #####: 9698:        std::string expandedTestSpec = unexpandedTestSpec;
    #####: 9699:        for( auto const& registryKvp : m_registry ) {
    #####: 9700:            std::size_t pos = expandedTestSpec.find( registryKvp.first );
    #####: 9701:            if( pos != std::string::npos ) {
    #####: 9702:                expandedTestSpec =  expandedTestSpec.substr( 0, pos ) +
    #####: 9703:                                    registryKvp.second.tag +
    #####: 9704:                                    expandedTestSpec.substr( pos + registryKvp.first.size() );
        -: 9705:            }
        -: 9706:        }
    #####: 9707:        return expandedTestSpec;
        -: 9708:    }
        -: 9709:
    #####: 9710:    void TagAliasRegistry::add( std::string const& alias, std::string const& tag, SourceLineInfo const& lineInfo ) {
    #####: 9711:        CATCH_ENFORCE( startsWith(alias, "[@") && endsWith(alias, ']'),
        -: 9712:                      "error: tag alias, '" << alias << "' is not of the form [@alias name].\n" << lineInfo );
        -: 9713:
    #####: 9714:        CATCH_ENFORCE( m_registry.insert(std::make_pair(alias, TagAlias(tag, lineInfo))).second,
        -: 9715:                      "error: tag alias, '" << alias << "' already registered.\n"
        -: 9716:                      << "\tFirst seen at: " << find(alias)->lineInfo << "\n"
        -: 9717:                      << "\tRedefined at: " << lineInfo );
    #####: 9718:    }
        -: 9719:
    #####: 9720:    ITagAliasRegistry::~ITagAliasRegistry() {}
        -: 9721:
    #####: 9722:    ITagAliasRegistry const& ITagAliasRegistry::get() {
    #####: 9723:        return getRegistryHub().getTagAliasRegistry();
        -: 9724:    }
        -: 9725:
        -: 9726:} // end namespace Catch
        -: 9727:// end catch_tag_alias_registry.cpp
        -: 9728:// start catch_test_case_info.cpp
        -: 9729:
        -: 9730:#include <cctype>
        -: 9731:#include <exception>
        -: 9732:#include <algorithm>
        -: 9733:#include <sstream>
        -: 9734:
        -: 9735:namespace Catch {
        -: 9736:
    #####: 9737:    TestCaseInfo::SpecialProperties parseSpecialTag( std::string const& tag ) {
    #####: 9738:        if( startsWith( tag, '.' ) ||
    #####: 9739:            tag == "!hide" )
    #####: 9740:            return TestCaseInfo::IsHidden;
    #####: 9741:        else if( tag == "!throws" )
    #####: 9742:            return TestCaseInfo::Throws;
    #####: 9743:        else if( tag == "!shouldfail" )
    #####: 9744:            return TestCaseInfo::ShouldFail;
    #####: 9745:        else if( tag == "!mayfail" )
    #####: 9746:            return TestCaseInfo::MayFail;
    #####: 9747:        else if( tag == "!nonportable" )
    #####: 9748:            return TestCaseInfo::NonPortable;
    #####: 9749:        else if( tag == "!benchmark" )
    #####: 9750:            return static_cast<TestCaseInfo::SpecialProperties>( TestCaseInfo::Benchmark | TestCaseInfo::IsHidden );
        -: 9751:        else
    #####: 9752:            return TestCaseInfo::None;
        -: 9753:    }
    #####: 9754:    bool isReservedTag( std::string const& tag ) {
    #####: 9755:        return parseSpecialTag( tag ) == TestCaseInfo::None && tag.size() > 0 && !std::isalnum( tag[0] );
        -: 9756:    }
    #####: 9757:    void enforceNotReservedTag( std::string const& tag, SourceLineInfo const& _lineInfo ) {
    #####: 9758:        CATCH_ENFORCE( !isReservedTag(tag),
        -: 9759:                      "Tag name: [" << tag << "] is not allowed.\n"
        -: 9760:                      << "Tag names starting with non alpha-numeric characters are reserved\n"
        -: 9761:                      << _lineInfo );
    #####: 9762:    }
        -: 9763:
    #####: 9764:    TestCase makeTestCase(  ITestInvoker* _testCase,
        -: 9765:                            std::string const& _className,
        -: 9766:                            NameAndTags const& nameAndTags,
        -: 9767:                            SourceLineInfo const& _lineInfo )
        -: 9768:    {
    #####: 9769:        bool isHidden = false;
        -: 9770:
        -: 9771:        // Parse out tags
    #####: 9772:        std::vector<std::string> tags;
    #####: 9773:        std::string desc, tag;
    #####: 9774:        bool inTag = false;
    #####: 9775:        std::string _descOrTags = nameAndTags.tags;
    #####: 9776:        for (char c : _descOrTags) {
    #####: 9777:            if( !inTag ) {
    #####: 9778:                if( c == '[' )
    #####: 9779:                    inTag = true;
        -: 9780:                else
    #####: 9781:                    desc += c;
        -: 9782:            }
        -: 9783:            else {
    #####: 9784:                if( c == ']' ) {
    #####: 9785:                    TestCaseInfo::SpecialProperties prop = parseSpecialTag( tag );
    #####: 9786:                    if( ( prop & TestCaseInfo::IsHidden ) != 0 )
    #####: 9787:                        isHidden = true;
    #####: 9788:                    else if( prop == TestCaseInfo::None )
    #####: 9789:                        enforceNotReservedTag( tag, _lineInfo );
        -: 9790:
    #####: 9791:                    tags.push_back( tag );
    #####: 9792:                    tag.clear();
    #####: 9793:                    inTag = false;
        -: 9794:                }
        -: 9795:                else
    #####: 9796:                    tag += c;
        -: 9797:            }
        -: 9798:        }
    #####: 9799:        if( isHidden ) {
    #####: 9800:            tags.push_back( "." );
        -: 9801:        }
        -: 9802:
    #####: 9803:        TestCaseInfo info( nameAndTags.name, _className, desc, tags, _lineInfo );
    #####: 9804:        return TestCase( _testCase, std::move(info) );
        -: 9805:    }
        -: 9806:
    #####: 9807:    void setTags( TestCaseInfo& testCaseInfo, std::vector<std::string> tags ) {
    #####: 9808:        std::sort(begin(tags), end(tags));
    #####: 9809:        tags.erase(std::unique(begin(tags), end(tags)), end(tags));
    #####: 9810:        testCaseInfo.lcaseTags.clear();
        -: 9811:
    #####: 9812:        for( auto const& tag : tags ) {
    #####: 9813:            std::string lcaseTag = toLower( tag );
    #####: 9814:            testCaseInfo.properties = static_cast<TestCaseInfo::SpecialProperties>( testCaseInfo.properties | parseSpecialTag( lcaseTag ) );
    #####: 9815:            testCaseInfo.lcaseTags.push_back( lcaseTag );
        -: 9816:        }
    #####: 9817:        testCaseInfo.tags = std::move(tags);
    #####: 9818:    }
        -: 9819:
    #####: 9820:    TestCaseInfo::TestCaseInfo( std::string const& _name,
        -: 9821:                                std::string const& _className,
        -: 9822:                                std::string const& _description,
        -: 9823:                                std::vector<std::string> const& _tags,
    #####: 9824:                                SourceLineInfo const& _lineInfo )
        -: 9825:    :   name( _name ),
        -: 9826:        className( _className ),
        -: 9827:        description( _description ),
        -: 9828:        lineInfo( _lineInfo ),
    #####: 9829:        properties( None )
        -: 9830:    {
    #####: 9831:        setTags( *this, _tags );
    #####: 9832:    }
        -: 9833:
    #####: 9834:    bool TestCaseInfo::isHidden() const {
    #####: 9835:        return ( properties & IsHidden ) != 0;
        -: 9836:    }
    #####: 9837:    bool TestCaseInfo::throws() const {
    #####: 9838:        return ( properties & Throws ) != 0;
        -: 9839:    }
    #####: 9840:    bool TestCaseInfo::okToFail() const {
    #####: 9841:        return ( properties & (ShouldFail | MayFail ) ) != 0;
        -: 9842:    }
    #####: 9843:    bool TestCaseInfo::expectedToFail() const {
    #####: 9844:        return ( properties & (ShouldFail ) ) != 0;
        -: 9845:    }
        -: 9846:
    #####: 9847:    std::string TestCaseInfo::tagsAsString() const {
    #####: 9848:        std::string ret;
        -: 9849:        // '[' and ']' per tag
    #####: 9850:        std::size_t full_size = 2 * tags.size();
    #####: 9851:        for (const auto& tag : tags) {
    #####: 9852:            full_size += tag.size();
        -: 9853:        }
    #####: 9854:        ret.reserve(full_size);
    #####: 9855:        for (const auto& tag : tags) {
    #####: 9856:            ret.push_back('[');
    #####: 9857:            ret.append(tag);
    #####: 9858:            ret.push_back(']');
        -: 9859:        }
        -: 9860:
    #####: 9861:        return ret;
        -: 9862:    }
        -: 9863:
    #####: 9864:    TestCase::TestCase( ITestInvoker* testCase, TestCaseInfo&& info ) : TestCaseInfo( std::move(info) ), test( testCase ) {}
        -: 9865:
    #####: 9866:    TestCase TestCase::withName( std::string const& _newName ) const {
    #####: 9867:        TestCase other( *this );
    #####: 9868:        other.name = _newName;
    #####: 9869:        return other;
        -: 9870:    }
        -: 9871:
    #####: 9872:    void TestCase::invoke() const {
    #####: 9873:        test->invoke();
    #####: 9874:    }
        -: 9875:
    #####: 9876:    bool TestCase::operator == ( TestCase const& other ) const {
    #####: 9877:        return  test.get() == other.test.get() &&
    #####: 9878:                name == other.name &&
    #####: 9879:                className == other.className;
        -: 9880:    }
        -: 9881:
    #####: 9882:    bool TestCase::operator < ( TestCase const& other ) const {
    #####: 9883:        return name < other.name;
        -: 9884:    }
        -: 9885:
    #####: 9886:    TestCaseInfo const& TestCase::getTestCaseInfo() const
        -: 9887:    {
    #####: 9888:        return *this;
        -: 9889:    }
        -: 9890:
        -: 9891:} // end namespace Catch
        -: 9892:// end catch_test_case_info.cpp
        -: 9893:// start catch_test_case_registry_impl.cpp
        -: 9894:
        -: 9895:#include <sstream>
        -: 9896:
        -: 9897:namespace Catch {
        -: 9898:
    #####: 9899:    std::vector<TestCase> sortTests( IConfig const& config, std::vector<TestCase> const& unsortedTestCases ) {
        -: 9900:
    #####: 9901:        std::vector<TestCase> sorted = unsortedTestCases;
        -: 9902:
    #####: 9903:        switch( config.runOrder() ) {
        -: 9904:            case RunTests::InLexicographicalOrder:
    #####: 9905:                std::sort( sorted.begin(), sorted.end() );
    #####: 9906:                break;
        -: 9907:            case RunTests::InRandomOrder:
    #####: 9908:                seedRng( config );
    #####: 9909:                RandomNumberGenerator::shuffle( sorted );
    #####: 9910:                break;
        -: 9911:            case RunTests::InDeclarationOrder:
        -: 9912:                // already in declaration order
    #####: 9913:                break;
        -: 9914:        }
    #####: 9915:        return sorted;
        -: 9916:    }
    #####: 9917:    bool matchTest( TestCase const& testCase, TestSpec const& testSpec, IConfig const& config ) {
    #####: 9918:        return testSpec.matches( testCase ) && ( config.allowThrows() || !testCase.throws() );
        -: 9919:    }
        -: 9920:
    #####: 9921:    void enforceNoDuplicateTestCases( std::vector<TestCase> const& functions ) {
    #####: 9922:        std::set<TestCase> seenFunctions;
    #####: 9923:        for( auto const& function : functions ) {
    #####: 9924:            auto prev = seenFunctions.insert( function );
    #####: 9925:            CATCH_ENFORCE( prev.second,
        -: 9926:                    "error: TEST_CASE( \"" << function.name << "\" ) already defined.\n"
        -: 9927:                    << "\tFirst seen at " << prev.first->getTestCaseInfo().lineInfo << "\n"
        -: 9928:                    << "\tRedefined at " << function.getTestCaseInfo().lineInfo );
        -: 9929:        }
    #####: 9930:    }
        -: 9931:
    #####: 9932:    std::vector<TestCase> filterTests( std::vector<TestCase> const& testCases, TestSpec const& testSpec, IConfig const& config ) {
    #####: 9933:        std::vector<TestCase> filtered;
    #####: 9934:        filtered.reserve( testCases.size() );
    #####: 9935:        for( auto const& testCase : testCases )
    #####: 9936:            if( matchTest( testCase, testSpec, config ) )
    #####: 9937:                filtered.push_back( testCase );
    #####: 9938:        return filtered;
        -: 9939:    }
    #####: 9940:    std::vector<TestCase> const& getAllTestCasesSorted( IConfig const& config ) {
    #####: 9941:        return getRegistryHub().getTestCaseRegistry().getAllTestsSorted( config );
        -: 9942:    }
        -: 9943:
    #####: 9944:    void TestRegistry::registerTest( TestCase const& testCase ) {
    #####: 9945:        std::string name = testCase.getTestCaseInfo().name;
    #####: 9946:        if( name.empty() ) {
    #####: 9947:            ReusableStringStream rss;
    #####: 9948:            rss << "Anonymous test case " << ++m_unnamedCount;
    #####: 9949:            return registerTest( testCase.withName( rss.str() ) );
        -: 9950:        }
    #####: 9951:        m_functions.push_back( testCase );
        -: 9952:    }
        -: 9953:
    #####: 9954:    std::vector<TestCase> const& TestRegistry::getAllTests() const {
    #####: 9955:        return m_functions;
        -: 9956:    }
    #####: 9957:    std::vector<TestCase> const& TestRegistry::getAllTestsSorted( IConfig const& config ) const {
    #####: 9958:        if( m_sortedFunctions.empty() )
    #####: 9959:            enforceNoDuplicateTestCases( m_functions );
        -: 9960:
    #####: 9961:        if(  m_currentSortOrder != config.runOrder() || m_sortedFunctions.empty() ) {
    #####: 9962:            m_sortedFunctions = sortTests( config, m_functions );
    #####: 9963:            m_currentSortOrder = config.runOrder();
        -: 9964:        }
    #####: 9965:        return m_sortedFunctions;
        -: 9966:    }
        -: 9967:
        -: 9968:    ///////////////////////////////////////////////////////////////////////////
    #####: 9969:    TestInvokerAsFunction::TestInvokerAsFunction( void(*testAsFunction)() ) noexcept : m_testAsFunction( testAsFunction ) {}
        -: 9970:
    #####: 9971:    void TestInvokerAsFunction::invoke() const {
    #####: 9972:        m_testAsFunction();
    #####: 9973:    }
        -: 9974:
    #####: 9975:    std::string extractClassName( StringRef const& classOrQualifiedMethodName ) {
    #####: 9976:        std::string className = classOrQualifiedMethodName;
    #####: 9977:        if( startsWith( className, '&' ) )
        -: 9978:        {
    #####: 9979:            std::size_t lastColons = className.rfind( "::" );
    #####: 9980:            std::size_t penultimateColons = className.rfind( "::", lastColons-1 );
    #####: 9981:            if( penultimateColons == std::string::npos )
    #####: 9982:                penultimateColons = 1;
    #####: 9983:            className = className.substr( penultimateColons, lastColons-penultimateColons );
        -: 9984:        }
    #####: 9985:        return className;
        -: 9986:    }
        -: 9987:
        -: 9988:} // end namespace Catch
        -: 9989:// end catch_test_case_registry_impl.cpp
        -: 9990:// start catch_test_case_tracker.cpp
        -: 9991:
        -: 9992:#include <algorithm>
        -: 9993:#include <assert.h>
        -: 9994:#include <stdexcept>
        -: 9995:#include <memory>
        -: 9996:#include <sstream>
        -: 9997:
        -: 9998:#if defined(__clang__)
        -: 9999:#    pragma clang diagnostic push
        -:10000:#    pragma clang diagnostic ignored "-Wexit-time-destructors"
        -:10001:#endif
        -:10002:
        -:10003:namespace Catch {
        -:10004:namespace TestCaseTracking {
        -:10005:
    #####:10006:    NameAndLocation::NameAndLocation( std::string const& _name, SourceLineInfo const& _location )
        -:10007:    :   name( _name ),
    #####:10008:        location( _location )
    #####:10009:    {}
        -:10010:
        -:10011:    ITracker::~ITracker() = default;
        -:10012:
    #####:10013:    TrackerContext& TrackerContext::instance() {
    #####:10014:        static TrackerContext s_instance;
    #####:10015:        return s_instance;
        -:10016:    }
        -:10017:
    #####:10018:    ITracker& TrackerContext::startRun() {
    #####:10019:        m_rootTracker = std::make_shared<SectionTracker>( NameAndLocation( "{root}", CATCH_INTERNAL_LINEINFO ), *this, nullptr );
    #####:10020:        m_currentTracker = nullptr;
    #####:10021:        m_runState = Executing;
    #####:10022:        return *m_rootTracker;
        -:10023:    }
        -:10024:
    #####:10025:    void TrackerContext::endRun() {
    #####:10026:        m_rootTracker.reset();
    #####:10027:        m_currentTracker = nullptr;
    #####:10028:        m_runState = NotStarted;
    #####:10029:    }
        -:10030:
    #####:10031:    void TrackerContext::startCycle() {
    #####:10032:        m_currentTracker = m_rootTracker.get();
    #####:10033:        m_runState = Executing;
    #####:10034:    }
    #####:10035:    void TrackerContext::completeCycle() {
    #####:10036:        m_runState = CompletedCycle;
    #####:10037:    }
        -:10038:
    #####:10039:    bool TrackerContext::completedCycle() const {
    #####:10040:        return m_runState == CompletedCycle;
        -:10041:    }
    #####:10042:    ITracker& TrackerContext::currentTracker() {
    #####:10043:        return *m_currentTracker;
        -:10044:    }
    #####:10045:    void TrackerContext::setCurrentTracker( ITracker* tracker ) {
    #####:10046:        m_currentTracker = tracker;
    #####:10047:    }
        -:10048:
    #####:10049:    TrackerBase::TrackerHasName::TrackerHasName( NameAndLocation const& nameAndLocation ) : m_nameAndLocation( nameAndLocation ) {}
    #####:10050:    bool TrackerBase::TrackerHasName::operator ()( ITrackerPtr const& tracker ) const {
        -:10051:        return
    #####:10052:            tracker->nameAndLocation().name == m_nameAndLocation.name &&
    #####:10053:            tracker->nameAndLocation().location == m_nameAndLocation.location;
        -:10054:    }
        -:10055:
    #####:10056:    TrackerBase::TrackerBase( NameAndLocation const& nameAndLocation, TrackerContext& ctx, ITracker* parent )
        -:10057:    :   m_nameAndLocation( nameAndLocation ),
        -:10058:        m_ctx( ctx ),
    #####:10059:        m_parent( parent )
    #####:10060:    {}
        -:10061:
    #####:10062:    NameAndLocation const& TrackerBase::nameAndLocation() const {
    #####:10063:        return m_nameAndLocation;
        -:10064:    }
    #####:10065:    bool TrackerBase::isComplete() const {
    #####:10066:        return m_runState == CompletedSuccessfully || m_runState == Failed;
        -:10067:    }
    #####:10068:    bool TrackerBase::isSuccessfullyCompleted() const {
    #####:10069:        return m_runState == CompletedSuccessfully;
        -:10070:    }
    #####:10071:    bool TrackerBase::isOpen() const {
    #####:10072:        return m_runState != NotStarted && !isComplete();
        -:10073:    }
    #####:10074:    bool TrackerBase::hasChildren() const {
    #####:10075:        return !m_children.empty();
        -:10076:    }
        -:10077:
    #####:10078:    void TrackerBase::addChild( ITrackerPtr const& child ) {
    #####:10079:        m_children.push_back( child );
    #####:10080:    }
        -:10081:
    #####:10082:    ITrackerPtr TrackerBase::findChild( NameAndLocation const& nameAndLocation ) {
    #####:10083:        auto it = std::find_if( m_children.begin(), m_children.end(), TrackerHasName( nameAndLocation ) );
    #####:10084:        return( it != m_children.end() )
    #####:10085:            ? *it
    #####:10086:            : nullptr;
        -:10087:    }
    #####:10088:    ITracker& TrackerBase::parent() {
    #####:10089:        assert( m_parent ); // Should always be non-null except for root
    #####:10090:        return *m_parent;
        -:10091:    }
        -:10092:
    #####:10093:    void TrackerBase::openChild() {
    #####:10094:        if( m_runState != ExecutingChildren ) {
    #####:10095:            m_runState = ExecutingChildren;
    #####:10096:            if( m_parent )
    #####:10097:                m_parent->openChild();
        -:10098:        }
    #####:10099:    }
        -:10100:
    #####:10101:    bool TrackerBase::isSectionTracker() const { return false; }
    #####:10102:    bool TrackerBase::isIndexTracker() const { return false; }
        -:10103:
    #####:10104:    void TrackerBase::open() {
    #####:10105:        m_runState = Executing;
    #####:10106:        moveToThis();
    #####:10107:        if( m_parent )
    #####:10108:            m_parent->openChild();
    #####:10109:    }
        -:10110:
    #####:10111:    void TrackerBase::close() {
        -:10112:
        -:10113:        // Close any still open children (e.g. generators)
    #####:10114:        while( &m_ctx.currentTracker() != this )
    #####:10115:            m_ctx.currentTracker().close();
        -:10116:
    #####:10117:        switch( m_runState ) {
        -:10118:            case NeedsAnotherRun:
    #####:10119:                break;
        -:10120:
        -:10121:            case Executing:
    #####:10122:                m_runState = CompletedSuccessfully;
    #####:10123:                break;
        -:10124:            case ExecutingChildren:
    #####:10125:                if( m_children.empty() || m_children.back()->isComplete() )
    #####:10126:                    m_runState = CompletedSuccessfully;
    #####:10127:                break;
        -:10128:
        -:10129:            case NotStarted:
        -:10130:            case CompletedSuccessfully:
        -:10131:            case Failed:
    #####:10132:                CATCH_INTERNAL_ERROR( "Illogical state: " << m_runState );
        -:10133:
        -:10134:            default:
    #####:10135:                CATCH_INTERNAL_ERROR( "Unknown state: " << m_runState );
        -:10136:        }
    #####:10137:        moveToParent();
    #####:10138:        m_ctx.completeCycle();
    #####:10139:    }
    #####:10140:    void TrackerBase::fail() {
    #####:10141:        m_runState = Failed;
    #####:10142:        if( m_parent )
    #####:10143:            m_parent->markAsNeedingAnotherRun();
    #####:10144:        moveToParent();
    #####:10145:        m_ctx.completeCycle();
    #####:10146:    }
    #####:10147:    void TrackerBase::markAsNeedingAnotherRun() {
    #####:10148:        m_runState = NeedsAnotherRun;
    #####:10149:    }
        -:10150:
    #####:10151:    void TrackerBase::moveToParent() {
    #####:10152:        assert( m_parent );
    #####:10153:        m_ctx.setCurrentTracker( m_parent );
    #####:10154:    }
    #####:10155:    void TrackerBase::moveToThis() {
    #####:10156:        m_ctx.setCurrentTracker( this );
    #####:10157:    }
        -:10158:
    #####:10159:    SectionTracker::SectionTracker( NameAndLocation const& nameAndLocation, TrackerContext& ctx, ITracker* parent )
    #####:10160:    :   TrackerBase( nameAndLocation, ctx, parent )
        -:10161:    {
    #####:10162:        if( parent ) {
    #####:10163:            while( !parent->isSectionTracker() )
    #####:10164:                parent = &parent->parent();
        -:10165:
    #####:10166:            SectionTracker& parentSection = static_cast<SectionTracker&>( *parent );
    #####:10167:            addNextFilters( parentSection.m_filters );
        -:10168:        }
    #####:10169:    }
        -:10170:
    #####:10171:    bool SectionTracker::isSectionTracker() const { return true; }
        -:10172:
    #####:10173:    SectionTracker& SectionTracker::acquire( TrackerContext& ctx, NameAndLocation const& nameAndLocation ) {
    #####:10174:        std::shared_ptr<SectionTracker> section;
        -:10175:
    #####:10176:        ITracker& currentTracker = ctx.currentTracker();
    #####:10177:        if( ITrackerPtr childTracker = currentTracker.findChild( nameAndLocation ) ) {
    #####:10178:            assert( childTracker );
    #####:10179:            assert( childTracker->isSectionTracker() );
    #####:10180:            section = std::static_pointer_cast<SectionTracker>( childTracker );
        -:10181:        }
        -:10182:        else {
    #####:10183:            section = std::make_shared<SectionTracker>( nameAndLocation, ctx, &currentTracker );
    #####:10184:            currentTracker.addChild( section );
        -:10185:        }
    #####:10186:        if( !ctx.completedCycle() )
    #####:10187:            section->tryOpen();
    #####:10188:        return *section;
        -:10189:    }
        -:10190:
    #####:10191:    void SectionTracker::tryOpen() {
    #####:10192:        if( !isComplete() && (m_filters.empty() || m_filters[0].empty() ||  m_filters[0] == m_nameAndLocation.name ) )
    #####:10193:            open();
    #####:10194:    }
        -:10195:
    #####:10196:    void SectionTracker::addInitialFilters( std::vector<std::string> const& filters ) {
    #####:10197:        if( !filters.empty() ) {
    #####:10198:            m_filters.push_back(""); // Root - should never be consulted
    #####:10199:            m_filters.push_back(""); // Test Case - not a section filter
    #####:10200:            m_filters.insert( m_filters.end(), filters.begin(), filters.end() );
        -:10201:        }
    #####:10202:    }
    #####:10203:    void SectionTracker::addNextFilters( std::vector<std::string> const& filters ) {
    #####:10204:        if( filters.size() > 1 )
    #####:10205:            m_filters.insert( m_filters.end(), ++filters.begin(), filters.end() );
    #####:10206:    }
        -:10207:
    #####:10208:    IndexTracker::IndexTracker( NameAndLocation const& nameAndLocation, TrackerContext& ctx, ITracker* parent, int size )
        -:10209:    :   TrackerBase( nameAndLocation, ctx, parent ),
    #####:10210:        m_size( size )
    #####:10211:    {}
        -:10212:
    #####:10213:    bool IndexTracker::isIndexTracker() const { return true; }
        -:10214:
    #####:10215:    IndexTracker& IndexTracker::acquire( TrackerContext& ctx, NameAndLocation const& nameAndLocation, int size ) {
    #####:10216:        std::shared_ptr<IndexTracker> tracker;
        -:10217:
    #####:10218:        ITracker& currentTracker = ctx.currentTracker();
    #####:10219:        if( ITrackerPtr childTracker = currentTracker.findChild( nameAndLocation ) ) {
    #####:10220:            assert( childTracker );
    #####:10221:            assert( childTracker->isIndexTracker() );
    #####:10222:            tracker = std::static_pointer_cast<IndexTracker>( childTracker );
        -:10223:        }
        -:10224:        else {
    #####:10225:            tracker = std::make_shared<IndexTracker>( nameAndLocation, ctx, &currentTracker, size );
    #####:10226:            currentTracker.addChild( tracker );
        -:10227:        }
        -:10228:
    #####:10229:        if( !ctx.completedCycle() && !tracker->isComplete() ) {
    #####:10230:            if( tracker->m_runState != ExecutingChildren && tracker->m_runState != NeedsAnotherRun )
    #####:10231:                tracker->moveNext();
    #####:10232:            tracker->open();
        -:10233:        }
        -:10234:
    #####:10235:        return *tracker;
        -:10236:    }
        -:10237:
    #####:10238:    int IndexTracker::index() const { return m_index; }
        -:10239:
    #####:10240:    void IndexTracker::moveNext() {
    #####:10241:        m_index++;
    #####:10242:        m_children.clear();
    #####:10243:    }
        -:10244:
    #####:10245:    void IndexTracker::close() {
    #####:10246:        TrackerBase::close();
    #####:10247:        if( m_runState == CompletedSuccessfully && m_index < m_size-1 )
    #####:10248:            m_runState = Executing;
    #####:10249:    }
        -:10250:
        -:10251:} // namespace TestCaseTracking
        -:10252:
        -:10253:using TestCaseTracking::ITracker;
        -:10254:using TestCaseTracking::TrackerContext;
        -:10255:using TestCaseTracking::SectionTracker;
        -:10256:using TestCaseTracking::IndexTracker;
        -:10257:
        -:10258:} // namespace Catch
        -:10259:
        -:10260:#if defined(__clang__)
        -:10261:#    pragma clang diagnostic pop
        -:10262:#endif
        -:10263:// end catch_test_case_tracker.cpp
        -:10264:// start catch_test_registry.cpp
        -:10265:
        -:10266:namespace Catch {
        -:10267:
    #####:10268:    auto makeTestInvoker( void(*testAsFunction)() ) noexcept -> ITestInvoker* {
    #####:10269:        return new(std::nothrow) TestInvokerAsFunction( testAsFunction );
        -:10270:    }
        -:10271:
    #####:10272:    NameAndTags::NameAndTags( StringRef const& name_ , StringRef const& tags_ ) noexcept : name( name_ ), tags( tags_ ) {}
        -:10273:
    #####:10274:    AutoReg::AutoReg( ITestInvoker* invoker, SourceLineInfo const& lineInfo, StringRef const& classOrMethod, NameAndTags const& nameAndTags ) noexcept {
        -:10275:        try {
    #####:10276:            getMutableRegistryHub()
        -:10277:                    .registerTest(
    #####:10278:                        makeTestCase(
        -:10279:                            invoker,
    #####:10280:                            extractClassName( classOrMethod ),
        -:10281:                            nameAndTags,
    #####:10282:                            lineInfo));
    =====:10283:        } catch (...) {
        -:10284:            // Do not throw when constructing global objects, instead register the exception to be processed later
    =====:10285:            getMutableRegistryHub().registerStartupException();
        -:10286:        }
    #####:10287:    }
        -:10288:
        -:10289:    AutoReg::~AutoReg() = default;
        -:10290:}
        -:10291:// end catch_test_registry.cpp
        -:10292:// start catch_test_spec.cpp
        -:10293:
        -:10294:#include <algorithm>
        -:10295:#include <string>
        -:10296:#include <vector>
        -:10297:#include <memory>
        -:10298:
        -:10299:namespace Catch {
        -:10300:
        -:10301:    TestSpec::Pattern::~Pattern() = default;
        -:10302:    TestSpec::NamePattern::~NamePattern() = default;
        -:10303:    TestSpec::TagPattern::~TagPattern() = default;
        -:10304:    TestSpec::ExcludedPattern::~ExcludedPattern() = default;
        -:10305:
    #####:10306:    TestSpec::NamePattern::NamePattern( std::string const& name )
    #####:10307:    : m_wildcardPattern( toLower( name ), CaseSensitive::No )
    #####:10308:    {}
    #####:10309:    bool TestSpec::NamePattern::matches( TestCaseInfo const& testCase ) const {
    #####:10310:        return m_wildcardPattern.matches( toLower( testCase.name ) );
        -:10311:    }
        -:10312:
    #####:10313:    TestSpec::TagPattern::TagPattern( std::string const& tag ) : m_tag( toLower( tag ) ) {}
    #####:10314:    bool TestSpec::TagPattern::matches( TestCaseInfo const& testCase ) const {
    #####:10315:        return std::find(begin(testCase.lcaseTags),
        -:10316:                         end(testCase.lcaseTags),
    #####:10317:                         m_tag) != end(testCase.lcaseTags);
        -:10318:    }
        -:10319:
    #####:10320:    TestSpec::ExcludedPattern::ExcludedPattern( PatternPtr const& underlyingPattern ) : m_underlyingPattern( underlyingPattern ) {}
    #####:10321:    bool TestSpec::ExcludedPattern::matches( TestCaseInfo const& testCase ) const { return !m_underlyingPattern->matches( testCase ); }
        -:10322:
    #####:10323:    bool TestSpec::Filter::matches( TestCaseInfo const& testCase ) const {
        -:10324:        // All patterns in a filter must match for the filter to be a match
    #####:10325:        for( auto const& pattern : m_patterns ) {
    #####:10326:            if( !pattern->matches( testCase ) )
    #####:10327:                return false;
        -:10328:        }
    #####:10329:        return true;
        -:10330:    }
        -:10331:
    #####:10332:    bool TestSpec::hasFilters() const {
    #####:10333:        return !m_filters.empty();
        -:10334:    }
    #####:10335:    bool TestSpec::matches( TestCaseInfo const& testCase ) const {
        -:10336:        // A TestSpec matches if any filter matches
    #####:10337:        for( auto const& filter : m_filters )
    #####:10338:            if( filter.matches( testCase ) )
    #####:10339:                return true;
    #####:10340:        return false;
        -:10341:    }
        -:10342:}
        -:10343:// end catch_test_spec.cpp
        -:10344:// start catch_test_spec_parser.cpp
        -:10345:
        -:10346:namespace Catch {
        -:10347:
    #####:10348:    TestSpecParser::TestSpecParser( ITagAliasRegistry const& tagAliases ) : m_tagAliases( &tagAliases ) {}
        -:10349:
    #####:10350:    TestSpecParser& TestSpecParser::parse( std::string const& arg ) {
    #####:10351:        m_mode = None;
    #####:10352:        m_exclusion = false;
    #####:10353:        m_start = std::string::npos;
    #####:10354:        m_arg = m_tagAliases->expandAliases( arg );
    #####:10355:        m_escapeChars.clear();
    #####:10356:        for( m_pos = 0; m_pos < m_arg.size(); ++m_pos )
    #####:10357:            visitChar( m_arg[m_pos] );
    #####:10358:        if( m_mode == Name )
    #####:10359:            addPattern<TestSpec::NamePattern>();
    #####:10360:        return *this;
        -:10361:    }
    #####:10362:    TestSpec TestSpecParser::testSpec() {
    #####:10363:        addFilter();
    #####:10364:        return m_testSpec;
        -:10365:    }
        -:10366:
    #####:10367:    void TestSpecParser::visitChar( char c ) {
    #####:10368:        if( m_mode == None ) {
    #####:10369:            switch( c ) {
    #####:10370:            case ' ': return;
    #####:10371:            case '~': m_exclusion = true; return;
    #####:10372:            case '[': return startNewMode( Tag, ++m_pos );
    #####:10373:            case '"': return startNewMode( QuotedName, ++m_pos );
    #####:10374:            case '\\': return escape();
    #####:10375:            default: startNewMode( Name, m_pos ); break;
        -:10376:            }
        -:10377:        }
    #####:10378:        if( m_mode == Name ) {
    #####:10379:            if( c == ',' ) {
    #####:10380:                addPattern<TestSpec::NamePattern>();
    #####:10381:                addFilter();
        -:10382:            }
    #####:10383:            else if( c == '[' ) {
    #####:10384:                if( subString() == "exclude:" )
    #####:10385:                    m_exclusion = true;
        -:10386:                else
    #####:10387:                    addPattern<TestSpec::NamePattern>();
    #####:10388:                startNewMode( Tag, ++m_pos );
        -:10389:            }
    #####:10390:            else if( c == '\\' )
    #####:10391:                escape();
        -:10392:        }
    #####:10393:        else if( m_mode == EscapedName )
    #####:10394:            m_mode = Name;
    #####:10395:        else if( m_mode == QuotedName && c == '"' )
    #####:10396:            addPattern<TestSpec::NamePattern>();
    #####:10397:        else if( m_mode == Tag && c == ']' )
    #####:10398:            addPattern<TestSpec::TagPattern>();
        -:10399:    }
    #####:10400:    void TestSpecParser::startNewMode( Mode mode, std::size_t start ) {
    #####:10401:        m_mode = mode;
    #####:10402:        m_start = start;
    #####:10403:    }
    #####:10404:    void TestSpecParser::escape() {
    #####:10405:        if( m_mode == None )
    #####:10406:            m_start = m_pos;
    #####:10407:        m_mode = EscapedName;
    #####:10408:        m_escapeChars.push_back( m_pos );
    #####:10409:    }
    #####:10410:    std::string TestSpecParser::subString() const { return m_arg.substr( m_start, m_pos - m_start ); }
        -:10411:
    #####:10412:    void TestSpecParser::addFilter() {
    #####:10413:        if( !m_currentFilter.m_patterns.empty() ) {
    #####:10414:            m_testSpec.m_filters.push_back( m_currentFilter );
    #####:10415:            m_currentFilter = TestSpec::Filter();
        -:10416:        }
    #####:10417:    }
        -:10418:
    #####:10419:    TestSpec parseTestSpec( std::string const& arg ) {
    #####:10420:        return TestSpecParser( ITagAliasRegistry::get() ).parse( arg ).testSpec();
        -:10421:    }
        -:10422:
        -:10423:} // namespace Catch
        -:10424:// end catch_test_spec_parser.cpp
        -:10425:// start catch_timer.cpp
        -:10426:
        -:10427:#include <chrono>
        -:10428:
        -:10429:namespace Catch {
        -:10430:
    #####:10431:    auto getCurrentNanosecondsSinceEpoch() -> uint64_t {
    #####:10432:        return std::chrono::duration_cast<std::chrono::nanoseconds>( std::chrono::high_resolution_clock::now().time_since_epoch() ).count();
        -:10433:    }
        -:10434:
    #####:10435:    auto estimateClockResolution() -> uint64_t {
    #####:10436:        uint64_t sum = 0;
        -:10437:        static const uint64_t iterations = 1000000;
        -:10438:
    #####:10439:        for( std::size_t i = 0; i < iterations; ++i ) {
        -:10440:
        -:10441:            uint64_t ticks;
    #####:10442:            uint64_t baseTicks = getCurrentNanosecondsSinceEpoch();
    #####:10443:            do {
    #####:10444:                ticks = getCurrentNanosecondsSinceEpoch();
        -:10445:            }
    #####:10446:            while( ticks == baseTicks );
        -:10447:
    #####:10448:            auto delta = ticks - baseTicks;
    #####:10449:            sum += delta;
        -:10450:        }
        -:10451:
        -:10452:        // We're just taking the mean, here. To do better we could take the std. dev and exclude outliers
        -:10453:        // - and potentially do more iterations if there's a high variance.
    #####:10454:        return sum/iterations;
        -:10455:    }
    #####:10456:    auto getEstimatedClockResolution() -> uint64_t {
    #####:10457:        static auto s_resolution = estimateClockResolution();
    #####:10458:        return s_resolution;
        -:10459:    }
        -:10460:
    #####:10461:    void Timer::start() {
    #####:10462:       m_nanoseconds = getCurrentNanosecondsSinceEpoch();
    #####:10463:    }
    #####:10464:    auto Timer::getElapsedNanoseconds() const -> uint64_t {
    #####:10465:        return getCurrentNanosecondsSinceEpoch() - m_nanoseconds;
        -:10466:    }
    #####:10467:    auto Timer::getElapsedMicroseconds() const -> uint64_t {
    #####:10468:        return getElapsedNanoseconds()/1000;
        -:10469:    }
    #####:10470:    auto Timer::getElapsedMilliseconds() const -> unsigned int {
    #####:10471:        return static_cast<unsigned int>(getElapsedMicroseconds()/1000);
        -:10472:    }
    #####:10473:    auto Timer::getElapsedSeconds() const -> double {
    #####:10474:        return getElapsedMicroseconds()/1000000.0;
        -:10475:    }
        -:10476:
        -:10477:} // namespace Catch
        -:10478:// end catch_timer.cpp
        -:10479:// start catch_tostring.cpp
        -:10480:
        -:10481:#if defined(__clang__)
        -:10482:#    pragma clang diagnostic push
        -:10483:#    pragma clang diagnostic ignored "-Wexit-time-destructors"
        -:10484:#    pragma clang diagnostic ignored "-Wglobal-constructors"
        -:10485:#endif
        -:10486:
        -:10487:// Enable specific decls locally
        -:10488:#if !defined(CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER)
        -:10489:#define CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER
        -:10490:#endif
        -:10491:
        -:10492:#include <cmath>
        -:10493:#include <iomanip>
        -:10494:
        -:10495:namespace Catch {
        -:10496:
        -:10497:namespace Detail {
        -:10498:
    #####:10499:    const std::string unprintableString = "{?}";
        -:10500:
        -:10501:    namespace {
        -:10502:        const int hexThreshold = 255;
        -:10503:
        -:10504:        struct Endianness {
        -:10505:            enum Arch { Big, Little };
        -:10506:
    #####:10507:            static Arch which() {
        -:10508:                union _{
        -:10509:                    int asInt;
        -:10510:                    char asChar[sizeof (int)];
        -:10511:                } u;
        -:10512:
    #####:10513:                u.asInt = 1;
    #####:10514:                return ( u.asChar[sizeof(int)-1] == 1 ) ? Big : Little;
        -:10515:            }
        -:10516:        };
        -:10517:    }
        -:10518:
    #####:10519:    std::string rawMemoryToString( const void *object, std::size_t size ) {
        -:10520:        // Reverse order for little endian architectures
    #####:10521:        int i = 0, end = static_cast<int>( size ), inc = 1;
    #####:10522:        if( Endianness::which() == Endianness::Little ) {
    #####:10523:            i = end-1;
    #####:10524:            end = inc = -1;
        -:10525:        }
        -:10526:
    #####:10527:        unsigned char const *bytes = static_cast<unsigned char const *>(object);
    #####:10528:        ReusableStringStream rss;
    #####:10529:        rss << "0x" << std::setfill('0') << std::hex;
    #####:10530:        for( ; i != end; i += inc )
    #####:10531:             rss << std::setw(2) << static_cast<unsigned>(bytes[i]);
    #####:10532:       return rss.str();
        -:10533:    }
        -:10534:}
        -:10535:
        -:10536:template<typename T>
    #####:10537:std::string fpToString( T value, int precision ) {
    #####:10538:    if (std::isnan(value)) {
    #####:10539:        return "nan";
        -:10540:    }
        -:10541:
    #####:10542:    ReusableStringStream rss;
    #####:10543:    rss << std::setprecision( precision )
    #####:10544:        << std::fixed
        -:10545:        << value;
    #####:10546:    std::string d = rss.str();
    #####:10547:    std::size_t i = d.find_last_not_of( '0' );
    #####:10548:    if( i != std::string::npos && i != d.size()-1 ) {
    #####:10549:        if( d[i] == '.' )
    #####:10550:            i++;
    #####:10551:        d = d.substr( 0, i+1 );
        -:10552:    }
    #####:10553:    return d;
        -:10554:}
        -:10555:
        -:10556://// ======================================================= ////
        -:10557://
        -:10558://   Out-of-line defs for full specialization of StringMaker
        -:10559://
        -:10560://// ======================================================= ////
        -:10561:
    #####:10562:std::string StringMaker<std::string>::convert(const std::string& str) {
    #####:10563:    if (!getCurrentContext().getConfig()->showInvisibles()) {
    #####:10564:        return '"' + str + '"';
        -:10565:    }
        -:10566:
    #####:10567:    std::string s("\"");
    #####:10568:    for (char c : str) {
    #####:10569:        switch (c) {
        -:10570:        case '\n':
    #####:10571:            s.append("\\n");
    #####:10572:            break;
        -:10573:        case '\t':
    #####:10574:            s.append("\\t");
    #####:10575:            break;
        -:10576:        default:
    #####:10577:            s.push_back(c);
    #####:10578:            break;
        -:10579:        }
        -:10580:    }
    #####:10581:    s.append("\"");
    #####:10582:    return s;
        -:10583:}
        -:10584:
        -:10585:#ifdef CATCH_CONFIG_WCHAR
    #####:10586:std::string StringMaker<std::wstring>::convert(const std::wstring& wstr) {
    #####:10587:    std::string s;
    #####:10588:    s.reserve(wstr.size());
    #####:10589:    for (auto c : wstr) {
    #####:10590:        s += (c <= 0xff) ? static_cast<char>(c) : '?';
        -:10591:    }
    #####:10592:    return ::Catch::Detail::stringify(s);
        -:10593:}
        -:10594:#endif
        -:10595:
    #####:10596:std::string StringMaker<char const*>::convert(char const* str) {
    #####:10597:    if (str) {
    #####:10598:        return ::Catch::Detail::stringify(std::string{ str });
        -:10599:    } else {
    #####:10600:        return{ "{null string}" };
        -:10601:    }
        -:10602:}
    #####:10603:std::string StringMaker<char*>::convert(char* str) {
    #####:10604:    if (str) {
    #####:10605:        return ::Catch::Detail::stringify(std::string{ str });
        -:10606:    } else {
    #####:10607:        return{ "{null string}" };
        -:10608:    }
        -:10609:}
        -:10610:#ifdef CATCH_CONFIG_WCHAR
    #####:10611:std::string StringMaker<wchar_t const*>::convert(wchar_t const * str) {
    #####:10612:    if (str) {
    #####:10613:        return ::Catch::Detail::stringify(std::wstring{ str });
        -:10614:    } else {
    #####:10615:        return{ "{null string}" };
        -:10616:    }
        -:10617:}
    #####:10618:std::string StringMaker<wchar_t *>::convert(wchar_t * str) {
    #####:10619:    if (str) {
    #####:10620:        return ::Catch::Detail::stringify(std::wstring{ str });
        -:10621:    } else {
    #####:10622:        return{ "{null string}" };
        -:10623:    }
        -:10624:}
        -:10625:#endif
        -:10626:
    #####:10627:std::string StringMaker<int>::convert(int value) {
    #####:10628:    return ::Catch::Detail::stringify(static_cast<long long>(value));
        -:10629:}
    #####:10630:std::string StringMaker<long>::convert(long value) {
    #####:10631:    return ::Catch::Detail::stringify(static_cast<long long>(value));
        -:10632:}
    #####:10633:std::string StringMaker<long long>::convert(long long value) {
    #####:10634:    ReusableStringStream rss;
    #####:10635:    rss << value;
    #####:10636:    if (value > Detail::hexThreshold) {
    #####:10637:        rss << " (0x" << std::hex << value << ')';
        -:10638:    }
    #####:10639:    return rss.str();
        -:10640:}
        -:10641:
    #####:10642:std::string StringMaker<unsigned int>::convert(unsigned int value) {
    #####:10643:    return ::Catch::Detail::stringify(static_cast<unsigned long long>(value));
        -:10644:}
    #####:10645:std::string StringMaker<unsigned long>::convert(unsigned long value) {
    #####:10646:    return ::Catch::Detail::stringify(static_cast<unsigned long long>(value));
        -:10647:}
    #####:10648:std::string StringMaker<unsigned long long>::convert(unsigned long long value) {
    #####:10649:    ReusableStringStream rss;
    #####:10650:    rss << value;
    #####:10651:    if (value > Detail::hexThreshold) {
    #####:10652:        rss << " (0x" << std::hex << value << ')';
        -:10653:    }
    #####:10654:    return rss.str();
        -:10655:}
        -:10656:
    #####:10657:std::string StringMaker<bool>::convert(bool b) {
    #####:10658:    return b ? "true" : "false";
        -:10659:}
        -:10660:
    #####:10661:std::string StringMaker<char>::convert(char value) {
    #####:10662:    if (value == '\r') {
    #####:10663:        return "'\\r'";
    #####:10664:    } else if (value == '\f') {
    #####:10665:        return "'\\f'";
    #####:10666:    } else if (value == '\n') {
    #####:10667:        return "'\\n'";
    #####:10668:    } else if (value == '\t') {
    #####:10669:        return "'\\t'";
    #####:10670:    } else if ('\0' <= value && value < ' ') {
    #####:10671:        return ::Catch::Detail::stringify(static_cast<unsigned int>(value));
        -:10672:    } else {
    #####:10673:        char chstr[] = "' '";
    #####:10674:        chstr[1] = value;
    #####:10675:        return chstr;
        -:10676:    }
        -:10677:}
    #####:10678:std::string StringMaker<signed char>::convert(signed char c) {
    #####:10679:    return ::Catch::Detail::stringify(static_cast<char>(c));
        -:10680:}
    #####:10681:std::string StringMaker<unsigned char>::convert(unsigned char c) {
    #####:10682:    return ::Catch::Detail::stringify(static_cast<char>(c));
        -:10683:}
        -:10684:
    #####:10685:std::string StringMaker<std::nullptr_t>::convert(std::nullptr_t) {
    #####:10686:    return "nullptr";
        -:10687:}
        -:10688:
    #####:10689:std::string StringMaker<float>::convert(float value) {
    #####:10690:    return fpToString(value, 5) + 'f';
        -:10691:}
    #####:10692:std::string StringMaker<double>::convert(double value) {
    #####:10693:    return fpToString(value, 10);
        -:10694:}
        -:10695:
    #####:10696:std::string ratio_string<std::atto>::symbol() { return "a"; }
    #####:10697:std::string ratio_string<std::femto>::symbol() { return "f"; }
    #####:10698:std::string  ratio_string<std::pico>::symbol() { return "p"; }
    #####:10699:std::string  ratio_string<std::nano>::symbol() { return "n"; }
    #####:10700:std::string ratio_string<std::micro>::symbol() { return "u"; }
    #####:10701:std::string ratio_string<std::milli>::symbol() { return "m"; }
        -:10702:
        -:10703:} // end namespace Catch
        -:10704:
        -:10705:#if defined(__clang__)
        -:10706:#    pragma clang diagnostic pop
        -:10707:#endif
        -:10708:
        -:10709:// end catch_tostring.cpp
        -:10710:// start catch_totals.cpp
        -:10711:
        -:10712:namespace Catch {
        -:10713:
    #####:10714:    Counts Counts::operator - ( Counts const& other ) const {
    #####:10715:        Counts diff;
    #####:10716:        diff.passed = passed - other.passed;
    #####:10717:        diff.failed = failed - other.failed;
    #####:10718:        diff.failedButOk = failedButOk - other.failedButOk;
    #####:10719:        return diff;
        -:10720:    }
        -:10721:
    #####:10722:    Counts& Counts::operator += ( Counts const& other ) {
    #####:10723:        passed += other.passed;
    #####:10724:        failed += other.failed;
    #####:10725:        failedButOk += other.failedButOk;
    #####:10726:        return *this;
        -:10727:    }
        -:10728:
    #####:10729:    std::size_t Counts::total() const {
    #####:10730:        return passed + failed + failedButOk;
        -:10731:    }
    #####:10732:    bool Counts::allPassed() const {
    #####:10733:        return failed == 0 && failedButOk == 0;
        -:10734:    }
    #####:10735:    bool Counts::allOk() const {
    #####:10736:        return failed == 0;
        -:10737:    }
        -:10738:
    #####:10739:    Totals Totals::operator - ( Totals const& other ) const {
    #####:10740:        Totals diff;
    #####:10741:        diff.assertions = assertions - other.assertions;
    #####:10742:        diff.testCases = testCases - other.testCases;
    #####:10743:        return diff;
        -:10744:    }
        -:10745:
    #####:10746:    Totals& Totals::operator += ( Totals const& other ) {
    #####:10747:        assertions += other.assertions;
    #####:10748:        testCases += other.testCases;
    #####:10749:        return *this;
        -:10750:    }
        -:10751:
    #####:10752:    Totals Totals::delta( Totals const& prevTotals ) const {
    #####:10753:        Totals diff = *this - prevTotals;
    #####:10754:        if( diff.assertions.failed > 0 )
    #####:10755:            ++diff.testCases.failed;
    #####:10756:        else if( diff.assertions.failedButOk > 0 )
    #####:10757:            ++diff.testCases.failedButOk;
        -:10758:        else
    #####:10759:            ++diff.testCases.passed;
    #####:10760:        return diff;
        -:10761:    }
        -:10762:
        -:10763:}
        -:10764:// end catch_totals.cpp
        -:10765:// start catch_uncaught_exceptions.cpp
        -:10766:
        -:10767:#include <exception>
        -:10768:
        -:10769:namespace Catch {
    #####:10770:    bool uncaught_exceptions() {
        -:10771:#if defined(CATCH_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS)
        -:10772:        return std::uncaught_exceptions() > 0;
        -:10773:#else
    #####:10774:        return std::uncaught_exception();
        -:10775:#endif
        -:10776:  }
        -:10777:} // end namespace Catch
        -:10778:// end catch_uncaught_exceptions.cpp
        -:10779:// start catch_version.cpp
        -:10780:
        -:10781:#include <ostream>
        -:10782:
        -:10783:namespace Catch {
        -:10784:
    #####:10785:    Version::Version
        -:10786:        (   unsigned int _majorVersion,
        -:10787:            unsigned int _minorVersion,
        -:10788:            unsigned int _patchNumber,
        -:10789:            char const * const _branchName,
    #####:10790:            unsigned int _buildNumber )
        -:10791:    :   majorVersion( _majorVersion ),
        -:10792:        minorVersion( _minorVersion ),
        -:10793:        patchNumber( _patchNumber ),
        -:10794:        branchName( _branchName ),
    #####:10795:        buildNumber( _buildNumber )
    #####:10796:    {}
        -:10797:
    #####:10798:    std::ostream& operator << ( std::ostream& os, Version const& version ) {
    #####:10799:        os  << version.majorVersion << '.'
    #####:10800:            << version.minorVersion << '.'
    #####:10801:            << version.patchNumber;
        -:10802:        // branchName is never null -> 0th char is \0 if it is empty
    #####:10803:        if (version.branchName[0]) {
    #####:10804:            os << '-' << version.branchName
    #####:10805:               << '.' << version.buildNumber;
        -:10806:        }
    #####:10807:        return os;
        -:10808:    }
        -:10809:
    #####:10810:    Version const& libraryVersion() {
    #####:10811:        static Version version( 2, 2, 1, "", 0 );
    #####:10812:        return version;
        -:10813:    }
        -:10814:
        -:10815:}
        -:10816:// end catch_version.cpp
        -:10817:// start catch_wildcard_pattern.cpp
        -:10818:
        -:10819:#include <sstream>
        -:10820:
        -:10821:namespace Catch {
        -:10822:
    #####:10823:    WildcardPattern::WildcardPattern( std::string const& pattern,
    #####:10824:                                      CaseSensitive::Choice caseSensitivity )
        -:10825:    :   m_caseSensitivity( caseSensitivity ),
    #####:10826:        m_pattern( adjustCase( pattern ) )
        -:10827:    {
    #####:10828:        if( startsWith( m_pattern, '*' ) ) {
    #####:10829:            m_pattern = m_pattern.substr( 1 );
    #####:10830:            m_wildcard = WildcardAtStart;
        -:10831:        }
    #####:10832:        if( endsWith( m_pattern, '*' ) ) {
    #####:10833:            m_pattern = m_pattern.substr( 0, m_pattern.size()-1 );
    #####:10834:            m_wildcard = static_cast<WildcardPosition>( m_wildcard | WildcardAtEnd );
        -:10835:        }
    #####:10836:    }
        -:10837:
    #####:10838:    bool WildcardPattern::matches( std::string const& str ) const {
    #####:10839:        switch( m_wildcard ) {
        -:10840:            case NoWildcard:
    #####:10841:                return m_pattern == adjustCase( str );
        -:10842:            case WildcardAtStart:
    #####:10843:                return endsWith( adjustCase( str ), m_pattern );
        -:10844:            case WildcardAtEnd:
    #####:10845:                return startsWith( adjustCase( str ), m_pattern );
        -:10846:            case WildcardAtBothEnds:
    #####:10847:                return contains( adjustCase( str ), m_pattern );
        -:10848:            default:
    #####:10849:                CATCH_INTERNAL_ERROR( "Unknown enum" );
        -:10850:        }
        -:10851:    }
        -:10852:
    #####:10853:    std::string WildcardPattern::adjustCase( std::string const& str ) const {
    #####:10854:        return m_caseSensitivity == CaseSensitive::No ? toLower( str ) : str;
        -:10855:    }
        -:10856:}
        -:10857:// end catch_wildcard_pattern.cpp
        -:10858:// start catch_xmlwriter.cpp
        -:10859:
        -:10860:#include <iomanip>
        -:10861:
        -:10862:namespace Catch {
        -:10863:
    #####:10864:    XmlEncode::XmlEncode( std::string const& str, ForWhat forWhat )
        -:10865:    :   m_str( str ),
    #####:10866:        m_forWhat( forWhat )
    #####:10867:    {}
        -:10868:
    #####:10869:    void XmlEncode::encodeTo( std::ostream& os ) const {
        -:10870:
        -:10871:        // Apostrophe escaping not necessary if we always use " to write attributes
        -:10872:        // (see: http://www.w3.org/TR/xml/#syntax)
        -:10873:
    #####:10874:        for( std::size_t i = 0; i < m_str.size(); ++ i ) {
    #####:10875:            char c = m_str[i];
    #####:10876:            switch( c ) {
    #####:10877:                case '<':   os << "&lt;"; break;
    #####:10878:                case '&':   os << "&amp;"; break;
        -:10879:
        -:10880:                case '>':
        -:10881:                    // See: http://www.w3.org/TR/xml/#syntax
    #####:10882:                    if( i > 2 && m_str[i-1] == ']' && m_str[i-2] == ']' )
    #####:10883:                        os << "&gt;";
        -:10884:                    else
    #####:10885:                        os << c;
    #####:10886:                    break;
        -:10887:
        -:10888:                case '\"':
    #####:10889:                    if( m_forWhat == ForAttributes )
    #####:10890:                        os << "&quot;";
        -:10891:                    else
    #####:10892:                        os << c;
    #####:10893:                    break;
        -:10894:
        -:10895:                default:
        -:10896:                    // Escape control chars - based on contribution by @espenalb in PR #465 and
        -:10897:                    // by @mrpi PR #588
    #####:10898:                    if ( ( c >= 0 && c < '\x09' ) || ( c > '\x0D' && c < '\x20') || c=='\x7F' ) {
        -:10899:                        // see http://stackoverflow.com/questions/404107/why-are-control-characters-illegal-in-xml-1-0
    #####:10900:                        os << "\\x" << std::uppercase << std::hex << std::setfill('0') << std::setw(2)
    #####:10901:                           << static_cast<int>( c );
        -:10902:                    }
        -:10903:                    else
    #####:10904:                        os << c;
        -:10905:            }
        -:10906:        }
    #####:10907:    }
        -:10908:
    #####:10909:    std::ostream& operator << ( std::ostream& os, XmlEncode const& xmlEncode ) {
    #####:10910:        xmlEncode.encodeTo( os );
    #####:10911:        return os;
        -:10912:    }
        -:10913:
    #####:10914:    XmlWriter::ScopedElement::ScopedElement( XmlWriter* writer )
    #####:10915:    :   m_writer( writer )
    #####:10916:    {}
        -:10917:
    #####:10918:    XmlWriter::ScopedElement::ScopedElement( ScopedElement&& other ) noexcept
    #####:10919:    :   m_writer( other.m_writer ){
    #####:10920:        other.m_writer = nullptr;
    #####:10921:    }
    #####:10922:    XmlWriter::ScopedElement& XmlWriter::ScopedElement::operator=( ScopedElement&& other ) noexcept {
    #####:10923:        if ( m_writer ) {
    #####:10924:            m_writer->endElement();
        -:10925:        }
    #####:10926:        m_writer = other.m_writer;
    #####:10927:        other.m_writer = nullptr;
    #####:10928:        return *this;
        -:10929:    }
        -:10930:
    #####:10931:    XmlWriter::ScopedElement::~ScopedElement() {
    #####:10932:        if( m_writer )
    #####:10933:            m_writer->endElement();
    #####:10934:    }
        -:10935:
    #####:10936:    XmlWriter::ScopedElement& XmlWriter::ScopedElement::writeText( std::string const& text, bool indent ) {
    #####:10937:        m_writer->writeText( text, indent );
    #####:10938:        return *this;
        -:10939:    }
        -:10940:
    #####:10941:    XmlWriter::XmlWriter( std::ostream& os ) : m_os( os )
        -:10942:    {
    #####:10943:        writeDeclaration();
    #####:10944:    }
        -:10945:
    #####:10946:    XmlWriter::~XmlWriter() {
    #####:10947:        while( !m_tags.empty() )
    #####:10948:            endElement();
    #####:10949:    }
        -:10950:
    #####:10951:    XmlWriter& XmlWriter::startElement( std::string const& name ) {
    #####:10952:        ensureTagClosed();
    #####:10953:        newlineIfNecessary();
    #####:10954:        m_os << m_indent << '<' << name;
    #####:10955:        m_tags.push_back( name );
    #####:10956:        m_indent += "  ";
    #####:10957:        m_tagIsOpen = true;
    #####:10958:        return *this;
        -:10959:    }
        -:10960:
    #####:10961:    XmlWriter::ScopedElement XmlWriter::scopedElement( std::string const& name ) {
    #####:10962:        ScopedElement scoped( this );
    #####:10963:        startElement( name );
    #####:10964:        return scoped;
        -:10965:    }
        -:10966:
    #####:10967:    XmlWriter& XmlWriter::endElement() {
    #####:10968:        newlineIfNecessary();
    #####:10969:        m_indent = m_indent.substr( 0, m_indent.size()-2 );
    #####:10970:        if( m_tagIsOpen ) {
    #####:10971:            m_os << "/>";
    #####:10972:            m_tagIsOpen = false;
        -:10973:        }
        -:10974:        else {
    #####:10975:            m_os << m_indent << "</" << m_tags.back() << ">";
        -:10976:        }
    #####:10977:        m_os << std::endl;
    #####:10978:        m_tags.pop_back();
    #####:10979:        return *this;
        -:10980:    }
        -:10981:
    #####:10982:    XmlWriter& XmlWriter::writeAttribute( std::string const& name, std::string const& attribute ) {
    #####:10983:        if( !name.empty() && !attribute.empty() )
    #####:10984:            m_os << ' ' << name << "=\"" << XmlEncode( attribute, XmlEncode::ForAttributes ) << '"';
    #####:10985:        return *this;
        -:10986:    }
        -:10987:
    #####:10988:    XmlWriter& XmlWriter::writeAttribute( std::string const& name, bool attribute ) {
    #####:10989:        m_os << ' ' << name << "=\"" << ( attribute ? "true" : "false" ) << '"';
    #####:10990:        return *this;
        -:10991:    }
        -:10992:
    #####:10993:    XmlWriter& XmlWriter::writeText( std::string const& text, bool indent ) {
    #####:10994:        if( !text.empty() ){
    #####:10995:            bool tagWasOpen = m_tagIsOpen;
    #####:10996:            ensureTagClosed();
    #####:10997:            if( tagWasOpen && indent )
    #####:10998:                m_os << m_indent;
    #####:10999:            m_os << XmlEncode( text );
    #####:11000:            m_needsNewline = true;
        -:11001:        }
    #####:11002:        return *this;
        -:11003:    }
        -:11004:
    #####:11005:    XmlWriter& XmlWriter::writeComment( std::string const& text ) {
    #####:11006:        ensureTagClosed();
    #####:11007:        m_os << m_indent << "<!--" << text << "-->";
    #####:11008:        m_needsNewline = true;
    #####:11009:        return *this;
        -:11010:    }
        -:11011:
    #####:11012:    void XmlWriter::writeStylesheetRef( std::string const& url ) {
    #####:11013:        m_os << "<?xml-stylesheet type=\"text/xsl\" href=\"" << url << "\"?>\n";
    #####:11014:    }
        -:11015:
    #####:11016:    XmlWriter& XmlWriter::writeBlankLine() {
    #####:11017:        ensureTagClosed();
    #####:11018:        m_os << '\n';
    #####:11019:        return *this;
        -:11020:    }
        -:11021:
    #####:11022:    void XmlWriter::ensureTagClosed() {
    #####:11023:        if( m_tagIsOpen ) {
    #####:11024:            m_os << ">" << std::endl;
    #####:11025:            m_tagIsOpen = false;
        -:11026:        }
    #####:11027:    }
        -:11028:
    #####:11029:    void XmlWriter::writeDeclaration() {
    #####:11030:        m_os << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
    #####:11031:    }
        -:11032:
    #####:11033:    void XmlWriter::newlineIfNecessary() {
    #####:11034:        if( m_needsNewline ) {
    #####:11035:            m_os << std::endl;
    #####:11036:            m_needsNewline = false;
        -:11037:        }
    #####:11038:    }
        -:11039:}
        -:11040:// end catch_xmlwriter.cpp
        -:11041:// start catch_reporter_bases.cpp
        -:11042:
        -:11043:#include <cstring>
        -:11044:#include <cfloat>
        -:11045:#include <cstdio>
        -:11046:#include <assert.h>
        -:11047:#include <memory>
        -:11048:
        -:11049:namespace Catch {
    #####:11050:    void prepareExpandedExpression(AssertionResult& result) {
    #####:11051:        result.getExpandedExpression();
    #####:11052:    }
        -:11053:
        -:11054:    // Because formatting using c++ streams is stateful, drop down to C is required
        -:11055:    // Alternatively we could use stringstream, but its performance is... not good.
    #####:11056:    std::string getFormattedDuration( double duration ) {
        -:11057:        // Max exponent + 1 is required to represent the whole part
        -:11058:        // + 1 for decimal point
        -:11059:        // + 3 for the 3 decimal places
        -:11060:        // + 1 for null terminator
    #####:11061:        const std::size_t maxDoubleSize = DBL_MAX_10_EXP + 1 + 1 + 3 + 1;
        -:11062:        char buffer[maxDoubleSize];
        -:11063:
        -:11064:        // Save previous errno, to prevent sprintf from overwriting it
    #####:11065:        ErrnoGuard guard;
        -:11066:#ifdef _MSC_VER
        -:11067:        sprintf_s(buffer, "%.3f", duration);
        -:11068:#else
    #####:11069:        sprintf(buffer, "%.3f", duration);
        -:11070:#endif
    #####:11071:        return std::string(buffer);
        -:11072:    }
        -:11073:
    #####:11074:    TestEventListenerBase::TestEventListenerBase(ReporterConfig const & _config)
    #####:11075:        :StreamingReporterBase(_config) {}
        -:11076:
    #####:11077:    void TestEventListenerBase::assertionStarting(AssertionInfo const &) {}
        -:11078:
    #####:11079:    bool TestEventListenerBase::assertionEnded(AssertionStats const &) {
    #####:11080:        return false;
        -:11081:    }
        -:11082:
        -:11083:} // end namespace Catch
        -:11084:// end catch_reporter_bases.cpp
        -:11085:// start catch_reporter_compact.cpp
        -:11086:
        -:11087:namespace {
        -:11088:
        -:11089:#ifdef CATCH_PLATFORM_MAC
        -:11090:    const char* failedString() { return "FAILED"; }
        -:11091:    const char* passedString() { return "PASSED"; }
        -:11092:#else
    #####:11093:    const char* failedString() { return "failed"; }
    #####:11094:    const char* passedString() { return "passed"; }
        -:11095:#endif
        -:11096:
        -:11097:    // Colour::LightGrey
    #####:11098:    Catch::Colour::Code dimColour() { return Catch::Colour::FileName; }
        -:11099:
    #####:11100:    std::string bothOrAll( std::size_t count ) {
        -:11101:        return count == 1 ? std::string() :
    #####:11102:               count == 2 ? "both " : "all " ;
        -:11103:    }
        -:11104:
        -:11105:} // anon namespace
        -:11106:
        -:11107:namespace Catch {
        -:11108:namespace {
        -:11109:// Colour, message variants:
        -:11110:// - white: No tests ran.
        -:11111:// -   red: Failed [both/all] N test cases, failed [both/all] M assertions.
        -:11112:// - white: Passed [both/all] N test cases (no assertions).
        -:11113:// -   red: Failed N tests cases, failed M assertions.
        -:11114:// - green: Passed [both/all] N tests cases with M assertions.
    #####:11115:void printTotals(std::ostream& out, const Totals& totals) {
    #####:11116:    if (totals.testCases.total() == 0) {
    #####:11117:        out << "No tests ran.";
    #####:11118:    } else if (totals.testCases.failed == totals.testCases.total()) {
    #####:11119:        Colour colour(Colour::ResultError);
        -:11120:        const std::string qualify_assertions_failed =
    #####:11121:            totals.assertions.failed == totals.assertions.total() ?
    #####:11122:            bothOrAll(totals.assertions.failed) : std::string();
        -:11123:        out <<
    #####:11124:            "Failed " << bothOrAll(totals.testCases.failed)
    #####:11125:            << pluralise(totals.testCases.failed, "test case") << ", "
    #####:11126:            "failed " << qualify_assertions_failed <<
    #####:11127:            pluralise(totals.assertions.failed, "assertion") << '.';
    #####:11128:    } else if (totals.assertions.total() == 0) {
        -:11129:        out <<
    #####:11130:            "Passed " << bothOrAll(totals.testCases.total())
    #####:11131:            << pluralise(totals.testCases.total(), "test case")
    #####:11132:            << " (no assertions).";
    #####:11133:    } else if (totals.assertions.failed) {
    #####:11134:        Colour colour(Colour::ResultError);
        -:11135:        out <<
    #####:11136:            "Failed " << pluralise(totals.testCases.failed, "test case") << ", "
    #####:11137:            "failed " << pluralise(totals.assertions.failed, "assertion") << '.';
        -:11138:    } else {
    #####:11139:        Colour colour(Colour::ResultSuccess);
        -:11140:        out <<
    #####:11141:            "Passed " << bothOrAll(totals.testCases.passed)
    #####:11142:            << pluralise(totals.testCases.passed, "test case") <<
    #####:11143:            " with " << pluralise(totals.assertions.passed, "assertion") << '.';
        -:11144:    }
    #####:11145:}
        -:11146:
        -:11147:// Implementation of CompactReporter formatting
    #####:11148:class AssertionPrinter {
        -:11149:public:
        -:11150:    AssertionPrinter& operator= (AssertionPrinter const&) = delete;
        -:11151:    AssertionPrinter(AssertionPrinter const&) = delete;
    #####:11152:    AssertionPrinter(std::ostream& _stream, AssertionStats const& _stats, bool _printInfoMessages)
    #####:11153:        : stream(_stream)
        -:11154:        , result(_stats.assertionResult)
        -:11155:        , messages(_stats.infoMessages)
    #####:11156:        , itMessage(_stats.infoMessages.begin())
    #####:11157:        , printInfoMessages(_printInfoMessages) {}
        -:11158:
    #####:11159:    void print() {
    #####:11160:        printSourceInfo();
        -:11161:
    #####:11162:        itMessage = messages.begin();
        -:11163:
    #####:11164:        switch (result.getResultType()) {
        -:11165:        case ResultWas::Ok:
    #####:11166:            printResultType(Colour::ResultSuccess, passedString());
    #####:11167:            printOriginalExpression();
    #####:11168:            printReconstructedExpression();
    #####:11169:            if (!result.hasExpression())
    #####:11170:                printRemainingMessages(Colour::None);
        -:11171:            else
    #####:11172:                printRemainingMessages();
    #####:11173:            break;
        -:11174:        case ResultWas::ExpressionFailed:
    #####:11175:            if (result.isOk())
    #####:11176:                printResultType(Colour::ResultSuccess, failedString() + std::string(" - but was ok"));
        -:11177:            else
    #####:11178:                printResultType(Colour::Error, failedString());
    #####:11179:            printOriginalExpression();
    #####:11180:            printReconstructedExpression();
    #####:11181:            printRemainingMessages();
    #####:11182:            break;
        -:11183:        case ResultWas::ThrewException:
    #####:11184:            printResultType(Colour::Error, failedString());
    #####:11185:            printIssue("unexpected exception with message:");
    #####:11186:            printMessage();
    #####:11187:            printExpressionWas();
    #####:11188:            printRemainingMessages();
    #####:11189:            break;
        -:11190:        case ResultWas::FatalErrorCondition:
    #####:11191:            printResultType(Colour::Error, failedString());
    #####:11192:            printIssue("fatal error condition with message:");
    #####:11193:            printMessage();
    #####:11194:            printExpressionWas();
    #####:11195:            printRemainingMessages();
    #####:11196:            break;
        -:11197:        case ResultWas::DidntThrowException:
    #####:11198:            printResultType(Colour::Error, failedString());
    #####:11199:            printIssue("expected exception, got none");
    #####:11200:            printExpressionWas();
    #####:11201:            printRemainingMessages();
    #####:11202:            break;
        -:11203:        case ResultWas::Info:
    #####:11204:            printResultType(Colour::None, "info");
    #####:11205:            printMessage();
    #####:11206:            printRemainingMessages();
    #####:11207:            break;
        -:11208:        case ResultWas::Warning:
    #####:11209:            printResultType(Colour::None, "warning");
    #####:11210:            printMessage();
    #####:11211:            printRemainingMessages();
    #####:11212:            break;
        -:11213:        case ResultWas::ExplicitFailure:
    #####:11214:            printResultType(Colour::Error, failedString());
    #####:11215:            printIssue("explicitly");
    #####:11216:            printRemainingMessages(Colour::None);
    #####:11217:            break;
        -:11218:            // These cases are here to prevent compiler warnings
        -:11219:        case ResultWas::Unknown:
        -:11220:        case ResultWas::FailureBit:
        -:11221:        case ResultWas::Exception:
    #####:11222:            printResultType(Colour::Error, "** internal error **");
    #####:11223:            break;
        -:11224:        }
    #####:11225:    }
        -:11226:
        -:11227:private:
    #####:11228:    void printSourceInfo() const {
    #####:11229:        Colour colourGuard(Colour::FileName);
    #####:11230:        stream << result.getSourceInfo() << ':';
    #####:11231:    }
        -:11232:
    #####:11233:    void printResultType(Colour::Code colour, std::string const& passOrFail) const {
    #####:11234:        if (!passOrFail.empty()) {
        -:11235:            {
    #####:11236:                Colour colourGuard(colour);
    #####:11237:                stream << ' ' << passOrFail;
        -:11238:            }
    #####:11239:            stream << ':';
        -:11240:        }
    #####:11241:    }
        -:11242:
    #####:11243:    void printIssue(std::string const& issue) const {
    #####:11244:        stream << ' ' << issue;
    #####:11245:    }
        -:11246:
    #####:11247:    void printExpressionWas() {
    #####:11248:        if (result.hasExpression()) {
    #####:11249:            stream << ';';
        -:11250:            {
    #####:11251:                Colour colour(dimColour());
    #####:11252:                stream << " expression was:";
        -:11253:            }
    #####:11254:            printOriginalExpression();
        -:11255:        }
    #####:11256:    }
        -:11257:
    #####:11258:    void printOriginalExpression() const {
    #####:11259:        if (result.hasExpression()) {
    #####:11260:            stream << ' ' << result.getExpression();
        -:11261:        }
    #####:11262:    }
        -:11263:
    #####:11264:    void printReconstructedExpression() const {
    #####:11265:        if (result.hasExpandedExpression()) {
        -:11266:            {
    #####:11267:                Colour colour(dimColour());
    #####:11268:                stream << " for: ";
        -:11269:            }
    #####:11270:            stream << result.getExpandedExpression();
        -:11271:        }
    #####:11272:    }
        -:11273:
    #####:11274:    void printMessage() {
    #####:11275:        if (itMessage != messages.end()) {
    #####:11276:            stream << " '" << itMessage->message << '\'';
    #####:11277:            ++itMessage;
        -:11278:        }
    #####:11279:    }
        -:11280:
    #####:11281:    void printRemainingMessages(Colour::Code colour = dimColour()) {
    #####:11282:        if (itMessage == messages.end())
    #####:11283:            return;
        -:11284:
        -:11285:        // using messages.end() directly yields (or auto) compilation error:
    #####:11286:        std::vector<MessageInfo>::const_iterator itEnd = messages.end();
    #####:11287:        const std::size_t N = static_cast<std::size_t>(std::distance(itMessage, itEnd));
        -:11288:
        -:11289:        {
    #####:11290:            Colour colourGuard(colour);
    #####:11291:            stream << " with " << pluralise(N, "message") << ':';
        -:11292:        }
        -:11293:
    #####:11294:        for (; itMessage != itEnd; ) {
        -:11295:            // If this assertion is a warning ignore any INFO messages
    #####:11296:            if (printInfoMessages || itMessage->type != ResultWas::Info) {
    #####:11297:                stream << " '" << itMessage->message << '\'';
    #####:11298:                if (++itMessage != itEnd) {
    #####:11299:                    Colour colourGuard(dimColour());
    #####:11300:                    stream << " and";
        -:11301:                }
        -:11302:            }
        -:11303:        }
        -:11304:    }
        -:11305:
        -:11306:private:
        -:11307:    std::ostream& stream;
        -:11308:    AssertionResult const& result;
        -:11309:    std::vector<MessageInfo> messages;
        -:11310:    std::vector<MessageInfo>::const_iterator itMessage;
        -:11311:    bool printInfoMessages;
        -:11312:};
        -:11313:
        -:11314:} // anon namespace
        -:11315:
    #####:11316:        std::string CompactReporter::getDescription() {
    #####:11317:            return "Reports test results on a single line, suitable for IDEs";
        -:11318:        }
        -:11319:
    #####:11320:        ReporterPreferences CompactReporter::getPreferences() const {
    #####:11321:            ReporterPreferences prefs;
    #####:11322:            prefs.shouldRedirectStdOut = false;
    #####:11323:            return prefs;
        -:11324:        }
        -:11325:
    #####:11326:        void CompactReporter::noMatchingTestCases( std::string const& spec ) {
    #####:11327:            stream << "No test cases matched '" << spec << '\'' << std::endl;
    #####:11328:        }
        -:11329:
    #####:11330:        void CompactReporter::assertionStarting( AssertionInfo const& ) {}
        -:11331:
    #####:11332:        bool CompactReporter::assertionEnded( AssertionStats const& _assertionStats ) {
    #####:11333:            AssertionResult const& result = _assertionStats.assertionResult;
        -:11334:
    #####:11335:            bool printInfoMessages = true;
        -:11336:
        -:11337:            // Drop out if result was successful and we're not printing those
    #####:11338:            if( !m_config->includeSuccessfulResults() && result.isOk() ) {
    #####:11339:                if( result.getResultType() != ResultWas::Warning )
    #####:11340:                    return false;
    #####:11341:                printInfoMessages = false;
        -:11342:            }
        -:11343:
    #####:11344:            AssertionPrinter printer( stream, _assertionStats, printInfoMessages );
    #####:11345:            printer.print();
        -:11346:
    #####:11347:            stream << std::endl;
    #####:11348:            return true;
        -:11349:        }
        -:11350:
    #####:11351:        void CompactReporter::sectionEnded(SectionStats const& _sectionStats) {
    #####:11352:            if (m_config->showDurations() == ShowDurations::Always) {
    #####:11353:                stream << getFormattedDuration(_sectionStats.durationInSeconds) << " s: " << _sectionStats.sectionInfo.name << std::endl;
        -:11354:            }
    #####:11355:        }
        -:11356:
    #####:11357:        void CompactReporter::testRunEnded( TestRunStats const& _testRunStats ) {
    #####:11358:            printTotals( stream, _testRunStats.totals );
    #####:11359:            stream << '\n' << std::endl;
    #####:11360:            StreamingReporterBase::testRunEnded( _testRunStats );
    #####:11361:        }
        -:11362:
    #####:11363:        CompactReporter::~CompactReporter() {}
        -:11364:
    #####:11365:    CATCH_REGISTER_REPORTER( "compact", CompactReporter )
        -:11366:
        -:11367:} // end namespace Catch
        -:11368:// end catch_reporter_compact.cpp
        -:11369:// start catch_reporter_console.cpp
        -:11370:
        -:11371:#include <cfloat>
        -:11372:#include <cstdio>
        -:11373:
        -:11374:#if defined(_MSC_VER)
        -:11375:#pragma warning(push)
        -:11376:#pragma warning(disable:4061) // Not all labels are EXPLICITLY handled in switch
        -:11377: // Note that 4062 (not all labels are handled
        -:11378: // and default is missing) is enabled
        -:11379:#endif
        -:11380:
        -:11381:namespace Catch {
        -:11382:
        -:11383:namespace {
        -:11384:
        -:11385:// Formatter impl for ConsoleReporter
    #####:11386:class ConsoleAssertionPrinter {
        -:11387:public:
        -:11388:    ConsoleAssertionPrinter& operator= (ConsoleAssertionPrinter const&) = delete;
        -:11389:    ConsoleAssertionPrinter(ConsoleAssertionPrinter const&) = delete;
    #####:11390:    ConsoleAssertionPrinter(std::ostream& _stream, AssertionStats const& _stats, bool _printInfoMessages)
    #####:11391:        : stream(_stream),
        -:11392:        stats(_stats),
        -:11393:        result(_stats.assertionResult),
        -:11394:        colour(Colour::None),
    #####:11395:        message(result.getMessage()),
        -:11396:        messages(_stats.infoMessages),
    #####:11397:        printInfoMessages(_printInfoMessages) {
    #####:11398:        switch (result.getResultType()) {
        -:11399:        case ResultWas::Ok:
    #####:11400:            colour = Colour::Success;
    #####:11401:            passOrFail = "PASSED";
        -:11402:            //if( result.hasMessage() )
    #####:11403:            if (_stats.infoMessages.size() == 1)
    #####:11404:                messageLabel = "with message";
    #####:11405:            if (_stats.infoMessages.size() > 1)
    #####:11406:                messageLabel = "with messages";
    #####:11407:            break;
        -:11408:        case ResultWas::ExpressionFailed:
    #####:11409:            if (result.isOk()) {
    #####:11410:                colour = Colour::Success;
    #####:11411:                passOrFail = "FAILED - but was ok";
        -:11412:            } else {
    #####:11413:                colour = Colour::Error;
    #####:11414:                passOrFail = "FAILED";
        -:11415:            }
    #####:11416:            if (_stats.infoMessages.size() == 1)
    #####:11417:                messageLabel = "with message";
    #####:11418:            if (_stats.infoMessages.size() > 1)
    #####:11419:                messageLabel = "with messages";
    #####:11420:            break;
        -:11421:        case ResultWas::ThrewException:
    #####:11422:            colour = Colour::Error;
    #####:11423:            passOrFail = "FAILED";
    #####:11424:            messageLabel = "due to unexpected exception with ";
    #####:11425:            if (_stats.infoMessages.size() == 1)
    #####:11426:                messageLabel += "message";
    #####:11427:            if (_stats.infoMessages.size() > 1)
    #####:11428:                messageLabel += "messages";
    #####:11429:            break;
        -:11430:        case ResultWas::FatalErrorCondition:
    #####:11431:            colour = Colour::Error;
    #####:11432:            passOrFail = "FAILED";
    #####:11433:            messageLabel = "due to a fatal error condition";
    #####:11434:            break;
        -:11435:        case ResultWas::DidntThrowException:
    #####:11436:            colour = Colour::Error;
    #####:11437:            passOrFail = "FAILED";
    #####:11438:            messageLabel = "because no exception was thrown where one was expected";
    #####:11439:            break;
        -:11440:        case ResultWas::Info:
    #####:11441:            messageLabel = "info";
    #####:11442:            break;
        -:11443:        case ResultWas::Warning:
    #####:11444:            messageLabel = "warning";
    #####:11445:            break;
        -:11446:        case ResultWas::ExplicitFailure:
    #####:11447:            passOrFail = "FAILED";
    #####:11448:            colour = Colour::Error;
    #####:11449:            if (_stats.infoMessages.size() == 1)
    #####:11450:                messageLabel = "explicitly with message";
    #####:11451:            if (_stats.infoMessages.size() > 1)
    #####:11452:                messageLabel = "explicitly with messages";
    #####:11453:            break;
        -:11454:            // These cases are here to prevent compiler warnings
        -:11455:        case ResultWas::Unknown:
        -:11456:        case ResultWas::FailureBit:
        -:11457:        case ResultWas::Exception:
    #####:11458:            passOrFail = "** internal error **";
    #####:11459:            colour = Colour::Error;
    #####:11460:            break;
        -:11461:        }
    #####:11462:    }
        -:11463:
    #####:11464:    void print() const {
    #####:11465:        printSourceInfo();
    #####:11466:        if (stats.totals.assertions.total() > 0) {
    #####:11467:            if (result.isOk())
    #####:11468:                stream << '\n';
    #####:11469:            printResultType();
    #####:11470:            printOriginalExpression();
    #####:11471:            printReconstructedExpression();
        -:11472:        } else {
    #####:11473:            stream << '\n';
        -:11474:        }
    #####:11475:        printMessage();
    #####:11476:    }
        -:11477:
        -:11478:private:
    #####:11479:    void printResultType() const {
    #####:11480:        if (!passOrFail.empty()) {
    #####:11481:            Colour colourGuard(colour);
    #####:11482:            stream << passOrFail << ":\n";
        -:11483:        }
    #####:11484:    }
    #####:11485:    void printOriginalExpression() const {
    #####:11486:        if (result.hasExpression()) {
    #####:11487:            Colour colourGuard(Colour::OriginalExpression);
    #####:11488:            stream << "  ";
    #####:11489:            stream << result.getExpressionInMacro();
    #####:11490:            stream << '\n';
        -:11491:        }
    #####:11492:    }
    #####:11493:    void printReconstructedExpression() const {
    #####:11494:        if (result.hasExpandedExpression()) {
    #####:11495:            stream << "with expansion:\n";
    #####:11496:            Colour colourGuard(Colour::ReconstructedExpression);
    #####:11497:            stream << Column(result.getExpandedExpression()).indent(2) << '\n';
        -:11498:        }
    #####:11499:    }
    #####:11500:    void printMessage() const {
    #####:11501:        if (!messageLabel.empty())
    #####:11502:            stream << messageLabel << ':' << '\n';
    #####:11503:        for (auto const& msg : messages) {
        -:11504:            // If this assertion is a warning ignore any INFO messages
    #####:11505:            if (printInfoMessages || msg.type != ResultWas::Info)
    #####:11506:                stream << Column(msg.message).indent(2) << '\n';
        -:11507:        }
    #####:11508:    }
    #####:11509:    void printSourceInfo() const {
    #####:11510:        Colour colourGuard(Colour::FileName);
    #####:11511:        stream << result.getSourceInfo() << ": ";
    #####:11512:    }
        -:11513:
        -:11514:    std::ostream& stream;
        -:11515:    AssertionStats const& stats;
        -:11516:    AssertionResult const& result;
        -:11517:    Colour::Code colour;
        -:11518:    std::string passOrFail;
        -:11519:    std::string messageLabel;
        -:11520:    std::string message;
        -:11521:    std::vector<MessageInfo> messages;
        -:11522:    bool printInfoMessages;
        -:11523:};
        -:11524:
    #####:11525:std::size_t makeRatio(std::size_t number, std::size_t total) {
    #####:11526:    std::size_t ratio = total > 0 ? CATCH_CONFIG_CONSOLE_WIDTH * number / total : 0;
    #####:11527:    return (ratio == 0 && number > 0) ? 1 : ratio;
        -:11528:}
        -:11529:
    #####:11530:std::size_t& findMax(std::size_t& i, std::size_t& j, std::size_t& k) {
    #####:11531:    if (i > j && i > k)
    #####:11532:        return i;
    #####:11533:    else if (j > k)
    #####:11534:        return j;
        -:11535:    else
    #####:11536:        return k;
        -:11537:}
        -:11538:
    #####:11539:struct ColumnInfo {
        -:11540:    enum Justification { Left, Right };
        -:11541:    std::string name;
        -:11542:    int width;
        -:11543:    Justification justification;
        -:11544:};
        -:11545:struct ColumnBreak {};
        -:11546:struct RowBreak {};
        -:11547:
        -:11548:class Duration {
        -:11549:    enum class Unit {
        -:11550:        Auto,
        -:11551:        Nanoseconds,
        -:11552:        Microseconds,
        -:11553:        Milliseconds,
        -:11554:        Seconds,
        -:11555:        Minutes
        -:11556:    };
        -:11557:    static const uint64_t s_nanosecondsInAMicrosecond = 1000;
        -:11558:    static const uint64_t s_nanosecondsInAMillisecond = 1000 * s_nanosecondsInAMicrosecond;
        -:11559:    static const uint64_t s_nanosecondsInASecond = 1000 * s_nanosecondsInAMillisecond;
        -:11560:    static const uint64_t s_nanosecondsInAMinute = 60 * s_nanosecondsInASecond;
        -:11561:
        -:11562:    uint64_t m_inNanoseconds;
        -:11563:    Unit m_units;
        -:11564:
        -:11565:public:
    #####:11566:    explicit Duration(uint64_t inNanoseconds, Unit units = Unit::Auto)
    #####:11567:        : m_inNanoseconds(inNanoseconds),
    #####:11568:        m_units(units) {
    #####:11569:        if (m_units == Unit::Auto) {
    #####:11570:            if (m_inNanoseconds < s_nanosecondsInAMicrosecond)
    #####:11571:                m_units = Unit::Nanoseconds;
    #####:11572:            else if (m_inNanoseconds < s_nanosecondsInAMillisecond)
    #####:11573:                m_units = Unit::Microseconds;
    #####:11574:            else if (m_inNanoseconds < s_nanosecondsInASecond)
    #####:11575:                m_units = Unit::Milliseconds;
    #####:11576:            else if (m_inNanoseconds < s_nanosecondsInAMinute)
    #####:11577:                m_units = Unit::Seconds;
        -:11578:            else
    #####:11579:                m_units = Unit::Minutes;
        -:11580:        }
        -:11581:
    #####:11582:    }
        -:11583:
    #####:11584:    auto value() const -> double {
    #####:11585:        switch (m_units) {
        -:11586:        case Unit::Microseconds:
    #####:11587:            return m_inNanoseconds / static_cast<double>(s_nanosecondsInAMicrosecond);
        -:11588:        case Unit::Milliseconds:
    #####:11589:            return m_inNanoseconds / static_cast<double>(s_nanosecondsInAMillisecond);
        -:11590:        case Unit::Seconds:
    #####:11591:            return m_inNanoseconds / static_cast<double>(s_nanosecondsInASecond);
        -:11592:        case Unit::Minutes:
    #####:11593:            return m_inNanoseconds / static_cast<double>(s_nanosecondsInAMinute);
        -:11594:        default:
    #####:11595:            return static_cast<double>(m_inNanoseconds);
        -:11596:        }
        -:11597:    }
    #####:11598:    auto unitsAsString() const -> std::string {
    #####:11599:        switch (m_units) {
        -:11600:        case Unit::Nanoseconds:
    #####:11601:            return "ns";
        -:11602:        case Unit::Microseconds:
    #####:11603:            return "µs";
        -:11604:        case Unit::Milliseconds:
    #####:11605:            return "ms";
        -:11606:        case Unit::Seconds:
    #####:11607:            return "s";
        -:11608:        case Unit::Minutes:
    #####:11609:            return "m";
        -:11610:        default:
    #####:11611:            return "** internal error **";
        -:11612:        }
        -:11613:
        -:11614:    }
    #####:11615:    friend auto operator << (std::ostream& os, Duration const& duration) -> std::ostream& {
    #####:11616:        return os << duration.value() << " " << duration.unitsAsString();
        -:11617:    }
        -:11618:};
        -:11619:} // end anon namespace
        -:11620:
    #####:11621:class TablePrinter {
        -:11622:    std::ostream& m_os;
        -:11623:    std::vector<ColumnInfo> m_columnInfos;
        -:11624:    std::ostringstream m_oss;
        -:11625:    int m_currentColumn = -1;
        -:11626:    bool m_isOpen = false;
        -:11627:
        -:11628:public:
    #####:11629:    TablePrinter( std::ostream& os, std::vector<ColumnInfo> columnInfos )
    #####:11630:    :   m_os( os ),
    #####:11631:        m_columnInfos( std::move( columnInfos ) ) {}
        -:11632:
    #####:11633:    auto columnInfos() const -> std::vector<ColumnInfo> const& {
    #####:11634:        return m_columnInfos;
        -:11635:    }
        -:11636:
    #####:11637:    void open() {
    #####:11638:        if (!m_isOpen) {
    #####:11639:            m_isOpen = true;
    #####:11640:            *this << RowBreak();
    #####:11641:            for (auto const& info : m_columnInfos)
    #####:11642:                *this << info.name << ColumnBreak();
    #####:11643:            *this << RowBreak();
    #####:11644:            m_os << Catch::getLineOfChars<'-'>() << "\n";
        -:11645:        }
    #####:11646:    }
    #####:11647:    void close() {
    #####:11648:        if (m_isOpen) {
    #####:11649:            *this << RowBreak();
    #####:11650:            m_os << std::endl;
    #####:11651:            m_isOpen = false;
        -:11652:        }
    #####:11653:    }
        -:11654:
        -:11655:    template<typename T>
    #####:11656:    friend TablePrinter& operator << (TablePrinter& tp, T const& value) {
    #####:11657:        tp.m_oss << value;
    #####:11658:        return tp;
        -:11659:    }
        -:11660:
    #####:11661:    friend TablePrinter& operator << (TablePrinter& tp, ColumnBreak) {
    #####:11662:        auto colStr = tp.m_oss.str();
        -:11663:        // This takes account of utf8 encodings
    #####:11664:        auto strSize = Catch::StringRef(colStr).numberOfCharacters();
    #####:11665:        tp.m_oss.str("");
    #####:11666:        tp.open();
    #####:11667:        if (tp.m_currentColumn == static_cast<int>(tp.m_columnInfos.size() - 1)) {
    #####:11668:            tp.m_currentColumn = -1;
    #####:11669:            tp.m_os << "\n";
        -:11670:        }
    #####:11671:        tp.m_currentColumn++;
        -:11672:
    #####:11673:        auto colInfo = tp.m_columnInfos[tp.m_currentColumn];
    #####:11674:        auto padding = (strSize + 2 < static_cast<std::size_t>(colInfo.width))
    #####:11675:            ? std::string(colInfo.width - (strSize + 2), ' ')
    #####:11676:            : std::string();
    #####:11677:        if (colInfo.justification == ColumnInfo::Left)
    #####:11678:            tp.m_os << colStr << padding << " ";
        -:11679:        else
    #####:11680:            tp.m_os << padding << colStr << " ";
    #####:11681:        return tp;
        -:11682:    }
        -:11683:
    #####:11684:    friend TablePrinter& operator << (TablePrinter& tp, RowBreak) {
    #####:11685:        if (tp.m_currentColumn > 0) {
    #####:11686:            tp.m_os << "\n";
    #####:11687:            tp.m_currentColumn = -1;
        -:11688:        }
    #####:11689:        return tp;
        -:11690:    }
        -:11691:};
        -:11692:
    #####:11693:ConsoleReporter::ConsoleReporter(ReporterConfig const& config)
        -:11694:    : StreamingReporterBase(config),
        -:11695:    m_tablePrinter(new TablePrinter(config.stream(),
        -:11696:    {
        -:11697:        { "benchmark name", CATCH_CONFIG_CONSOLE_WIDTH - 32, ColumnInfo::Left },
        -:11698:        { "iters", 8, ColumnInfo::Right },
        -:11699:        { "elapsed ns", 14, ColumnInfo::Right },
        -:11700:        { "average", 14, ColumnInfo::Right }
    #####:11701:    })) {}
        -:11702:ConsoleReporter::~ConsoleReporter() = default;
        -:11703:
    #####:11704:std::string ConsoleReporter::getDescription() {
    #####:11705:    return "Reports test results as plain lines of text";
        -:11706:}
        -:11707:
    #####:11708:void ConsoleReporter::noMatchingTestCases(std::string const& spec) {
    #####:11709:    stream << "No test cases matched '" << spec << '\'' << std::endl;
    #####:11710:}
        -:11711:
    #####:11712:void ConsoleReporter::assertionStarting(AssertionInfo const&) {}
        -:11713:
    #####:11714:bool ConsoleReporter::assertionEnded(AssertionStats const& _assertionStats) {
    #####:11715:    AssertionResult const& result = _assertionStats.assertionResult;
        -:11716:
    #####:11717:    bool includeResults = m_config->includeSuccessfulResults() || !result.isOk();
        -:11718:
        -:11719:    // Drop out if result was successful but we're not printing them.
    #####:11720:    if (!includeResults && result.getResultType() != ResultWas::Warning)
    #####:11721:        return false;
        -:11722:
    #####:11723:    lazyPrint();
        -:11724:
    #####:11725:    ConsoleAssertionPrinter printer(stream, _assertionStats, includeResults);
    #####:11726:    printer.print();
    #####:11727:    stream << std::endl;
    #####:11728:    return true;
        -:11729:}
        -:11730:
    #####:11731:void ConsoleReporter::sectionStarting(SectionInfo const& _sectionInfo) {
    #####:11732:    m_headerPrinted = false;
    #####:11733:    StreamingReporterBase::sectionStarting(_sectionInfo);
    #####:11734:}
    #####:11735:void ConsoleReporter::sectionEnded(SectionStats const& _sectionStats) {
    #####:11736:    m_tablePrinter->close();
    #####:11737:    if (_sectionStats.missingAssertions) {
    #####:11738:        lazyPrint();
    #####:11739:        Colour colour(Colour::ResultError);
    #####:11740:        if (m_sectionStack.size() > 1)
    #####:11741:            stream << "\nNo assertions in section";
        -:11742:        else
    #####:11743:            stream << "\nNo assertions in test case";
    #####:11744:        stream << " '" << _sectionStats.sectionInfo.name << "'\n" << std::endl;
        -:11745:    }
    #####:11746:    if (m_config->showDurations() == ShowDurations::Always) {
    #####:11747:        stream << getFormattedDuration(_sectionStats.durationInSeconds) << " s: " << _sectionStats.sectionInfo.name << std::endl;
        -:11748:    }
    #####:11749:    if (m_headerPrinted) {
    #####:11750:        m_headerPrinted = false;
        -:11751:    }
    #####:11752:    StreamingReporterBase::sectionEnded(_sectionStats);
    #####:11753:}
        -:11754:
    #####:11755:void ConsoleReporter::benchmarkStarting(BenchmarkInfo const& info) {
    #####:11756:    lazyPrintWithoutClosingBenchmarkTable();
        -:11757:
    #####:11758:    auto nameCol = Column( info.name ).width( static_cast<std::size_t>( m_tablePrinter->columnInfos()[0].width - 2 ) );
        -:11759:
    #####:11760:    bool firstLine = true;
    #####:11761:    for (auto line : nameCol) {
    #####:11762:        if (!firstLine)
    #####:11763:            (*m_tablePrinter) << ColumnBreak() << ColumnBreak() << ColumnBreak();
        -:11764:        else
    #####:11765:            firstLine = false;
        -:11766:
    #####:11767:        (*m_tablePrinter) << line << ColumnBreak();
        -:11768:    }
    #####:11769:}
    #####:11770:void ConsoleReporter::benchmarkEnded(BenchmarkStats const& stats) {
    #####:11771:    Duration average(stats.elapsedTimeInNanoseconds / stats.iterations);
    #####:11772:    (*m_tablePrinter)
    #####:11773:        << stats.iterations << ColumnBreak()
    #####:11774:        << stats.elapsedTimeInNanoseconds << ColumnBreak()
    #####:11775:        << average << ColumnBreak();
    #####:11776:}
        -:11777:
    #####:11778:void ConsoleReporter::testCaseEnded(TestCaseStats const& _testCaseStats) {
    #####:11779:    m_tablePrinter->close();
    #####:11780:    StreamingReporterBase::testCaseEnded(_testCaseStats);
    #####:11781:    m_headerPrinted = false;
    #####:11782:}
    #####:11783:void ConsoleReporter::testGroupEnded(TestGroupStats const& _testGroupStats) {
    #####:11784:    if (currentGroupInfo.used) {
    #####:11785:        printSummaryDivider();
    #####:11786:        stream << "Summary for group '" << _testGroupStats.groupInfo.name << "':\n";
    #####:11787:        printTotals(_testGroupStats.totals);
    #####:11788:        stream << '\n' << std::endl;
        -:11789:    }
    #####:11790:    StreamingReporterBase::testGroupEnded(_testGroupStats);
    #####:11791:}
    #####:11792:void ConsoleReporter::testRunEnded(TestRunStats const& _testRunStats) {
    #####:11793:    printTotalsDivider(_testRunStats.totals);
    #####:11794:    printTotals(_testRunStats.totals);
    #####:11795:    stream << std::endl;
    #####:11796:    StreamingReporterBase::testRunEnded(_testRunStats);
    #####:11797:}
        -:11798:
    #####:11799:void ConsoleReporter::lazyPrint() {
        -:11800:
    #####:11801:    m_tablePrinter->close();
    #####:11802:    lazyPrintWithoutClosingBenchmarkTable();
    #####:11803:}
        -:11804:
    #####:11805:void ConsoleReporter::lazyPrintWithoutClosingBenchmarkTable() {
        -:11806:
    #####:11807:    if (!currentTestRunInfo.used)
    #####:11808:        lazyPrintRunInfo();
    #####:11809:    if (!currentGroupInfo.used)
    #####:11810:        lazyPrintGroupInfo();
        -:11811:
    #####:11812:    if (!m_headerPrinted) {
    #####:11813:        printTestCaseAndSectionHeader();
    #####:11814:        m_headerPrinted = true;
        -:11815:    }
    #####:11816:}
    #####:11817:void ConsoleReporter::lazyPrintRunInfo() {
    #####:11818:    stream << '\n' << getLineOfChars<'~'>() << '\n';
    #####:11819:    Colour colour(Colour::SecondaryText);
    #####:11820:    stream << currentTestRunInfo->name
    #####:11821:        << " is a Catch v" << libraryVersion() << " host application.\n"
    #####:11822:        << "Run with -? for options\n\n";
        -:11823:
    #####:11824:    if (m_config->rngSeed() != 0)
    #####:11825:        stream << "Randomness seeded to: " << m_config->rngSeed() << "\n\n";
        -:11826:
    #####:11827:    currentTestRunInfo.used = true;
    #####:11828:}
    #####:11829:void ConsoleReporter::lazyPrintGroupInfo() {
    #####:11830:    if (!currentGroupInfo->name.empty() && currentGroupInfo->groupsCounts > 1) {
    #####:11831:        printClosedHeader("Group: " + currentGroupInfo->name);
    #####:11832:        currentGroupInfo.used = true;
        -:11833:    }
    #####:11834:}
    #####:11835:void ConsoleReporter::printTestCaseAndSectionHeader() {
    #####:11836:    assert(!m_sectionStack.empty());
    #####:11837:    printOpenHeader(currentTestCaseInfo->name);
        -:11838:
    #####:11839:    if (m_sectionStack.size() > 1) {
    #####:11840:        Colour colourGuard(Colour::Headers);
        -:11841:
        -:11842:        auto
    #####:11843:            it = m_sectionStack.begin() + 1, // Skip first section (test case)
    #####:11844:            itEnd = m_sectionStack.end();
    #####:11845:        for (; it != itEnd; ++it)
    #####:11846:            printHeaderString(it->name, 2);
        -:11847:    }
        -:11848:
    #####:11849:    SourceLineInfo lineInfo = m_sectionStack.back().lineInfo;
        -:11850:
    #####:11851:    if (!lineInfo.empty()) {
    #####:11852:        stream << getLineOfChars<'-'>() << '\n';
    #####:11853:        Colour colourGuard(Colour::FileName);
    #####:11854:        stream << lineInfo << '\n';
        -:11855:    }
    #####:11856:    stream << getLineOfChars<'.'>() << '\n' << std::endl;
    #####:11857:}
        -:11858:
    #####:11859:void ConsoleReporter::printClosedHeader(std::string const& _name) {
    #####:11860:    printOpenHeader(_name);
    #####:11861:    stream << getLineOfChars<'.'>() << '\n';
    #####:11862:}
    #####:11863:void ConsoleReporter::printOpenHeader(std::string const& _name) {
    #####:11864:    stream << getLineOfChars<'-'>() << '\n';
        -:11865:    {
    #####:11866:        Colour colourGuard(Colour::Headers);
    #####:11867:        printHeaderString(_name);
        -:11868:    }
    #####:11869:}
        -:11870:
        -:11871:// if string has a : in first line will set indent to follow it on
        -:11872:// subsequent lines
    #####:11873:void ConsoleReporter::printHeaderString(std::string const& _string, std::size_t indent) {
    #####:11874:    std::size_t i = _string.find(": ");
    #####:11875:    if (i != std::string::npos)
    #####:11876:        i += 2;
        -:11877:    else
    #####:11878:        i = 0;
    #####:11879:    stream << Column(_string).indent(indent + i).initialIndent(indent) << '\n';
    #####:11880:}
        -:11881:
    #####:11882:struct SummaryColumn {
        -:11883:
    #####:11884:    SummaryColumn( std::string _label, Colour::Code _colour )
    #####:11885:    :   label( std::move( _label ) ),
    #####:11886:        colour( _colour ) {}
    #####:11887:    SummaryColumn addRow( std::size_t count ) {
    #####:11888:        ReusableStringStream rss;
    #####:11889:        rss << count;
    #####:11890:        std::string row = rss.str();
    #####:11891:        for (auto& oldRow : rows) {
    #####:11892:            while (oldRow.size() < row.size())
    #####:11893:                oldRow = ' ' + oldRow;
    #####:11894:            while (oldRow.size() > row.size())
    #####:11895:                row = ' ' + row;
        -:11896:        }
    #####:11897:        rows.push_back(row);
    #####:11898:        return *this;
        -:11899:    }
        -:11900:
        -:11901:    std::string label;
        -:11902:    Colour::Code colour;
        -:11903:    std::vector<std::string> rows;
        -:11904:
        -:11905:};
        -:11906:
    #####:11907:void ConsoleReporter::printTotals( Totals const& totals ) {
    #####:11908:    if (totals.testCases.total() == 0) {
    #####:11909:        stream << Colour(Colour::Warning) << "No tests ran\n";
    #####:11910:    } else if (totals.assertions.total() > 0 && totals.testCases.allPassed()) {
    #####:11911:        stream << Colour(Colour::ResultSuccess) << "All tests passed";
    #####:11912:        stream << " ("
    #####:11913:            << pluralise(totals.assertions.passed, "assertion") << " in "
    #####:11914:            << pluralise(totals.testCases.passed, "test case") << ')'
    #####:11915:            << '\n';
        -:11916:    } else {
        -:11917:
    #####:11918:        std::vector<SummaryColumn> columns;
    #####:11919:        columns.push_back(SummaryColumn("", Colour::None)
    #####:11920:                          .addRow(totals.testCases.total())
    #####:11921:                          .addRow(totals.assertions.total()));
    #####:11922:        columns.push_back(SummaryColumn("passed", Colour::Success)
    #####:11923:                          .addRow(totals.testCases.passed)
    #####:11924:                          .addRow(totals.assertions.passed));
    #####:11925:        columns.push_back(SummaryColumn("failed", Colour::ResultError)
    #####:11926:                          .addRow(totals.testCases.failed)
    #####:11927:                          .addRow(totals.assertions.failed));
    #####:11928:        columns.push_back(SummaryColumn("failed as expected", Colour::ResultExpectedFailure)
    #####:11929:                          .addRow(totals.testCases.failedButOk)
    #####:11930:                          .addRow(totals.assertions.failedButOk));
        -:11931:
    #####:11932:        printSummaryRow("test cases", columns, 0);
    #####:11933:        printSummaryRow("assertions", columns, 1);
        -:11934:    }
    #####:11935:}
    #####:11936:void ConsoleReporter::printSummaryRow(std::string const& label, std::vector<SummaryColumn> const& cols, std::size_t row) {
    #####:11937:    for (auto col : cols) {
    #####:11938:        std::string value = col.rows[row];
    #####:11939:        if (col.label.empty()) {
    #####:11940:            stream << label << ": ";
    #####:11941:            if (value != "0")
    #####:11942:                stream << value;
        -:11943:            else
    #####:11944:                stream << Colour(Colour::Warning) << "- none -";
    #####:11945:        } else if (value != "0") {
    #####:11946:            stream << Colour(Colour::LightGrey) << " | ";
    #####:11947:            stream << Colour(col.colour)
    #####:11948:                << value << ' ' << col.label;
        -:11949:        }
        -:11950:    }
    #####:11951:    stream << '\n';
    #####:11952:}
        -:11953:
    #####:11954:void ConsoleReporter::printTotalsDivider(Totals const& totals) {
    #####:11955:    if (totals.testCases.total() > 0) {
    #####:11956:        std::size_t failedRatio = makeRatio(totals.testCases.failed, totals.testCases.total());
    #####:11957:        std::size_t failedButOkRatio = makeRatio(totals.testCases.failedButOk, totals.testCases.total());
    #####:11958:        std::size_t passedRatio = makeRatio(totals.testCases.passed, totals.testCases.total());
    #####:11959:        while (failedRatio + failedButOkRatio + passedRatio < CATCH_CONFIG_CONSOLE_WIDTH - 1)
    #####:11960:            findMax(failedRatio, failedButOkRatio, passedRatio)++;
    #####:11961:        while (failedRatio + failedButOkRatio + passedRatio > CATCH_CONFIG_CONSOLE_WIDTH - 1)
    #####:11962:            findMax(failedRatio, failedButOkRatio, passedRatio)--;
        -:11963:
    #####:11964:        stream << Colour(Colour::Error) << std::string(failedRatio, '=');
    #####:11965:        stream << Colour(Colour::ResultExpectedFailure) << std::string(failedButOkRatio, '=');
    #####:11966:        if (totals.testCases.allPassed())
    #####:11967:            stream << Colour(Colour::ResultSuccess) << std::string(passedRatio, '=');
        -:11968:        else
    #####:11969:            stream << Colour(Colour::Success) << std::string(passedRatio, '=');
        -:11970:    } else {
    #####:11971:        stream << Colour(Colour::Warning) << std::string(CATCH_CONFIG_CONSOLE_WIDTH - 1, '=');
        -:11972:    }
    #####:11973:    stream << '\n';
    #####:11974:}
    #####:11975:void ConsoleReporter::printSummaryDivider() {
    #####:11976:    stream << getLineOfChars<'-'>() << '\n';
    #####:11977:}
        -:11978:
    #####:11979:CATCH_REGISTER_REPORTER("console", ConsoleReporter)
        -:11980:
        -:11981:} // end namespace Catch
        -:11982:
        -:11983:#if defined(_MSC_VER)
        -:11984:#pragma warning(pop)
        -:11985:#endif
        -:11986:// end catch_reporter_console.cpp
        -:11987:// start catch_reporter_junit.cpp
        -:11988:
        -:11989:#include <assert.h>
        -:11990:#include <sstream>
        -:11991:#include <ctime>
        -:11992:#include <algorithm>
        -:11993:
        -:11994:namespace Catch {
        -:11995:
        -:11996:    namespace {
    #####:11997:        std::string getCurrentTimestamp() {
        -:11998:            // Beware, this is not reentrant because of backward compatibility issues
        -:11999:            // Also, UTC only, again because of backward compatibility (%z is C++11)
        -:12000:            time_t rawtime;
    #####:12001:            std::time(&rawtime);
    #####:12002:            auto const timeStampSize = sizeof("2017-01-16T17:06:45Z");
        -:12003:
        -:12004:#ifdef _MSC_VER
        -:12005:            std::tm timeInfo = {};
        -:12006:            gmtime_s(&timeInfo, &rawtime);
        -:12007:#else
        -:12008:            std::tm* timeInfo;
    #####:12009:            timeInfo = std::gmtime(&rawtime);
        -:12010:#endif
        -:12011:
        -:12012:            char timeStamp[timeStampSize];
    #####:12013:            const char * const fmt = "%Y-%m-%dT%H:%M:%SZ";
        -:12014:
        -:12015:#ifdef _MSC_VER
        -:12016:            std::strftime(timeStamp, timeStampSize, fmt, &timeInfo);
        -:12017:#else
    #####:12018:            std::strftime(timeStamp, timeStampSize, fmt, timeInfo);
        -:12019:#endif
    #####:12020:            return std::string(timeStamp);
        -:12021:        }
        -:12022:
    #####:12023:        std::string fileNameTag(const std::vector<std::string> &tags) {
        -:12024:            auto it = std::find_if(begin(tags),
        -:12025:                                   end(tags),
    #####:12026:                                   [] (std::string const& tag) {return tag.front() == '#'; });
    #####:12027:            if (it != tags.end())
    #####:12028:                return it->substr(1);
    #####:12029:            return std::string();
        -:12030:        }
        -:12031:    } // anonymous namespace
        -:12032:
    #####:12033:    JunitReporter::JunitReporter( ReporterConfig const& _config )
        -:12034:        :   CumulativeReporterBase( _config ),
    #####:12035:            xml( _config.stream() )
        -:12036:        {
    #####:12037:            m_reporterPrefs.shouldRedirectStdOut = true;
    #####:12038:        }
        -:12039:
    #####:12040:    JunitReporter::~JunitReporter() {}
        -:12041:
    #####:12042:    std::string JunitReporter::getDescription() {
    #####:12043:        return "Reports test results in an XML format that looks like Ant's junitreport target";
        -:12044:    }
        -:12045:
    #####:12046:    void JunitReporter::noMatchingTestCases( std::string const& /*spec*/ ) {}
        -:12047:
    #####:12048:    void JunitReporter::testRunStarting( TestRunInfo const& runInfo )  {
    #####:12049:        CumulativeReporterBase::testRunStarting( runInfo );
    #####:12050:        xml.startElement( "testsuites" );
    #####:12051:    }
        -:12052:
    #####:12053:    void JunitReporter::testGroupStarting( GroupInfo const& groupInfo ) {
    #####:12054:        suiteTimer.start();
    #####:12055:        stdOutForSuite.clear();
    #####:12056:        stdErrForSuite.clear();
    #####:12057:        unexpectedExceptions = 0;
    #####:12058:        CumulativeReporterBase::testGroupStarting( groupInfo );
    #####:12059:    }
        -:12060:
    #####:12061:    void JunitReporter::testCaseStarting( TestCaseInfo const& testCaseInfo ) {
    #####:12062:        m_okToFail = testCaseInfo.okToFail();
    #####:12063:    }
        -:12064:
    #####:12065:    bool JunitReporter::assertionEnded( AssertionStats const& assertionStats ) {
    #####:12066:        if( assertionStats.assertionResult.getResultType() == ResultWas::ThrewException && !m_okToFail )
    #####:12067:            unexpectedExceptions++;
    #####:12068:        return CumulativeReporterBase::assertionEnded( assertionStats );
        -:12069:    }
        -:12070:
    #####:12071:    void JunitReporter::testCaseEnded( TestCaseStats const& testCaseStats ) {
    #####:12072:        stdOutForSuite += testCaseStats.stdOut;
    #####:12073:        stdErrForSuite += testCaseStats.stdErr;
    #####:12074:        CumulativeReporterBase::testCaseEnded( testCaseStats );
    #####:12075:    }
        -:12076:
    #####:12077:    void JunitReporter::testGroupEnded( TestGroupStats const& testGroupStats ) {
    #####:12078:        double suiteTime = suiteTimer.getElapsedSeconds();
    #####:12079:        CumulativeReporterBase::testGroupEnded( testGroupStats );
    #####:12080:        writeGroup( *m_testGroups.back(), suiteTime );
    #####:12081:    }
        -:12082:
    #####:12083:    void JunitReporter::testRunEndedCumulative() {
    #####:12084:        xml.endElement();
    #####:12085:    }
        -:12086:
    #####:12087:    void JunitReporter::writeGroup( TestGroupNode const& groupNode, double suiteTime ) {
    #####:12088:        XmlWriter::ScopedElement e = xml.scopedElement( "testsuite" );
    #####:12089:        TestGroupStats const& stats = groupNode.value;
    #####:12090:        xml.writeAttribute( "name", stats.groupInfo.name );
    #####:12091:        xml.writeAttribute( "errors", unexpectedExceptions );
    #####:12092:        xml.writeAttribute( "failures", stats.totals.assertions.failed-unexpectedExceptions );
    #####:12093:        xml.writeAttribute( "tests", stats.totals.assertions.total() );
    #####:12094:        xml.writeAttribute( "hostname", "tbd" ); // !TBD
    #####:12095:        if( m_config->showDurations() == ShowDurations::Never )
    #####:12096:            xml.writeAttribute( "time", "" );
        -:12097:        else
    #####:12098:            xml.writeAttribute( "time", suiteTime );
    #####:12099:        xml.writeAttribute( "timestamp", getCurrentTimestamp() );
        -:12100:
        -:12101:        // Write test cases
    #####:12102:        for( auto const& child : groupNode.children )
    #####:12103:            writeTestCase( *child );
        -:12104:
    #####:12105:        xml.scopedElement( "system-out" ).writeText( trim( stdOutForSuite ), false );
    #####:12106:        xml.scopedElement( "system-err" ).writeText( trim( stdErrForSuite ), false );
    #####:12107:    }
        -:12108:
    #####:12109:    void JunitReporter::writeTestCase( TestCaseNode const& testCaseNode ) {
    #####:12110:        TestCaseStats const& stats = testCaseNode.value;
        -:12111:
        -:12112:        // All test cases have exactly one section - which represents the
        -:12113:        // test case itself. That section may have 0-n nested sections
    #####:12114:        assert( testCaseNode.children.size() == 1 );
    #####:12115:        SectionNode const& rootSection = *testCaseNode.children.front();
        -:12116:
    #####:12117:        std::string className = stats.testInfo.className;
        -:12118:
    #####:12119:        if( className.empty() ) {
    #####:12120:            className = fileNameTag(stats.testInfo.tags);
    #####:12121:            if ( className.empty() )
    #####:12122:                className = "global";
        -:12123:        }
        -:12124:
    #####:12125:        if ( !m_config->name().empty() )
    #####:12126:            className = m_config->name() + "." + className;
        -:12127:
    #####:12128:        writeSection( className, "", rootSection );
    #####:12129:    }
        -:12130:
    #####:12131:    void JunitReporter::writeSection(  std::string const& className,
        -:12132:                        std::string const& rootName,
        -:12133:                        SectionNode const& sectionNode ) {
    #####:12134:        std::string name = trim( sectionNode.stats.sectionInfo.name );
    #####:12135:        if( !rootName.empty() )
    #####:12136:            name = rootName + '/' + name;
        -:12137:
    #####:12138:        if( !sectionNode.assertions.empty() ||
    #####:12139:            !sectionNode.stdOut.empty() ||
    #####:12140:            !sectionNode.stdErr.empty() ) {
    #####:12141:            XmlWriter::ScopedElement e = xml.scopedElement( "testcase" );
    #####:12142:            if( className.empty() ) {
    #####:12143:                xml.writeAttribute( "classname", name );
    #####:12144:                xml.writeAttribute( "name", "root" );
        -:12145:            }
        -:12146:            else {
    #####:12147:                xml.writeAttribute( "classname", className );
    #####:12148:                xml.writeAttribute( "name", name );
        -:12149:            }
    #####:12150:            xml.writeAttribute( "time", ::Catch::Detail::stringify( sectionNode.stats.durationInSeconds ) );
        -:12151:
    #####:12152:            writeAssertions( sectionNode );
        -:12153:
    #####:12154:            if( !sectionNode.stdOut.empty() )
    #####:12155:                xml.scopedElement( "system-out" ).writeText( trim( sectionNode.stdOut ), false );
    #####:12156:            if( !sectionNode.stdErr.empty() )
    #####:12157:                xml.scopedElement( "system-err" ).writeText( trim( sectionNode.stdErr ), false );
        -:12158:        }
    #####:12159:        for( auto const& childNode : sectionNode.childSections )
    #####:12160:            if( className.empty() )
    #####:12161:                writeSection( name, "", *childNode );
        -:12162:            else
    #####:12163:                writeSection( className, name, *childNode );
    #####:12164:    }
        -:12165:
    #####:12166:    void JunitReporter::writeAssertions( SectionNode const& sectionNode ) {
    #####:12167:        for( auto const& assertion : sectionNode.assertions )
    #####:12168:            writeAssertion( assertion );
    #####:12169:    }
        -:12170:
    #####:12171:    void JunitReporter::writeAssertion( AssertionStats const& stats ) {
    #####:12172:        AssertionResult const& result = stats.assertionResult;
    #####:12173:        if( !result.isOk() ) {
    #####:12174:            std::string elementName;
    #####:12175:            switch( result.getResultType() ) {
        -:12176:                case ResultWas::ThrewException:
        -:12177:                case ResultWas::FatalErrorCondition:
    #####:12178:                    elementName = "error";
    #####:12179:                    break;
        -:12180:                case ResultWas::ExplicitFailure:
    #####:12181:                    elementName = "failure";
    #####:12182:                    break;
        -:12183:                case ResultWas::ExpressionFailed:
    #####:12184:                    elementName = "failure";
    #####:12185:                    break;
        -:12186:                case ResultWas::DidntThrowException:
    #####:12187:                    elementName = "failure";
    #####:12188:                    break;
        -:12189:
        -:12190:                // We should never see these here:
        -:12191:                case ResultWas::Info:
        -:12192:                case ResultWas::Warning:
        -:12193:                case ResultWas::Ok:
        -:12194:                case ResultWas::Unknown:
        -:12195:                case ResultWas::FailureBit:
        -:12196:                case ResultWas::Exception:
    #####:12197:                    elementName = "internalError";
    #####:12198:                    break;
        -:12199:            }
        -:12200:
    #####:12201:            XmlWriter::ScopedElement e = xml.scopedElement( elementName );
        -:12202:
    #####:12203:            xml.writeAttribute( "message", result.getExpandedExpression() );
    #####:12204:            xml.writeAttribute( "type", result.getTestMacroName() );
        -:12205:
    #####:12206:            ReusableStringStream rss;
    #####:12207:            if( !result.getMessage().empty() )
    #####:12208:                rss << result.getMessage() << '\n';
    #####:12209:            for( auto const& msg : stats.infoMessages )
    #####:12210:                if( msg.type == ResultWas::Info )
    #####:12211:                    rss << msg.message << '\n';
        -:12212:
    #####:12213:            rss << "at " << result.getSourceInfo();
    #####:12214:            xml.writeText( rss.str(), false );
        -:12215:        }
    #####:12216:    }
        -:12217:
    #####:12218:    CATCH_REGISTER_REPORTER( "junit", JunitReporter )
        -:12219:
        -:12220:} // end namespace Catch
        -:12221:// end catch_reporter_junit.cpp
        -:12222:// start catch_reporter_multi.cpp
        -:12223:
        -:12224:namespace Catch {
        -:12225:
    #####:12226:    void MultipleReporters::add( IStreamingReporterPtr&& reporter ) {
    #####:12227:        m_reporters.push_back( std::move( reporter ) );
    #####:12228:    }
        -:12229:
    #####:12230:    ReporterPreferences MultipleReporters::getPreferences() const {
    #####:12231:        return m_reporters[0]->getPreferences();
        -:12232:    }
        -:12233:
    #####:12234:    std::set<Verbosity> MultipleReporters::getSupportedVerbosities() {
    #####:12235:        return std::set<Verbosity>{ };
        -:12236:    }
        -:12237:
    #####:12238:    void MultipleReporters::noMatchingTestCases( std::string const& spec ) {
    #####:12239:        for( auto const& reporter : m_reporters )
    #####:12240:            reporter->noMatchingTestCases( spec );
    #####:12241:    }
        -:12242:
    #####:12243:    void MultipleReporters::benchmarkStarting( BenchmarkInfo const& benchmarkInfo ) {
    #####:12244:        for( auto const& reporter : m_reporters )
    #####:12245:            reporter->benchmarkStarting( benchmarkInfo );
    #####:12246:    }
    #####:12247:    void MultipleReporters::benchmarkEnded( BenchmarkStats const& benchmarkStats ) {
    #####:12248:        for( auto const& reporter : m_reporters )
    #####:12249:            reporter->benchmarkEnded( benchmarkStats );
    #####:12250:    }
        -:12251:
    #####:12252:    void MultipleReporters::testRunStarting( TestRunInfo const& testRunInfo ) {
    #####:12253:        for( auto const& reporter : m_reporters )
    #####:12254:            reporter->testRunStarting( testRunInfo );
    #####:12255:    }
        -:12256:
    #####:12257:    void MultipleReporters::testGroupStarting( GroupInfo const& groupInfo ) {
    #####:12258:        for( auto const& reporter : m_reporters )
    #####:12259:            reporter->testGroupStarting( groupInfo );
    #####:12260:    }
        -:12261:
    #####:12262:    void MultipleReporters::testCaseStarting( TestCaseInfo const& testInfo ) {
    #####:12263:        for( auto const& reporter : m_reporters )
    #####:12264:            reporter->testCaseStarting( testInfo );
    #####:12265:    }
        -:12266:
    #####:12267:    void MultipleReporters::sectionStarting( SectionInfo const& sectionInfo ) {
    #####:12268:        for( auto const& reporter : m_reporters )
    #####:12269:            reporter->sectionStarting( sectionInfo );
    #####:12270:    }
        -:12271:
    #####:12272:    void MultipleReporters::assertionStarting( AssertionInfo const& assertionInfo ) {
    #####:12273:        for( auto const& reporter : m_reporters )
    #####:12274:            reporter->assertionStarting( assertionInfo );
    #####:12275:    }
        -:12276:
        -:12277:    // The return value indicates if the messages buffer should be cleared:
    #####:12278:    bool MultipleReporters::assertionEnded( AssertionStats const& assertionStats ) {
    #####:12279:        bool clearBuffer = false;
    #####:12280:        for( auto const& reporter : m_reporters )
    #####:12281:            clearBuffer |= reporter->assertionEnded( assertionStats );
    #####:12282:        return clearBuffer;
        -:12283:    }
        -:12284:
    #####:12285:    void MultipleReporters::sectionEnded( SectionStats const& sectionStats ) {
    #####:12286:        for( auto const& reporter : m_reporters )
    #####:12287:            reporter->sectionEnded( sectionStats );
    #####:12288:    }
        -:12289:
    #####:12290:    void MultipleReporters::testCaseEnded( TestCaseStats const& testCaseStats ) {
    #####:12291:        for( auto const& reporter : m_reporters )
    #####:12292:            reporter->testCaseEnded( testCaseStats );
    #####:12293:    }
        -:12294:
    #####:12295:    void MultipleReporters::testGroupEnded( TestGroupStats const& testGroupStats ) {
    #####:12296:        for( auto const& reporter : m_reporters )
    #####:12297:            reporter->testGroupEnded( testGroupStats );
    #####:12298:    }
        -:12299:
    #####:12300:    void MultipleReporters::testRunEnded( TestRunStats const& testRunStats ) {
    #####:12301:        for( auto const& reporter : m_reporters )
    #####:12302:            reporter->testRunEnded( testRunStats );
    #####:12303:    }
        -:12304:
    #####:12305:    void MultipleReporters::skipTest( TestCaseInfo const& testInfo ) {
    #####:12306:        for( auto const& reporter : m_reporters )
    #####:12307:            reporter->skipTest( testInfo );
    #####:12308:    }
        -:12309:
    #####:12310:    bool MultipleReporters::isMulti() const {
    #####:12311:        return true;
        -:12312:    }
        -:12313:
        -:12314:} // end namespace Catch
        -:12315:// end catch_reporter_multi.cpp
        -:12316:// start catch_reporter_xml.cpp
        -:12317:
        -:12318:#if defined(_MSC_VER)
        -:12319:#pragma warning(push)
        -:12320:#pragma warning(disable:4061) // Not all labels are EXPLICITLY handled in switch
        -:12321:                              // Note that 4062 (not all labels are handled
        -:12322:                              // and default is missing) is enabled
        -:12323:#endif
        -:12324:
        -:12325:namespace Catch {
    #####:12326:    XmlReporter::XmlReporter( ReporterConfig const& _config )
        -:12327:    :   StreamingReporterBase( _config ),
    #####:12328:        m_xml(_config.stream())
        -:12329:    {
    #####:12330:        m_reporterPrefs.shouldRedirectStdOut = true;
    #####:12331:    }
        -:12332:
        -:12333:    XmlReporter::~XmlReporter() = default;
        -:12334:
    #####:12335:    std::string XmlReporter::getDescription() {
    #####:12336:        return "Reports test results as an XML document";
        -:12337:    }
        -:12338:
    #####:12339:    std::string XmlReporter::getStylesheetRef() const {
    #####:12340:        return std::string();
        -:12341:    }
        -:12342:
    #####:12343:    void XmlReporter::writeSourceInfo( SourceLineInfo const& sourceInfo ) {
        -:12344:        m_xml
    #####:12345:            .writeAttribute( "filename", sourceInfo.file )
    #####:12346:            .writeAttribute( "line", sourceInfo.line );
    #####:12347:    }
        -:12348:
    #####:12349:    void XmlReporter::noMatchingTestCases( std::string const& s ) {
    #####:12350:        StreamingReporterBase::noMatchingTestCases( s );
    #####:12351:    }
        -:12352:
    #####:12353:    void XmlReporter::testRunStarting( TestRunInfo const& testInfo ) {
    #####:12354:        StreamingReporterBase::testRunStarting( testInfo );
    #####:12355:        std::string stylesheetRef = getStylesheetRef();
    #####:12356:        if( !stylesheetRef.empty() )
    #####:12357:            m_xml.writeStylesheetRef( stylesheetRef );
    #####:12358:        m_xml.startElement( "Catch" );
    #####:12359:        if( !m_config->name().empty() )
    #####:12360:            m_xml.writeAttribute( "name", m_config->name() );
    #####:12361:    }
        -:12362:
    #####:12363:    void XmlReporter::testGroupStarting( GroupInfo const& groupInfo ) {
    #####:12364:        StreamingReporterBase::testGroupStarting( groupInfo );
    #####:12365:        m_xml.startElement( "Group" )
    #####:12366:            .writeAttribute( "name", groupInfo.name );
    #####:12367:    }
        -:12368:
    #####:12369:    void XmlReporter::testCaseStarting( TestCaseInfo const& testInfo ) {
    #####:12370:        StreamingReporterBase::testCaseStarting(testInfo);
    #####:12371:        m_xml.startElement( "TestCase" )
    #####:12372:            .writeAttribute( "name", trim( testInfo.name ) )
    #####:12373:            .writeAttribute( "description", testInfo.description )
    #####:12374:            .writeAttribute( "tags", testInfo.tagsAsString() );
        -:12375:
    #####:12376:        writeSourceInfo( testInfo.lineInfo );
        -:12377:
    #####:12378:        if ( m_config->showDurations() == ShowDurations::Always )
    #####:12379:            m_testCaseTimer.start();
    #####:12380:        m_xml.ensureTagClosed();
    #####:12381:    }
        -:12382:
    #####:12383:    void XmlReporter::sectionStarting( SectionInfo const& sectionInfo ) {
    #####:12384:        StreamingReporterBase::sectionStarting( sectionInfo );
    #####:12385:        if( m_sectionDepth++ > 0 ) {
    #####:12386:            m_xml.startElement( "Section" )
    #####:12387:                .writeAttribute( "name", trim( sectionInfo.name ) )
    #####:12388:                .writeAttribute( "description", sectionInfo.description );
    #####:12389:            writeSourceInfo( sectionInfo.lineInfo );
    #####:12390:            m_xml.ensureTagClosed();
        -:12391:        }
    #####:12392:    }
        -:12393:
    #####:12394:    void XmlReporter::assertionStarting( AssertionInfo const& ) { }
        -:12395:
    #####:12396:    bool XmlReporter::assertionEnded( AssertionStats const& assertionStats ) {
        -:12397:
    #####:12398:        AssertionResult const& result = assertionStats.assertionResult;
        -:12399:
    #####:12400:        bool includeResults = m_config->includeSuccessfulResults() || !result.isOk();
        -:12401:
    #####:12402:        if( includeResults || result.getResultType() == ResultWas::Warning ) {
        -:12403:            // Print any info messages in <Info> tags.
    #####:12404:            for( auto const& msg : assertionStats.infoMessages ) {
    #####:12405:                if( msg.type == ResultWas::Info && includeResults ) {
    #####:12406:                    m_xml.scopedElement( "Info" )
    #####:12407:                            .writeText( msg.message );
    #####:12408:                } else if ( msg.type == ResultWas::Warning ) {
    #####:12409:                    m_xml.scopedElement( "Warning" )
    #####:12410:                            .writeText( msg.message );
        -:12411:                }
        -:12412:            }
        -:12413:        }
        -:12414:
        -:12415:        // Drop out if result was successful but we're not printing them.
    #####:12416:        if( !includeResults && result.getResultType() != ResultWas::Warning )
    #####:12417:            return true;
        -:12418:
        -:12419:        // Print the expression if there is one.
    #####:12420:        if( result.hasExpression() ) {
    #####:12421:            m_xml.startElement( "Expression" )
    #####:12422:                .writeAttribute( "success", result.succeeded() )
    #####:12423:                .writeAttribute( "type", result.getTestMacroName() );
        -:12424:
    #####:12425:            writeSourceInfo( result.getSourceInfo() );
        -:12426:
    #####:12427:            m_xml.scopedElement( "Original" )
    #####:12428:                .writeText( result.getExpression() );
    #####:12429:            m_xml.scopedElement( "Expanded" )
    #####:12430:                .writeText( result.getExpandedExpression() );
        -:12431:        }
        -:12432:
        -:12433:        // And... Print a result applicable to each result type.
    #####:12434:        switch( result.getResultType() ) {
        -:12435:            case ResultWas::ThrewException:
    #####:12436:                m_xml.startElement( "Exception" );
    #####:12437:                writeSourceInfo( result.getSourceInfo() );
    #####:12438:                m_xml.writeText( result.getMessage() );
    #####:12439:                m_xml.endElement();
    #####:12440:                break;
        -:12441:            case ResultWas::FatalErrorCondition:
    #####:12442:                m_xml.startElement( "FatalErrorCondition" );
    #####:12443:                writeSourceInfo( result.getSourceInfo() );
    #####:12444:                m_xml.writeText( result.getMessage() );
    #####:12445:                m_xml.endElement();
    #####:12446:                break;
        -:12447:            case ResultWas::Info:
    #####:12448:                m_xml.scopedElement( "Info" )
    #####:12449:                    .writeText( result.getMessage() );
    #####:12450:                break;
        -:12451:            case ResultWas::Warning:
        -:12452:                // Warning will already have been written
    #####:12453:                break;
        -:12454:            case ResultWas::ExplicitFailure:
    #####:12455:                m_xml.startElement( "Failure" );
    #####:12456:                writeSourceInfo( result.getSourceInfo() );
    #####:12457:                m_xml.writeText( result.getMessage() );
    #####:12458:                m_xml.endElement();
    #####:12459:                break;
        -:12460:            default:
    #####:12461:                break;
        -:12462:        }
        -:12463:
    #####:12464:        if( result.hasExpression() )
    #####:12465:            m_xml.endElement();
        -:12466:
    #####:12467:        return true;
        -:12468:    }
        -:12469:
    #####:12470:    void XmlReporter::sectionEnded( SectionStats const& sectionStats ) {
    #####:12471:        StreamingReporterBase::sectionEnded( sectionStats );
    #####:12472:        if( --m_sectionDepth > 0 ) {
    #####:12473:            XmlWriter::ScopedElement e = m_xml.scopedElement( "OverallResults" );
    #####:12474:            e.writeAttribute( "successes", sectionStats.assertions.passed );
    #####:12475:            e.writeAttribute( "failures", sectionStats.assertions.failed );
    #####:12476:            e.writeAttribute( "expectedFailures", sectionStats.assertions.failedButOk );
        -:12477:
    #####:12478:            if ( m_config->showDurations() == ShowDurations::Always )
    #####:12479:                e.writeAttribute( "durationInSeconds", sectionStats.durationInSeconds );
        -:12480:
    #####:12481:            m_xml.endElement();
        -:12482:        }
    #####:12483:    }
        -:12484:
    #####:12485:    void XmlReporter::testCaseEnded( TestCaseStats const& testCaseStats ) {
    #####:12486:        StreamingReporterBase::testCaseEnded( testCaseStats );
    #####:12487:        XmlWriter::ScopedElement e = m_xml.scopedElement( "OverallResult" );
    #####:12488:        e.writeAttribute( "success", testCaseStats.totals.assertions.allOk() );
        -:12489:
    #####:12490:        if ( m_config->showDurations() == ShowDurations::Always )
    #####:12491:            e.writeAttribute( "durationInSeconds", m_testCaseTimer.getElapsedSeconds() );
        -:12492:
    #####:12493:        if( !testCaseStats.stdOut.empty() )
    #####:12494:            m_xml.scopedElement( "StdOut" ).writeText( trim( testCaseStats.stdOut ), false );
    #####:12495:        if( !testCaseStats.stdErr.empty() )
    #####:12496:            m_xml.scopedElement( "StdErr" ).writeText( trim( testCaseStats.stdErr ), false );
        -:12497:
    #####:12498:        m_xml.endElement();
    #####:12499:    }
        -:12500:
    #####:12501:    void XmlReporter::testGroupEnded( TestGroupStats const& testGroupStats ) {
    #####:12502:        StreamingReporterBase::testGroupEnded( testGroupStats );
        -:12503:        // TODO: Check testGroupStats.aborting and act accordingly.
    #####:12504:        m_xml.scopedElement( "OverallResults" )
    #####:12505:            .writeAttribute( "successes", testGroupStats.totals.assertions.passed )
    #####:12506:            .writeAttribute( "failures", testGroupStats.totals.assertions.failed )
    #####:12507:            .writeAttribute( "expectedFailures", testGroupStats.totals.assertions.failedButOk );
    #####:12508:        m_xml.endElement();
    #####:12509:    }
        -:12510:
    #####:12511:    void XmlReporter::testRunEnded( TestRunStats const& testRunStats ) {
    #####:12512:        StreamingReporterBase::testRunEnded( testRunStats );
    #####:12513:        m_xml.scopedElement( "OverallResults" )
    #####:12514:            .writeAttribute( "successes", testRunStats.totals.assertions.passed )
    #####:12515:            .writeAttribute( "failures", testRunStats.totals.assertions.failed )
    #####:12516:            .writeAttribute( "expectedFailures", testRunStats.totals.assertions.failedButOk );
    #####:12517:        m_xml.endElement();
    #####:12518:    }
        -:12519:
    #####:12520:    CATCH_REGISTER_REPORTER( "xml", XmlReporter )
        -:12521:
        -:12522:} // end namespace Catch
        -:12523:
        -:12524:#if defined(_MSC_VER)
        -:12525:#pragma warning(pop)
        -:12526:#endif
        -:12527:// end catch_reporter_xml.cpp
        -:12528:
        -:12529:namespace Catch {
    #####:12530:    LeakDetector leakDetector;
        -:12531:}
        -:12532:
        -:12533:#ifdef __clang__
        -:12534:#pragma clang diagnostic pop
        -:12535:#endif
        -:12536:
        -:12537:// end catch_impl.hpp
        -:12538:#endif
        -:12539:
        -:12540:#ifdef CATCH_CONFIG_MAIN
        -:12541:// start catch_default_main.hpp
        -:12542:
        -:12543:#ifndef __OBJC__
        -:12544:
        -:12545:#if defined(CATCH_CONFIG_WCHAR) && defined(WIN32) && defined(_UNICODE) && !defined(DO_NOT_USE_WMAIN)
        -:12546:// Standard C/C++ Win32 Unicode wmain entry point
        -:12547:extern "C" int wmain (int argc, wchar_t * argv[], wchar_t * []) {
        -:12548:#else
        -:12549:// Standard C/C++ main entry point
    #####:12550:int main (int argc, char * argv[]) {
        -:12551:#endif
        -:12552:
    #####:12553:    return Catch::Session().run( argc, argv );
        -:12554:}
        -:12555:
        -:12556:#else // __OBJC__
        -:12557:
        -:12558:// Objective-C entry point
        -:12559:int main (int argc, char * const argv[]) {
        -:12560:#if !CATCH_ARC_ENABLED
        -:12561:    NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];
        -:12562:#endif
        -:12563:
        -:12564:    Catch::registerTestMethods();
        -:12565:    int result = Catch::Session().run( argc, (char**)argv );
        -:12566:
        -:12567:#if !CATCH_ARC_ENABLED
        -:12568:    [pool drain];
        -:12569:#endif
        -:12570:
        -:12571:    return result;
        -:12572:}
        -:12573:
        -:12574:#endif // __OBJC__
        -:12575:
        -:12576:// end catch_default_main.hpp
        -:12577:#endif
        -:12578:
        -:12579:#if !defined(CATCH_CONFIG_IMPL_ONLY)
        -:12580:
        -:12581:#ifdef CLARA_CONFIG_MAIN_NOT_DEFINED
        -:12582:#  undef CLARA_CONFIG_MAIN
        -:12583:#endif
        -:12584:
        -:12585:#if !defined(CATCH_CONFIG_DISABLE)
        -:12586://////
        -:12587:// If this config identifier is defined then all CATCH macros are prefixed with CATCH_
        -:12588:#ifdef CATCH_CONFIG_PREFIX_ALL
        -:12589:
        -:12590:#define CATCH_REQUIRE( ... ) INTERNAL_CATCH_TEST( "CATCH_REQUIRE", Catch::ResultDisposition::Normal, __VA_ARGS__ )
        -:12591:#define CATCH_REQUIRE_FALSE( ... ) INTERNAL_CATCH_TEST( "CATCH_REQUIRE_FALSE", Catch::ResultDisposition::Normal | Catch::ResultDisposition::FalseTest, __VA_ARGS__ )
        -:12592:
        -:12593:#define CATCH_REQUIRE_THROWS( ... ) INTERNAL_CATCH_THROWS( "CATCH_REQUIRE_THROWS", Catch::ResultDisposition::Normal, "", __VA_ARGS__ )
        -:12594:#define CATCH_REQUIRE_THROWS_AS( expr, exceptionType ) INTERNAL_CATCH_THROWS_AS( "CATCH_REQUIRE_THROWS_AS", exceptionType, Catch::ResultDisposition::Normal, expr )
        -:12595:#define CATCH_REQUIRE_THROWS_WITH( expr, matcher ) INTERNAL_CATCH_THROWS_STR_MATCHES( "CATCH_REQUIRE_THROWS_WITH", Catch::ResultDisposition::Normal, matcher, expr )
        -:12596:#if !defined(CATCH_CONFIG_DISABLE_MATCHERS)
        -:12597:#define CATCH_REQUIRE_THROWS_MATCHES( expr, exceptionType, matcher ) INTERNAL_CATCH_THROWS_MATCHES( "CATCH_REQUIRE_THROWS_MATCHES", exceptionType, Catch::ResultDisposition::Normal, matcher, expr )
        -:12598:#endif// CATCH_CONFIG_DISABLE_MATCHERS
        -:12599:#define CATCH_REQUIRE_NOTHROW( ... ) INTERNAL_CATCH_NO_THROW( "CATCH_REQUIRE_NOTHROW", Catch::ResultDisposition::Normal, __VA_ARGS__ )
        -:12600:
        -:12601:#define CATCH_CHECK( ... ) INTERNAL_CATCH_TEST( "CATCH_CHECK", Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )
        -:12602:#define CATCH_CHECK_FALSE( ... ) INTERNAL_CATCH_TEST( "CATCH_CHECK_FALSE", Catch::ResultDisposition::ContinueOnFailure | Catch::ResultDisposition::FalseTest, __VA_ARGS__ )
        -:12603:#define CATCH_CHECKED_IF( ... ) INTERNAL_CATCH_IF( "CATCH_CHECKED_IF", Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )
        -:12604:#define CATCH_CHECKED_ELSE( ... ) INTERNAL_CATCH_ELSE( "CATCH_CHECKED_ELSE", Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )
        -:12605:#define CATCH_CHECK_NOFAIL( ... ) INTERNAL_CATCH_TEST( "CATCH_CHECK_NOFAIL", Catch::ResultDisposition::ContinueOnFailure | Catch::ResultDisposition::SuppressFail, __VA_ARGS__ )
        -:12606:
        -:12607:#define CATCH_CHECK_THROWS( ... )  INTERNAL_CATCH_THROWS( "CATCH_CHECK_THROWS", Catch::ResultDisposition::ContinueOnFailure, "", __VA_ARGS__ )
        -:12608:#define CATCH_CHECK_THROWS_AS( expr, exceptionType ) INTERNAL_CATCH_THROWS_AS( "CATCH_CHECK_THROWS_AS", exceptionType, Catch::ResultDisposition::ContinueOnFailure, expr )
        -:12609:#define CATCH_CHECK_THROWS_WITH( expr, matcher ) INTERNAL_CATCH_THROWS_STR_MATCHES( "CATCH_CHECK_THROWS_WITH", Catch::ResultDisposition::ContinueOnFailure, matcher, expr )
        -:12610:#if !defined(CATCH_CONFIG_DISABLE_MATCHERS)
        -:12611:#define CATCH_CHECK_THROWS_MATCHES( expr, exceptionType, matcher ) INTERNAL_CATCH_THROWS_MATCHES( "CATCH_CHECK_THROWS_MATCHES", exceptionType, Catch::ResultDisposition::ContinueOnFailure, matcher, expr )
        -:12612:#endif // CATCH_CONFIG_DISABLE_MATCHERS
        -:12613:#define CATCH_CHECK_NOTHROW( ... ) INTERNAL_CATCH_NO_THROW( "CATCH_CHECK_NOTHROW", Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )
        -:12614:
        -:12615:#if !defined(CATCH_CONFIG_DISABLE_MATCHERS)
        -:12616:#define CATCH_CHECK_THAT( arg, matcher ) INTERNAL_CHECK_THAT( "CATCH_CHECK_THAT", matcher, Catch::ResultDisposition::ContinueOnFailure, arg )
        -:12617:
        -:12618:#define CATCH_REQUIRE_THAT( arg, matcher ) INTERNAL_CHECK_THAT( "CATCH_REQUIRE_THAT", matcher, Catch::ResultDisposition::Normal, arg )
        -:12619:#endif // CATCH_CONFIG_DISABLE_MATCHERS
        -:12620:
        -:12621:#define CATCH_INFO( msg ) INTERNAL_CATCH_INFO( "CATCH_INFO", msg )
        -:12622:#define CATCH_WARN( msg ) INTERNAL_CATCH_MSG( "CATCH_WARN", Catch::ResultWas::Warning, Catch::ResultDisposition::ContinueOnFailure, msg )
        -:12623:#define CATCH_CAPTURE( msg ) INTERNAL_CATCH_INFO( "CATCH_CAPTURE", #msg " := " << ::Catch::Detail::stringify(msg) )
        -:12624:
        -:12625:#define CATCH_TEST_CASE( ... ) INTERNAL_CATCH_TESTCASE( __VA_ARGS__ )
        -:12626:#define CATCH_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_TEST_CASE_METHOD( className, __VA_ARGS__ )
        -:12627:#define CATCH_METHOD_AS_TEST_CASE( method, ... ) INTERNAL_CATCH_METHOD_AS_TEST_CASE( method, __VA_ARGS__ )
        -:12628:#define CATCH_REGISTER_TEST_CASE( Function, ... ) INTERNAL_CATCH_REGISTER_TESTCASE( Function, __VA_ARGS__ )
        -:12629:#define CATCH_SECTION( ... ) INTERNAL_CATCH_SECTION( __VA_ARGS__ )
        -:12630:#define CATCH_FAIL( ... ) INTERNAL_CATCH_MSG( "CATCH_FAIL", Catch::ResultWas::ExplicitFailure, Catch::ResultDisposition::Normal, __VA_ARGS__ )
        -:12631:#define CATCH_FAIL_CHECK( ... ) INTERNAL_CATCH_MSG( "CATCH_FAIL_CHECK", Catch::ResultWas::ExplicitFailure, Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )
        -:12632:#define CATCH_SUCCEED( ... ) INTERNAL_CATCH_MSG( "CATCH_SUCCEED", Catch::ResultWas::Ok, Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )
        -:12633:
        -:12634:#define CATCH_ANON_TEST_CASE() INTERNAL_CATCH_TESTCASE()
        -:12635:
        -:12636:// "BDD-style" convenience wrappers
        -:12637:#define CATCH_SCENARIO( ... ) CATCH_TEST_CASE( "Scenario: " __VA_ARGS__ )
        -:12638:#define CATCH_SCENARIO_METHOD( className, ... ) INTERNAL_CATCH_TEST_CASE_METHOD( className, "Scenario: " __VA_ARGS__ )
        -:12639:#define CATCH_GIVEN( desc )    CATCH_SECTION( std::string( "Given: ") + desc )
        -:12640:#define CATCH_WHEN( desc )     CATCH_SECTION( std::string( " When: ") + desc )
        -:12641:#define CATCH_AND_WHEN( desc ) CATCH_SECTION( std::string( "  And: ") + desc )
        -:12642:#define CATCH_THEN( desc )     CATCH_SECTION( std::string( " Then: ") + desc )
        -:12643:#define CATCH_AND_THEN( desc ) CATCH_SECTION( std::string( "  And: ") + desc )
        -:12644:
        -:12645:// If CATCH_CONFIG_PREFIX_ALL is not defined then the CATCH_ prefix is not required
        -:12646:#else
        -:12647:
        -:12648:#define REQUIRE( ... ) INTERNAL_CATCH_TEST( "REQUIRE", Catch::ResultDisposition::Normal, __VA_ARGS__  )
        -:12649:#define REQUIRE_FALSE( ... ) INTERNAL_CATCH_TEST( "REQUIRE_FALSE", Catch::ResultDisposition::Normal | Catch::ResultDisposition::FalseTest, __VA_ARGS__ )
        -:12650:
        -:12651:#define REQUIRE_THROWS( ... ) INTERNAL_CATCH_THROWS( "REQUIRE_THROWS", Catch::ResultDisposition::Normal, __VA_ARGS__ )
        -:12652:#define REQUIRE_THROWS_AS( expr, exceptionType ) INTERNAL_CATCH_THROWS_AS( "REQUIRE_THROWS_AS", exceptionType, Catch::ResultDisposition::Normal, expr )
        -:12653:#define REQUIRE_THROWS_WITH( expr, matcher ) INTERNAL_CATCH_THROWS_STR_MATCHES( "REQUIRE_THROWS_WITH", Catch::ResultDisposition::Normal, matcher, expr )
        -:12654:#if !defined(CATCH_CONFIG_DISABLE_MATCHERS)
        -:12655:#define REQUIRE_THROWS_MATCHES( expr, exceptionType, matcher ) INTERNAL_CATCH_THROWS_MATCHES( "REQUIRE_THROWS_MATCHES", exceptionType, Catch::ResultDisposition::Normal, matcher, expr )
        -:12656:#endif // CATCH_CONFIG_DISABLE_MATCHERS
        -:12657:#define REQUIRE_NOTHROW( ... ) INTERNAL_CATCH_NO_THROW( "REQUIRE_NOTHROW", Catch::ResultDisposition::Normal, __VA_ARGS__ )
        -:12658:
        -:12659:#define CHECK( ... ) INTERNAL_CATCH_TEST( "CHECK", Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )
        -:12660:#define CHECK_FALSE( ... ) INTERNAL_CATCH_TEST( "CHECK_FALSE", Catch::ResultDisposition::ContinueOnFailure | Catch::ResultDisposition::FalseTest, __VA_ARGS__ )
        -:12661:#define CHECKED_IF( ... ) INTERNAL_CATCH_IF( "CHECKED_IF", Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )
        -:12662:#define CHECKED_ELSE( ... ) INTERNAL_CATCH_ELSE( "CHECKED_ELSE", Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )
        -:12663:#define CHECK_NOFAIL( ... ) INTERNAL_CATCH_TEST( "CHECK_NOFAIL", Catch::ResultDisposition::ContinueOnFailure | Catch::ResultDisposition::SuppressFail, __VA_ARGS__ )
        -:12664:
        -:12665:#define CHECK_THROWS( ... )  INTERNAL_CATCH_THROWS( "CHECK_THROWS", Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )
        -:12666:#define CHECK_THROWS_AS( expr, exceptionType ) INTERNAL_CATCH_THROWS_AS( "CHECK_THROWS_AS", exceptionType, Catch::ResultDisposition::ContinueOnFailure, expr )
        -:12667:#define CHECK_THROWS_WITH( expr, matcher ) INTERNAL_CATCH_THROWS_STR_MATCHES( "CHECK_THROWS_WITH", Catch::ResultDisposition::ContinueOnFailure, matcher, expr )
        -:12668:#if !defined(CATCH_CONFIG_DISABLE_MATCHERS)
        -:12669:#define CHECK_THROWS_MATCHES( expr, exceptionType, matcher ) INTERNAL_CATCH_THROWS_MATCHES( "CHECK_THROWS_MATCHES", exceptionType, Catch::ResultDisposition::ContinueOnFailure, matcher, expr )
        -:12670:#endif // CATCH_CONFIG_DISABLE_MATCHERS
        -:12671:#define CHECK_NOTHROW( ... ) INTERNAL_CATCH_NO_THROW( "CHECK_NOTHROW", Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )
        -:12672:
        -:12673:#if !defined(CATCH_CONFIG_DISABLE_MATCHERS)
        -:12674:#define CHECK_THAT( arg, matcher ) INTERNAL_CHECK_THAT( "CHECK_THAT", matcher, Catch::ResultDisposition::ContinueOnFailure, arg )
        -:12675:
        -:12676:#define REQUIRE_THAT( arg, matcher ) INTERNAL_CHECK_THAT( "REQUIRE_THAT", matcher, Catch::ResultDisposition::Normal, arg )
        -:12677:#endif // CATCH_CONFIG_DISABLE_MATCHERS
        -:12678:
        -:12679:#define INFO( msg ) INTERNAL_CATCH_INFO( "INFO", msg )
        -:12680:#define WARN( msg ) INTERNAL_CATCH_MSG( "WARN", Catch::ResultWas::Warning, Catch::ResultDisposition::ContinueOnFailure, msg )
        -:12681:#define CAPTURE( msg ) INTERNAL_CATCH_INFO( "CAPTURE", #msg " := " << ::Catch::Detail::stringify(msg) )
        -:12682:
        -:12683:#define TEST_CASE( ... ) INTERNAL_CATCH_TESTCASE( __VA_ARGS__ )
        -:12684:#define TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_TEST_CASE_METHOD( className, __VA_ARGS__ )
        -:12685:#define METHOD_AS_TEST_CASE( method, ... ) INTERNAL_CATCH_METHOD_AS_TEST_CASE( method, __VA_ARGS__ )
        -:12686:#define REGISTER_TEST_CASE( Function, ... ) INTERNAL_CATCH_REGISTER_TESTCASE( Function, __VA_ARGS__ )
        -:12687:#define SECTION( ... ) INTERNAL_CATCH_SECTION( __VA_ARGS__ )
        -:12688:#define FAIL( ... ) INTERNAL_CATCH_MSG( "FAIL", Catch::ResultWas::ExplicitFailure, Catch::ResultDisposition::Normal, __VA_ARGS__ )
        -:12689:#define FAIL_CHECK( ... ) INTERNAL_CATCH_MSG( "FAIL_CHECK", Catch::ResultWas::ExplicitFailure, Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )
        -:12690:#define SUCCEED( ... ) INTERNAL_CATCH_MSG( "SUCCEED", Catch::ResultWas::Ok, Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )
        -:12691:#define ANON_TEST_CASE() INTERNAL_CATCH_TESTCASE()
        -:12692:
        -:12693:#endif
        -:12694:
        -:12695:#define CATCH_TRANSLATE_EXCEPTION( signature ) INTERNAL_CATCH_TRANSLATE_EXCEPTION( signature )
        -:12696:
        -:12697:// "BDD-style" convenience wrappers
        -:12698:#define SCENARIO( ... ) TEST_CASE( "Scenario: " __VA_ARGS__ )
        -:12699:#define SCENARIO_METHOD( className, ... ) INTERNAL_CATCH_TEST_CASE_METHOD( className, "Scenario: " __VA_ARGS__ )
        -:12700:
        -:12701:#define GIVEN( desc )    SECTION( std::string("   Given: ") + desc )
        -:12702:#define WHEN( desc )     SECTION( std::string("    When: ") + desc )
        -:12703:#define AND_WHEN( desc ) SECTION( std::string("And when: ") + desc )
        -:12704:#define THEN( desc )     SECTION( std::string("    Then: ") + desc )
        -:12705:#define AND_THEN( desc ) SECTION( std::string("     And: ") + desc )
        -:12706:
        -:12707:using Catch::Detail::Approx;
        -:12708:
        -:12709:#else
        -:12710://////
        -:12711:// If this config identifier is defined then all CATCH macros are prefixed with CATCH_
        -:12712:#ifdef CATCH_CONFIG_PREFIX_ALL
        -:12713:
        -:12714:#define CATCH_REQUIRE( ... )        (void)(0)
        -:12715:#define CATCH_REQUIRE_FALSE( ... )  (void)(0)
        -:12716:
        -:12717:#define CATCH_REQUIRE_THROWS( ... ) (void)(0)
        -:12718:#define CATCH_REQUIRE_THROWS_AS( expr, exceptionType ) (void)(0)
        -:12719:#define CATCH_REQUIRE_THROWS_WITH( expr, matcher )     (void)(0)
        -:12720:#if !defined(CATCH_CONFIG_DISABLE_MATCHERS)
        -:12721:#define CATCH_REQUIRE_THROWS_MATCHES( expr, exceptionType, matcher ) (void)(0)
        -:12722:#endif// CATCH_CONFIG_DISABLE_MATCHERS
        -:12723:#define CATCH_REQUIRE_NOTHROW( ... ) (void)(0)
        -:12724:
        -:12725:#define CATCH_CHECK( ... )         (void)(0)
        -:12726:#define CATCH_CHECK_FALSE( ... )   (void)(0)
        -:12727:#define CATCH_CHECKED_IF( ... )    if (__VA_ARGS__)
        -:12728:#define CATCH_CHECKED_ELSE( ... )  if (!(__VA_ARGS__))
        -:12729:#define CATCH_CHECK_NOFAIL( ... )  (void)(0)
        -:12730:
        -:12731:#define CATCH_CHECK_THROWS( ... )  (void)(0)
        -:12732:#define CATCH_CHECK_THROWS_AS( expr, exceptionType ) (void)(0)
        -:12733:#define CATCH_CHECK_THROWS_WITH( expr, matcher )     (void)(0)
        -:12734:#if !defined(CATCH_CONFIG_DISABLE_MATCHERS)
        -:12735:#define CATCH_CHECK_THROWS_MATCHES( expr, exceptionType, matcher ) (void)(0)
        -:12736:#endif // CATCH_CONFIG_DISABLE_MATCHERS
        -:12737:#define CATCH_CHECK_NOTHROW( ... ) (void)(0)
        -:12738:
        -:12739:#if !defined(CATCH_CONFIG_DISABLE_MATCHERS)
        -:12740:#define CATCH_CHECK_THAT( arg, matcher )   (void)(0)
        -:12741:
        -:12742:#define CATCH_REQUIRE_THAT( arg, matcher ) (void)(0)
        -:12743:#endif // CATCH_CONFIG_DISABLE_MATCHERS
        -:12744:
        -:12745:#define CATCH_INFO( msg )    (void)(0)
        -:12746:#define CATCH_WARN( msg )    (void)(0)
        -:12747:#define CATCH_CAPTURE( msg ) (void)(0)
        -:12748:
        -:12749:#define CATCH_TEST_CASE( ... ) INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ))
        -:12750:#define CATCH_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ))
        -:12751:#define CATCH_METHOD_AS_TEST_CASE( method, ... )
        -:12752:#define CATCH_REGISTER_TEST_CASE( Function, ... ) (void)(0)
        -:12753:#define CATCH_SECTION( ... )
        -:12754:#define CATCH_FAIL( ... ) (void)(0)
        -:12755:#define CATCH_FAIL_CHECK( ... ) (void)(0)
        -:12756:#define CATCH_SUCCEED( ... ) (void)(0)
        -:12757:
        -:12758:#define CATCH_ANON_TEST_CASE() INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ))
        -:12759:
        -:12760:// "BDD-style" convenience wrappers
        -:12761:#define CATCH_SCENARIO( ... ) INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ))
        -:12762:#define CATCH_SCENARIO_METHOD( className, ... ) INTERNAL_CATCH_TESTCASE_METHOD_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ), className )
        -:12763:#define CATCH_GIVEN( desc )
        -:12764:#define CATCH_WHEN( desc )
        -:12765:#define CATCH_AND_WHEN( desc )
        -:12766:#define CATCH_THEN( desc )
        -:12767:#define CATCH_AND_THEN( desc )
        -:12768:
        -:12769:// If CATCH_CONFIG_PREFIX_ALL is not defined then the CATCH_ prefix is not required
        -:12770:#else
        -:12771:
        -:12772:#define REQUIRE( ... )       (void)(0)
        -:12773:#define REQUIRE_FALSE( ... ) (void)(0)
        -:12774:
        -:12775:#define REQUIRE_THROWS( ... ) (void)(0)
        -:12776:#define REQUIRE_THROWS_AS( expr, exceptionType ) (void)(0)
        -:12777:#define REQUIRE_THROWS_WITH( expr, matcher ) (void)(0)
        -:12778:#if !defined(CATCH_CONFIG_DISABLE_MATCHERS)
        -:12779:#define REQUIRE_THROWS_MATCHES( expr, exceptionType, matcher ) (void)(0)
        -:12780:#endif // CATCH_CONFIG_DISABLE_MATCHERS
        -:12781:#define REQUIRE_NOTHROW( ... ) (void)(0)
        -:12782:
        -:12783:#define CHECK( ... ) (void)(0)
        -:12784:#define CHECK_FALSE( ... ) (void)(0)
        -:12785:#define CHECKED_IF( ... ) if (__VA_ARGS__)
        -:12786:#define CHECKED_ELSE( ... ) if (!(__VA_ARGS__))
        -:12787:#define CHECK_NOFAIL( ... ) (void)(0)
        -:12788:
        -:12789:#define CHECK_THROWS( ... )  (void)(0)
        -:12790:#define CHECK_THROWS_AS( expr, exceptionType ) (void)(0)
        -:12791:#define CHECK_THROWS_WITH( expr, matcher ) (void)(0)
        -:12792:#if !defined(CATCH_CONFIG_DISABLE_MATCHERS)
        -:12793:#define CHECK_THROWS_MATCHES( expr, exceptionType, matcher ) (void)(0)
        -:12794:#endif // CATCH_CONFIG_DISABLE_MATCHERS
        -:12795:#define CHECK_NOTHROW( ... ) (void)(0)
        -:12796:
        -:12797:#if !defined(CATCH_CONFIG_DISABLE_MATCHERS)
        -:12798:#define CHECK_THAT( arg, matcher ) (void)(0)
        -:12799:
        -:12800:#define REQUIRE_THAT( arg, matcher ) (void)(0)
        -:12801:#endif // CATCH_CONFIG_DISABLE_MATCHERS
        -:12802:
        -:12803:#define INFO( msg ) (void)(0)
        -:12804:#define WARN( msg ) (void)(0)
        -:12805:#define CAPTURE( msg ) (void)(0)
        -:12806:
        -:12807:#define TEST_CASE( ... )  INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ))
        -:12808:#define TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ))
        -:12809:#define METHOD_AS_TEST_CASE( method, ... )
        -:12810:#define REGISTER_TEST_CASE( Function, ... ) (void)(0)
        -:12811:#define SECTION( ... )
        -:12812:#define FAIL( ... ) (void)(0)
        -:12813:#define FAIL_CHECK( ... ) (void)(0)
        -:12814:#define SUCCEED( ... ) (void)(0)
        -:12815:#define ANON_TEST_CASE() INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ))
        -:12816:
        -:12817:#endif
        -:12818:
        -:12819:#define CATCH_TRANSLATE_EXCEPTION( signature ) INTERNAL_CATCH_TRANSLATE_EXCEPTION_NO_REG( INTERNAL_CATCH_UNIQUE_NAME( catch_internal_ExceptionTranslator ), signature )
        -:12820:
        -:12821:// "BDD-style" convenience wrappers
        -:12822:#define SCENARIO( ... ) INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ) )
        -:12823:#define SCENARIO_METHOD( className, ... ) INTERNAL_CATCH_TESTCASE_METHOD_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ), className )
        -:12824:
        -:12825:#define GIVEN( desc )
        -:12826:#define WHEN( desc )
        -:12827:#define AND_WHEN( desc )
        -:12828:#define THEN( desc )
        -:12829:#define AND_THEN( desc )
        -:12830:
        -:12831:using Catch::Detail::Approx;
        -:12832:
        -:12833:#endif
        -:12834:
        -:12835:#endif // ! CATCH_CONFIG_IMPL_ONLY
        -:12836:
        -:12837:// start catch_reenable_warnings.h
        -:12838:
        -:12839:
        -:12840:#ifdef __clang__
        -:12841:#    ifdef __ICC // icpc defines the __clang__ macro
        -:12842:#        pragma warning(pop)
        -:12843:#    else
        -:12844:#        pragma clang diagnostic pop
        -:12845:#    endif
        -:12846:#elif defined __GNUC__
        -:12847:#    pragma GCC diagnostic pop
        -:12848:#endif
        -:12849:
        -:12850:// end catch_reenable_warnings.h
        -:12851:// end catch.hpp
        -:12852:#endif // TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED
