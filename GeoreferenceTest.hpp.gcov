        -:    0:Source:test/GeoreferenceTest.hpp
        -:    0:Graph:main.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:/*
        -:    2: * To change this license header, choose License Headers in Project Properties.
        -:    3: * To change this template file, choose Tools | Templates
        -:    4: * and open the template in the editor.
        -:    5: */
        -:    6:
        -:    7:/* 
        -:    8: * File:   georeferenceTest.hpp
        -:    9: * Author: emile
        -:   10: *
        -:   11: * Created on April 25, 2019, 9:13 AM
        -:   12: */
        -:   13:
        -:   14:#include <Eigen/Dense>
        -:   15:#include <Eigen/src/Core/Matrix.h>
        -:   16:#include <iostream>
        -:   17:#include <iomanip>
        -:   18:#include <string>
        -:   19:#include <sstream>
        -:   20:#include <fstream>
        -:   21:#include "catch.hpp"
        -:   22:#include "../src/utils/Exception.hpp"
        -:   23:using namespace std;
        -:   24:#ifdef _WIN32
        -:   25:static string GeoBinexec("..\\bin\\georeference.exe");
        -:   26:static string outputdir(".");
        -:   27:#else
    #####:   28:static string GeoBinexec("build/bin/georeference");
    #####:   29:static string GeoOutputdir(".");
        -:   30:#endif
        -:   31:
        -:   32:/**
        -:   33: * Execute a main function
        -:   34: * 
        -:   35: * @param command the parameters for the execution
        -:   36: */
    #####:   37:std::stringstream GeoSystem_call(const std::string& command){
        -:   38:
    #####:   39:     std::stringstream out;
        -:   40:     FILE *fp;
        -:   41:     char path[1035];
        -:   42:
        -:   43:#ifdef _WIN32
        -:   44:     fp = _popen(command.c_str(), "r");
        -:   45:#else
    #####:   46:     fp = popen(command.c_str(), "r");
        -:   47:#endif
    #####:   48:     if (fp == NULL) {
    #####:   49:	printf("Failed to run command\n" );
    #####:   50:	exit(1);
        -:   51:     }
        -:   52:
    #####:   53:     while (fgets(path, sizeof(path)-1, fp) != NULL) {
    #####:   54:	     out<<path;
        -:   55:     }
        -:   56:
        -:   57:#ifdef _WIN32
        -:   58:     _pclose(fp);
        -:   59:#else
    #####:   60:     pclose(fp);
        -:   61:#endif
        -:   62:
    #####:   63:     return out;
        -:   64:}
        -:   65:
        -:   66:/**Test with file extention valid*/
    #####:   67:TEST_CASE("test the extention of the file receive")
        -:   68:{
    #####:   69:    string commFile = " test/data/all/example.all 2>&1";
    #####:   70:    string commTest = GeoBinexec+commFile;
    #####:   71:    std::stringstream ss;
    #####:   72:    ss = GeoSystem_call(std::string(commTest));
    #####:   73:    std::string line;
    #####:   74:    getline(ss,line);
    #####:   75:    getline(ss,line);
    #####:   76:    REQUIRE(line!="Error while parsing test/data/all/example.all: Unknown extension");
    #####:   77:    commFile = " test/data/s7k/20141016_150519_FJ-Saucier.s7k 2>&1";
    #####:   78:    commTest = GeoBinexec+commFile;
    #####:   79:    ss = GeoSystem_call(std::string(commTest));
    #####:   80:    getline(ss,line);
    #####:   81:    getline(ss,line);
    #####:   82:    REQUIRE(line!="Error while parsing test/data/s7k/20141016_150519_FJ-Saucier.s7k: Unknown extension");
    #####:   83:    commFile = " test/data/xtf/example.xtf 2>&1";
    #####:   84:    commTest = GeoBinexec+commFile;
    #####:   85:    ss = GeoSystem_call(std::string(commTest));
    #####:   86:    getline(ss,line);
    #####:   87:    getline(ss,line);
    #####:   88:    REQUIRE(line!="Error while parsing test/data/xtf/example.xtf: Unknown extension");
    #####:   89:}
        -:   90:
        -:   91:/**Test with file extention invalid*/
    #####:   92:TEST_CASE("test if the file is invalid")
        -:   93:{
    #####:   94:    string commFile = " test/data/badextension.bad 2>&1";
    #####:   95:    string commTest = GeoBinexec+commFile;
    #####:   96:    std::stringstream ss;
    #####:   97:    ss = GeoSystem_call(std::string(commTest));
    #####:   98:    std::string line;
    #####:   99:    getline(ss,line);
    #####:  100:    getline(ss,line);
    #####:  101:    REQUIRE(line=="Error while parsing test/data/badextension.bad: Unknown extension");
    #####:  102:}
        -:  103:
        -:  104:/**Test with no file*/
    #####:  105:TEST_CASE("test if the file is not present")
        -:  106:{
    #####:  107:    string commFile = " test/data/all/examplee.all 2>&1";
    #####:  108:    string commTest = GeoBinexec+commFile;
    #####:  109:    std::stringstream ss;
    #####:  110:    ss = GeoSystem_call(std::string(commTest));
    #####:  111:    std::string line;
    #####:  112:    getline(ss,line);
    #####:  113:    getline(ss,line);
    #####:  114:    REQUIRE(line=="Error while parsing test/data/all/examplee.all: File not found");
    #####:  115:}
        -:  116:
        -:  117:/**Test with no existent file*/
    #####:  118:TEST_CASE("test if file parameter is not present")
        -:  119:{
    #####:  120:    string commFile = " 2>&1";
    #####:  121:    string commTest = GeoBinexec+commFile;
    #####:  122:    std::stringstream ss;
    #####:  123:    ss = GeoSystem_call(std::string(commTest));
    #####:  124:    std::string result = "\n\
        -:  125:  NAME\n\n\
        -:  126:     georeference - Produit un nuage de points d'un fichier de datagrammes multifaisceaux\n\n\
        -:  127:  SYNOPSIS\n \
        -:  128:	   georeference [-x lever_arm_x] [-y lever_arm_y] [-z lever_arm_z] [-p roll_angle] [-P heading_angle] [-t pitch_angle] fichier\n\n\
        -:  129:  DESCRIPTION\n\n \
        -:  130:  Copyright 2017-2019 © Centre Interdisciplinaire de développement en Cartographie des Océans (CIDCO), Tous droits réservés\n";
    #####:  131:    REQUIRE(ss.str()==result);
    #####:  132:}
        -:  133:
        -:  134:/**Test with parameter x y z invalid*/
    #####:  135:TEST_CASE("test if the parameter x y z are invalid")
        -:  136:{
    #####:  137:    string commX = " -x sjdhsd";
    #####:  138:    string commY = " -y gyhgj";
    #####:  139:    string commZ = " -z gyigkb";
    #####:  140:    string commFile = " test/data/all/example.all 2>&1";
    #####:  141:    string commTest = GeoBinexec+commX+commFile;
    #####:  142:    std::stringstream ss;
    #####:  143:    ss = GeoSystem_call(std::string(commTest));
    #####:  144:    std::string line;
    #####:  145:    getline(ss,line);
    #####:  146:    REQUIRE(line=="Invalid lever arm X offset (-x)");
    #####:  147:    commTest = GeoBinexec+commY+commFile;
    #####:  148:    ss = GeoSystem_call(std::string(commTest));
    #####:  149:    getline(ss,line);
    #####:  150:    REQUIRE(line=="Invalid lever arm Y offset (-y)");
    #####:  151:    commTest = GeoBinexec+commZ+commFile;
    #####:  152:    ss = GeoSystem_call(std::string(commTest));
    #####:  153:    getline(ss,line);
    #####:  154:    REQUIRE(line=="Invalid lever arm Z offset (-z)");
    #####:  155:}
        -:  156:
        -:  157:/**Test with parameter p P t invalid*/
    #####:  158:TEST_CASE("test if parameter p P t are invalid")
        -:  159:{
    #####:  160:    string commp = " -p sjdhsd";
    #####:  161:    string commP = " -P gyhgj";
    #####:  162:    string commt = " -t gyigkb";
    #####:  163:    string commFile = " test/data/all/example.all 2>&1";
    #####:  164:    string commTest = GeoBinexec+commp+commFile;
    #####:  165:    std::stringstream ss;
    #####:  166:    ss = GeoSystem_call(std::string(commTest));
    #####:  167:    std::string line;
    #####:  168:    getline(ss,line);
    #####:  169:    REQUIRE(line=="Invalid roll angle offset (-p)");
    #####:  170:    commTest = GeoBinexec+commP+commFile;
    #####:  171:    ss = GeoSystem_call(std::string(commTest));
    #####:  172:    getline(ss,line);
    #####:  173:    REQUIRE(line=="Invalid heading angle offset (-P)");
    #####:  174:    commTest = GeoBinexec+commt+commFile;
    #####:  175:    ss = GeoSystem_call(std::string(commTest));
    #####:  176:    getline(ss,line);
    #####:  177:    REQUIRE(line=="Invalid pitch angle offset (-t)");
    #####:  178:}
