        -:    0:Source:src/utils/TimeUtils.hpp
        -:    0:Graph:main.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:#ifndef TIMEUTILS_HPP
        -:    2:#define TIMEUTILS_HPP
        -:    3:
        -:    4:#include <cstring>
        -:    5:#ifdef _WIN32
        -:    6:#include <ctime>
        -:    7:#endif
        -:    8:
        -:    9:class TimeUtils{
        -:   10:public:
        -:   11:
        -:   12:/**
        -:   13: * Returns epoch in microseconds since Jan 1 1970
        -:   14: */
        -:   15:
        -:   16:/**
        -:   17: * Return the number microseconds since 1st January 1970 of the parameters in total
        -:   18: * 
        -:   19: * @param year number of year
        -:   20: * @param month number of month less than an year
        -:   21: * @param day number of day less than an month
        -:   22: * @param hour number of hour less than an day
        -:   23: * @param minutes number of minute les than an hour 
        -:   24: * @param seconds number of second les than an second
        -:   25: * @param millis number of millisecond less than an second
        -:   26: * @param microseconds number of microsecond less than an millisecond
        -:   27: */
    #####:   28:static uint64_t build_time(int year,int month,int day,int hour,int minutes,int seconds,int millis,int microseconds){
        -:   29:	struct tm t;
    #####:   30:	memset(&t,0,sizeof(struct tm));
        -:   31:
    #####:   32:	t.tm_sec=seconds;
    #####:   33:	t.tm_min=minutes;
    #####:   34:	t.tm_hour=hour;
    #####:   35:	t.tm_mday=day;
    #####:   36:	t.tm_mon=month;
    #####:   37:	t.tm_year=year - 1900;
        -:   38:
    #####:   39:	uint64_t res = mktime(&t)*1000000 + millis * 1000 + microseconds;
        -:   40:
    #####:   41:	return res;
        -:   42:}
        -:   43:
        -:   44:/**
        -:   45: * Return the number microseconds since 1st January 1970 of the parameters in total
        -:   46: * 
        -:   47: * @param year number of year
        -:   48: * @param month number of month less than an year
        -:   49: * @param day number of day less than an month
        -:   50: * @param timeInMilliseconds number of millisecond less than an day
        -:   51: */
    #####:   52:static uint64_t build_time(int year,int month,int day,long timeInMilliseconds){
        -:   53:    struct tm t;
    #####:   54:    memset(&t,0,sizeof(struct tm));
        -:   55:
    #####:   56:    t.tm_sec=0;
    #####:   57:    t.tm_min=0;
    #####:   58:    t.tm_hour=0;
    #####:   59:    t.tm_mday=day;
    #####:   60:    t.tm_mon=month;
    #####:   61:    t.tm_year=year - 1900;
        -:   62:
    #####:   63:    uint64_t res = mktime(&t)*1000000 + timeInMilliseconds * 1000;
        -:   64:
    #####:   65:    return res;
        -:   66:}
        -:   67:
        -:   68:/**
        -:   69: * Return the number microseconds since 1st January 1970 of the parameters in total
        -:   70: * 
        -:   71: * @param year number of year
        -:   72: * @param yday number of day less than an year
        -:   73: * @param hour number of hour less than an day
        -:   74: * @param minutes number of minute les than an hour 
        -:   75: * @param timeMicroseconds number of microsecond less than an minute
        -:   76: */
    #####:   77:static uint64_t build_time(int year,int yday, int hour, int minutes, long timeInMicroSeconds){
        -:   78:    struct tm t;
    #####:   79:    memset(&t,0,sizeof(struct tm));
        -:   80:
    #####:   81:    t.tm_sec=0;
    #####:   82:    t.tm_min=minutes;
    #####:   83:    t.tm_hour=hour;
    #####:   84:    t.tm_mday=yday; //hack around the C-standard: use "January 244th" since yday is an output parameter
    #####:   85:    t.tm_year=year - 1900;
        -:   86:
    #####:   87:    uint64_t res = mktime(&t)*1000000 + timeInMicroSeconds;
        -:   88:
    #####:   89:    return res;
        -:   90:}
        -:   91:
        -:   92:/**
        -:   93: * Return the timestamp in julian time format (yyyy-ddd hh:mm:ss) 
        -:   94: * 
        -:   95: * @param microEpoch number of microsecond of the timestamp 
        -:   96: */
        -:   97:static std::string julianTime(uint64_t microEpoch)
        -:   98:{
        -:   99:    time_t date = microEpoch/1000000 + 18000;
        -:  100:    struct tm * timeinfo;
        -:  101:    timeinfo = localtime (&date);
        -:  102:    std::stringstream ssDate;
        -:  103:    ssDate << timeinfo->tm_year + 1900 << "-" << timeinfo->tm_yday + 1 << " " << timeinfo->tm_hour << ":" << timeinfo->tm_min << ":" << timeinfo->tm_sec;
        -:  104:    return ssDate.str();
        -:  105:}
        -:  106:
        -:  107:};
        -:  108:#endif
